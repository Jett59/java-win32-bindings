// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class WINDOWS_17 extends WINDOWS_16 {

    public static int WriteThroughNotSupported() {
        return (int)1L;
    }
    public static int WriteThroughSupported() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_WRITE_CACHE_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERSISTENT_RESERVE_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static int TCCollectionBugCheck() {
        return (int)1L;
    }
    public static int TCCollectionApplicationRequested() {
        return (int)2L;
    }
    public static int TCCollectionDeviceRequested() {
        return (int)3L;
    }
    public static OfAddress PDEVICEDUMP_COLLECTION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_SUBSECTION_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STRUCTURE_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_SECTION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGP_LOG_PAGE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_PUBLIC_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_RESTRICTED_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_PRIVATE_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGEDEVICE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDLE_POWER = Constants$root.C_POINTER$LAYOUT;
    public static int StoragePowerupUnknown() {
        return (int)0L;
    }
    public static int StoragePowerupIO() {
        return (int)1L;
    }
    public static int StoragePowerupDeviceAttention() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_POWERUP_REASON_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDLE_POWERUP_REASON = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDevicePowerCapUnitsPercent() {
        return (int)0L;
    }
    public static int StorageDevicePowerCapUnitsMilliwatts() {
        return (int)1L;
    }
    public static OfAddress PSTORAGE_DEVICE_POWER_CAP_UNITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_POWER_CAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_RPMB_DATA_FRAME = Constants$root.C_POINTER$LAYOUT;
    public static int StorRpmbProgramAuthKey() {
        return (int)1L;
    }
    public static int StorRpmbQueryWriteCounter() {
        return (int)2L;
    }
    public static int StorRpmbAuthenticatedWrite() {
        return (int)3L;
    }
    public static int StorRpmbAuthenticatedRead() {
        return (int)4L;
    }
    public static int StorRpmbReadResultRequest() {
        return (int)5L;
    }
    public static int StorRpmbAuthenticatedDeviceConfigWrite() {
        return (int)6L;
    }
    public static int StorRpmbAuthenticatedDeviceConfigRead() {
        return (int)7L;
    }
    public static OfAddress PSTORAGE_RPMB_COMMAND_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_EVENT_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCounterTypeUnknown() {
        return (int)0L;
    }
    public static int StorageCounterTypeTemperatureCelsius() {
        return (int)1L;
    }
    public static int StorageCounterTypeTemperatureCelsiusMax() {
        return (int)2L;
    }
    public static int StorageCounterTypeReadErrorsTotal() {
        return (int)3L;
    }
    public static int StorageCounterTypeReadErrorsCorrected() {
        return (int)4L;
    }
    public static int StorageCounterTypeReadErrorsUncorrected() {
        return (int)5L;
    }
    public static int StorageCounterTypeWriteErrorsTotal() {
        return (int)6L;
    }
    public static int StorageCounterTypeWriteErrorsCorrected() {
        return (int)7L;
    }
    public static int StorageCounterTypeWriteErrorsUncorrected() {
        return (int)8L;
    }
    public static int StorageCounterTypeManufactureDate() {
        return (int)9L;
    }
    public static int StorageCounterTypeStartStopCycleCount() {
        return (int)10L;
    }
    public static int StorageCounterTypeStartStopCycleCountMax() {
        return (int)11L;
    }
    public static int StorageCounterTypeLoadUnloadCycleCount() {
        return (int)12L;
    }
    public static int StorageCounterTypeLoadUnloadCycleCountMax() {
        return (int)13L;
    }
    public static int StorageCounterTypeWearPercentage() {
        return (int)14L;
    }
    public static int StorageCounterTypeWearPercentageWarning() {
        return (int)15L;
    }
    public static int StorageCounterTypeWearPercentageMax() {
        return (int)16L;
    }
    public static int StorageCounterTypePowerOnHours() {
        return (int)17L;
    }
    public static int StorageCounterTypeReadLatency100NSMax() {
        return (int)18L;
    }
    public static int StorageCounterTypeWriteLatency100NSMax() {
        return (int)19L;
    }
    public static int StorageCounterTypeFlushLatency100NSMax() {
        return (int)20L;
    }
    public static int StorageCounterTypeMax() {
        return (int)21L;
    }
    public static OfAddress PSTORAGE_COUNTER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_COUNTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_COUNTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_INFO_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_SLOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_DOWNLOAD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_ACTIVATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static int StorAttributeMgmt_ClearAttribute() {
        return (int)0L;
    }
    public static int StorAttributeMgmt_SetAttribute() {
        return (int)1L;
    }
    public static int StorAttributeMgmt_ResetAttribute() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_ATTRIBUTE_MGMT_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ATTRIBUTE_MGMT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_HEALTH_NOTIFICATION_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LOGICAL_DEVICE_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LOGICAL_DEVICES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PHYSICAL_DEVICE_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PHYSICAL_DEVICES = Constants$root.C_POINTER$LAYOUT;
    public static int ScmRegionFlagNone() {
        return (int)0L;
    }
    public static int ScmRegionFlagLabel() {
        return (int)1L;
    }
    public static OfAddress PSCM_REGION_FLAG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_REGION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_REGIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_INTERLEAVED_PD_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LD_INTERLEAVE_SET_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceQuery_Descriptor() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceQuery_IsSupported() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceQuery_Max() {
        return (int)2L;
    }
    public static OfAddress PSCM_PD_QUERY_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceProperty_DeviceInfo() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceProperty_ManagementStatus() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceProperty_FirmwareInfo() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceProperty_LocationString() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceProperty_DeviceSpecificInfo() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceProperty_DeviceHandle() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceProperty_Max() {
        return (int)6L;
    }
    public static OfAddress PSCM_PD_PROPERTY_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PROPERTY_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DESCRIPTOR_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_SPECIFIC_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_SPECIFIC_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_SLOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceHealth_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceHealth_Unhealthy() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceHealth_Warning() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceHealth_Healthy() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceHealth_Max() {
        return (int)4L;
    }
    public static OfAddress PSCM_PD_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceOpStatus_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceOpStatus_Ok() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceOpStatus_PredictingFailure() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceOpStatus_InService() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceOpStatus_HardwareError() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceOpStatus_NotUsable() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceOpStatus_TransientError() {
        return (int)6L;
    }
    public static int ScmPhysicalDeviceOpStatus_Missing() {
        return (int)7L;
    }
    public static int ScmPhysicalDeviceOpStatus_Max() {
        return (int)8L;
    }
    public static OfAddress PSCM_PD_OPERATIONAL_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceOpReason_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceOpReason_Media() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceOpReason_ThresholdExceeded() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceOpReason_LostData() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceOpReason_EnergySource() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceOpReason_Configuration() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceOpReason_DeviceController() {
        return (int)6L;
    }
    public static int ScmPhysicalDeviceOpReason_MediaController() {
        return (int)7L;
    }
    public static int ScmPhysicalDeviceOpReason_Component() {
        return (int)8L;
    }
    public static int ScmPhysicalDeviceOpReason_BackgroundOperation() {
        return (int)9L;
    }
    public static int ScmPhysicalDeviceOpReason_InvalidFirmware() {
        return (int)10L;
    }
    public static int ScmPhysicalDeviceOpReason_HealthCheck() {
        return (int)11L;
    }
    public static int ScmPhysicalDeviceOpReason_LostDataPersistence() {
        return (int)12L;
    }
    public static int ScmPhysicalDeviceOpReason_DisabledByPlatform() {
        return (int)13L;
    }
    public static int ScmPhysicalDeviceOpReason_PermanentError() {
        return (int)14L;
    }
    public static int ScmPhysicalDeviceOpReason_LostWritePersistence() {
        return (int)15L;
    }
    public static int ScmPhysicalDeviceOpReason_FatalError() {
        return (int)16L;
    }
    public static int ScmPhysicalDeviceOpReason_DataPersistenceLossImminent() {
        return (int)17L;
    }
    public static int ScmPhysicalDeviceOpReason_WritePersistenceLossImminent() {
        return (int)18L;
    }
    public static int ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock() {
        return (int)19L;
    }
    public static int ScmPhysicalDeviceOpReason_PerformanceDegradation() {
        return (int)20L;
    }
    public static int ScmPhysicalDeviceOpReason_ExcessiveTemperature() {
        return (int)21L;
    }
    public static int ScmPhysicalDeviceOpReason_Max() {
        return (int)22L;
    }
    public static OfAddress PSCM_PD_OPERATIONAL_STATUS_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_MANAGEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_LOCATION_STRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_DOWNLOAD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_ACTIVATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INVDIMM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_REINITIALIZE_MEDIA_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceReinit_Success() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceReinit_RebootNeeded() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceReinit_ColdBootNeeded() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceReinit_Max() {
        return (int)3L;
    }
    public static OfAddress PSCM_PD_MEDIA_REINITIALIZATION_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_REINITIALIZE_MEDIA_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int Unknown() {
        return (int)0L;
    }
    public static int F5_1Pt2_512() {
        return (int)1L;
    }
    public static int F3_1Pt44_512() {
        return (int)2L;
    }
    public static int F3_2Pt88_512() {
        return (int)3L;
    }
    public static int F3_20Pt8_512() {
        return (int)4L;
    }
    public static int F3_720_512() {
        return (int)5L;
    }
    public static int F5_360_512() {
        return (int)6L;
    }
    public static int F5_320_512() {
        return (int)7L;
    }
    public static int F5_320_1024() {
        return (int)8L;
    }
    public static int F5_180_512() {
        return (int)9L;
    }
    public static int F5_160_512() {
        return (int)10L;
    }
    public static int RemovableMedia() {
        return (int)11L;
    }
    public static int FixedMedia() {
        return (int)12L;
    }
    public static int F3_120M_512() {
        return (int)13L;
    }
    public static int F3_640_512() {
        return (int)14L;
    }
    public static int F5_640_512() {
        return (int)15L;
    }
    public static int F5_720_512() {
        return (int)16L;
    }
    public static int F3_1Pt2_512() {
        return (int)17L;
    }
    public static int F3_1Pt23_1024() {
        return (int)18L;
    }
    public static int F5_1Pt23_1024() {
        return (int)19L;
    }
    public static int F3_128Mb_512() {
        return (int)20L;
    }
    public static int F3_230Mb_512() {
        return (int)21L;
    }
    public static int F8_256_128() {
        return (int)22L;
    }
    public static int F3_200Mb_512() {
        return (int)23L;
    }
    public static int F3_240M_512() {
        return (int)24L;
    }
    public static int F3_32M_512() {
        return (int)25L;
    }
    public static OfAddress PMEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBAD_TRACK_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_EX_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GEOMETRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_PARTITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVERIFY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASSIGN_BLOCKS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASSIGN_BLOCKS_EX = Constants$root.C_POINTER$LAYOUT;
    public static int PARTITION_STYLE_MBR() {
        return (int)0L;
    }
    public static int PARTITION_STYLE_GPT() {
        return (int)1L;
    }
    public static int PARTITION_STYLE_RAW() {
        return (int)2L;
    }
    public static OfAddress PPARTITION_INFORMATION_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_PARTITION_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_LENGTH_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static int DetectNone() {
        return (int)0L;
    }
    public static int DetectInt13() {
        return (int)1L;
    }
    public static int DetectExInt13() {
        return (int)2L;
    }
    public static OfAddress PDISK_INT13_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_EX_INT13_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_DETECTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_PARTITION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GEOMETRY_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_CONTROLLER_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static int EqualPriority() {
        return (int)0L;
    }
    public static int KeepPrefetchedData() {
        return (int)1L;
    }
    public static int KeepReadData() {
        return (int)2L;
    }
    public static OfAddress PDISK_CACHE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GROW_PARTITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHISTOGRAM_BUCKET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_HISTOGRAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_PERFORMANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_LOGGING = Constants$root.C_POINTER$LAYOUT;
    public static int RequestSize() {
        return (int)0L;
    }
    public static int RequestLocation() {
        return (int)1L;
    }
    public static OfAddress PBIN_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERF_BIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIN_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIN_RESULTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGETVERSIONINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGETVERSIONINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIDEREGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIDEREGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSENDCMDINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSENDCMDINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVERSTATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVERSTATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSENDCMDOUTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSENDCMDOUTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_DISK_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_DISK_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static int AllElements() {
        return (int)0L;
    }
    public static int ChangerTransport() {
        return (int)1L;
    }
    public static int ChangerSlot() {
        return (int)2L;
    }
    public static int ChangerIEPort() {
        return (int)3L;
    }
    public static int ChangerDrive() {
        return (int)4L;
    }
    public static int ChangerDoor() {
        return (int)5L;
    }
    public static int ChangerKeypad() {
        return (int)6L;
    }
    public static int ChangerMaxElement() {
        return (int)7L;
    }
    public static OfAddress PELEMENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_CHANGER_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_PRODUCT_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SET_ACCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_READ_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_STATUS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_INITIALIZE_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_EXCHANGE_MEDIUM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_MOVE_MEDIUM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SEND_VOLUME_TAG_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_ELEMENT_ADDRESS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceProblemNone() {
        return (int)0L;
    }
    public static int DeviceProblemHardware() {
        return (int)1L;
    }
    public static int DeviceProblemCHMError() {
        return (int)2L;
    }
    public static int DeviceProblemDoorOpen() {
        return (int)3L;
    }
    public static int DeviceProblemCalibrationError() {
        return (int)4L;
    }
    public static int DeviceProblemTargetFailure() {
        return (int)5L;
    }
    public static int DeviceProblemCHMMoveError() {
        return (int)6L;
    }
    public static int DeviceProblemCHMZeroError() {
        return (int)7L;
    }
    public static int DeviceProblemCartridgeInsertError() {
        return (int)8L;
    }
    public static int DeviceProblemPositionError() {
        return (int)9L;
    }
    public static int DeviceProblemSensorError() {
        return (int)10L;
    }
    public static int DeviceProblemCartridgeEjectError() {
        return (int)11L;
    }
    public static int DeviceProblemGripperError() {
        return (int)12L;
    }
    public static int DeviceProblemDriveError() {
        return (int)13L;
    }
    public static OfAddress PCHANGER_DEVICE_PROBLEM_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPATHNAME_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_FAT_BPB_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_VOLUME_DATA_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_EXTENDED_VOLUME_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREFS_VOLUME_DATA_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_LCN_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_LCN_INPUT_BUFFER_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOLUME_BITMAP_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_VCN_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTERS_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTER_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_FILE_RECORD_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_FILE_RECORD_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_RECORD_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFIND_BY_SID_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFIND_BY_SID_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_FILE_USN_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_TRACK_MODIFIED_RANGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RANGE_TRACK_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_COMMON_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_EXTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_UNION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDELETE_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMARK_HANDLE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMARK_HANDLE_INFO32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBULK_SECURITY_TEST_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PREFETCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PREFETCH_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILESYSTEM_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFAT_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXFAT_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILESYSTEM_STATISTICS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_STATISTICS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_OBJECTID_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SET_SPARSE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ZERO_DATA_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ZERO_DATA_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ALLOCATED_RANGE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDECRYPTION_STATUS_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_RAW_ENCRYPTED_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTED_DATA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTENDED_ENCRYPTED_DATA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPLEX_READ_DATA_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSI_COPYFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_MAKE_COMPATIBLE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SET_DEFECT_MGMT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_QUERY_SPARING_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_INITIATE_REPAIR_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static int ShrinkPrepare() {
        return (int)1L;
    }
    public static int ShrinkCommit() {
        return (int)2L;
    }
    public static int ShrinkAbort() {
        return (int)3L;
    }
    public static OfAddress PSHRINK_VOLUME_REQUEST_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHRINK_VOLUME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_MODIFY_RM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_QUERY_RM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_ROLLFORWARD_REDO_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_START_RM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_GET_METADATA_INFO_OUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTION_LOCKED_FILES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTIONS_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_READ_BACKUP_INFORMATION_OUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_WRITE_BACKUP_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_GET_TRANSACTED_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_SAVEPOINT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_CREATE_MINIVERSION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_TRANSACTION_ACTIVE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBOOT_AREA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTER_BASE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_FS_PERSISTENT_VOLUME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SYSTEM_RECOGNITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_OPLOCK_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_OPLOCK_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUAL_STORAGE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_CHANGE_MACHINE_SID_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_CHANGE_MACHINE_SID_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_QUERY_STATS_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_QUERY_STATS_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_ENUM_SDS_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_ENUM_SDS_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_ENUM_SDS_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_GLOBAL_CHANGE_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_GLOBAL_CHANGE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOOKUP_STREAM_FROM_CLUSTER_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOOKUP_STREAM_FROM_CLUSTER_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_TYPE_NOTIFICATION_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$644.FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$SEGMENT,"FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE");
    }
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$644.FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$SEGMENT,"FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE");
    }
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$645.FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$SEGMENT,"FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE");
    }
    public static OfAddress PCSV_MGMT_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_NAMESPACE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int CsvControlStartRedirectFile() {
        return (int)2L;
    }
    public static int CsvControlStopRedirectFile() {
        return (int)3L;
    }
    public static int CsvControlQueryRedirectState() {
        return (int)4L;
    }
    public static int CsvControlQueryFileRevision() {
        return (int)6L;
    }
    public static int CsvControlQueryMdsPath() {
        return (int)8L;
    }
    public static int CsvControlQueryFileRevisionFileId128() {
        return (int)9L;
    }
    public static int CsvControlQueryVolumeRedirectState() {
        return (int)10L;
    }
    public static int CsvControlEnableUSNRangeModificationTracking() {
        return (int)13L;
    }
    public static int CsvControlMarkHandleLocalVolumeMount() {
        return (int)14L;
    }
    public static int CsvControlUnmarkHandleLocalVolumeMount() {
        return (int)15L;
    }
    public static int CsvControlGetCsvFsMdsPathV2() {
        return (int)18L;
    }
    public static int CsvControlDisableCaching() {
        return (int)19L;
    }
    public static int CsvControlEnableCaching() {
        return (int)20L;
    }
    public static int CsvControlStartForceDFO() {
        return (int)21L;
    }
    public static int CsvControlStopForceDFO() {
        return (int)22L;
    }
    public static OfAddress PCSV_CONTROL_OP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_CONTROL_PARAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_REDIRECT_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_FILE_REVISION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_FILE_REVISION_FILE_ID_128 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_MDS_PATH = Constants$root.C_POINTER$LAYOUT;
    public static int CsvFsDiskConnectivityNone() {
        return (int)0L;
    }
    public static int CsvFsDiskConnectivityMdsNodeOnly() {
        return (int)1L;
    }
    public static int CsvFsDiskConnectivitySubsetOfNodes() {
        return (int)2L;
    }
    public static int CsvFsDiskConnectivityAllNodes() {
        return (int)3L;
    }
    public static OfAddress PCSVFS_DISK_CONNECTIVITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_VOLUME_REDIRECT_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_MDS_PATH_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int StorageReserveIdNone() {
        return (int)0L;
    }
    public static int StorageReserveIdHard() {
        return (int)1L;
    }
    public static int StorageReserveIdSoft() {
        return (int)2L;
    }
    public static int StorageReserveIdUpdateScratch() {
        return (int)3L;
    }
    public static int StorageReserveIdMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_RESERVE_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_IS_OWNED_BY_CSVFS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LEVEL_TRIM_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LEVEL_TRIM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LEVEL_TRIM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE() {
        return (int)0L;
    }
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS() {
        return (int)1L;
    }
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID() {
        return (int)2L;
    }
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID() {
        return (int)3L;
    }
    public static int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES() {
        return (int)4L;
    }
    public static OfAddress PCLUSTER_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REFERENCE_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_FILE_LAYOUT_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_FILE_LAYOUT_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LAYOUT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LAYOUT_NAME_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LAYOUT_INFO_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAM_LAYOUT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAM_EXTENT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_OFFLOAD_READ_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_OFFLOAD_READ_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_OFFLOAD_WRITE_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_OFFLOAD_WRITE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_PURGE_FAILURE_MODE_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREPAIR_COPIES_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREPAIR_COPIES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REGION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REGION_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REGION_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWRITE_USN_REASON_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static int FileStorageTierMediaTypeUnspecified() {
        return (int)0L;
    }
    public static int FileStorageTierMediaTypeDisk() {
        return (int)1L;
    }
    public static int FileStorageTierMediaTypeSsd() {
        return (int)2L;
    }
    public static int FileStorageTierMediaTypeScm() {
        return (int)4L;
    }
    public static int FileStorageTierMediaTypeMax() {
        return (int)5L;
    }
    public static OfAddress PFILE_STORAGE_TIER_MEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int FileStorageTierClassUnspecified() {
        return (int)0L;
    }
    public static int FileStorageTierClassCapacity() {
        return (int)1L;
    }
    public static int FileStorageTierClassPerformance() {
        return (int)2L;
    }
    public static int FileStorageTierClassMax() {
        return (int)3L;
    }
    public static OfAddress PFILE_STORAGE_TIER_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_STORAGE_TIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAM_INFORMATION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_REGION_INFO_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_STORAGE_TIER_REGION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_REGION_INFO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_DESIRED_STORAGE_CLASS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDUPLICATE_EXTENTS_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDUPLICATE_EXTENTS_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDUPLICATE_EXTENTS_DATA_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDUPLICATE_EXTENTS_DATA_EX32 = Constants$root.C_POINTER$LAYOUT;
    public static int SmrGcStateInactive() {
        return (int)0L;
    }
    public static int SmrGcStatePaused() {
        return (int)1L;
    }
    public static int SmrGcStateActive() {
        return (int)2L;
    }
    public static int SmrGcStateActiveFullSpeed() {
        return (int)3L;
    }
    public static OfAddress PREFS_SMR_VOLUME_GC_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREFS_SMR_VOLUME_INFO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int SmrGcActionStart() {
        return (int)1L;
    }
    public static int SmrGcActionStartFullSpeed() {
        return (int)2L;
    }
    public static int SmrGcActionPause() {
        return (int)3L;
    }
    public static int SmrGcActionStop() {
        return (int)4L;
    }
    public static OfAddress PREFS_SMR_VOLUME_GC_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static int SmrGcMethodCompaction() {
        return (int)1L;
    }
    public static int SmrGcMethodCompression() {
        return (int)2L;
    }
    public static int SmrGcMethodRotation() {
        return (int)3L;
    }
    public static OfAddress PREFS_SMR_VOLUME_GC_METHOD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREFS_SMR_VOLUME_GC_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAMS_QUERY_ID_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_BAD_RANGES_INPUT_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_BAD_RANGES_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_BAD_RANGES_OUTPUT_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_BAD_RANGES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static int VirtualStorageBehaviorUndefined() {
        return (int)0L;
    }
    public static int VirtualStorageBehaviorCacheWriteThrough() {
        return (int)1L;
    }
    public static int VirtualStorageBehaviorCacheWriteBack() {
        return (int)2L;
    }
    public static OfAddress PVIRTUAL_STORAGE_BEHAVIOR_CODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_KEY_CTRL_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOF_EXTERNAL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOF_EXTERNAL_FILE_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOF_VERSION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_EXTERNAL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_ADD_OVERLAY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_UPDATE_OVERLAY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_REMOVE_OVERLAY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_OVERLAY_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PROVIDER_EXTERNAL_INFO_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PROVIDER_EXTERNAL_INFO_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PROVIDER_EXTERNAL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTAINER_VOLUME_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTAINER_ROOT_INFO_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTAINER_ROOT_INFO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUALIZATION_INSTANCE_INFO_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUALIZATION_INSTANCE_INFO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_FILTER_FILE_IDENTIFIER_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_FILTER_FILE_IDENTIFIER_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_EXTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOLUME_DISK_EXTENTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIO_IRP_EXT_TRACK_OFFSET_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment GUID_DEVINTERFACE_SMARTCARD_READER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$645.GUID_DEVINTERFACE_SMARTCARD_READER$SEGMENT,"GUID_DEVINTERFACE_SMARTCARD_READER");
    }
    public static OfAddress PSCARD_IO_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_IO_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSCARD_IO_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_T0_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARD_T0_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_T0_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARD_T1_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_T1_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCVOID = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment g_rgSCardT0Pci$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$645.g_rgSCardT0Pci$SEGMENT,"g_rgSCardT0Pci");
    }
    public static MemorySegment g_rgSCardT1Pci$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$645.g_rgSCardT1Pci$SEGMENT,"g_rgSCardT1Pci");
    }
    public static MemorySegment g_rgSCardRawPci$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$646.g_rgSCardRawPci$SEGMENT,"g_rgSCardRawPci");
    }
    public static OfAddress PSCARDCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARDCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARDHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARDHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SCardEstablishContext$MH() {
        return RuntimeHelper.requireNonNull(constants$646.SCardEstablishContext$MH,"SCardEstablishContext");
    }
    public static int SCardEstablishContext ( int dwScope,  Addressable pvReserved1,  Addressable pvReserved2,  Addressable phContext) {
        var mh$ = SCardEstablishContext$MH();
        try {
            return (int)mh$.invokeExact(dwScope, pvReserved1, pvReserved2, phContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$646.SCardReleaseContext$MH,"SCardReleaseContext");
    }
    public static int SCardReleaseContext ( long hContext) {
        var mh$ = SCardReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIsValidContext$MH() {
        return RuntimeHelper.requireNonNull(constants$646.SCardIsValidContext$MH,"SCardIsValidContext");
    }
    public static int SCardIsValidContext ( long hContext) {
        var mh$ = SCardIsValidContext$MH();
        try {
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReaderGroupsA$MH() {
        return RuntimeHelper.requireNonNull(constants$646.SCardListReaderGroupsA$MH,"SCardListReaderGroupsA");
    }
    public static int SCardListReaderGroupsA ( long hContext,  Addressable mszGroups,  Addressable pcchGroups) {
        var mh$ = SCardListReaderGroupsA$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReaderGroupsW$MH() {
        return RuntimeHelper.requireNonNull(constants$646.SCardListReaderGroupsW$MH,"SCardListReaderGroupsW");
    }
    public static int SCardListReaderGroupsW ( long hContext,  Addressable mszGroups,  Addressable pcchGroups) {
        var mh$ = SCardListReaderGroupsW$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReadersA$MH() {
        return RuntimeHelper.requireNonNull(constants$647.SCardListReadersA$MH,"SCardListReadersA");
    }
    public static int SCardListReadersA ( long hContext,  Addressable mszGroups,  Addressable mszReaders,  Addressable pcchReaders) {
        var mh$ = SCardListReadersA$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReadersW$MH() {
        return RuntimeHelper.requireNonNull(constants$647.SCardListReadersW$MH,"SCardListReadersW");
    }
    public static int SCardListReadersW ( long hContext,  Addressable mszGroups,  Addressable mszReaders,  Addressable pcchReaders) {
        var mh$ = SCardListReadersW$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListCardsA$MH() {
        return RuntimeHelper.requireNonNull(constants$647.SCardListCardsA$MH,"SCardListCardsA");
    }
    public static int SCardListCardsA ( long hContext,  Addressable pbAtr,  Addressable rgquidInterfaces,  int cguidInterfaceCount,  Addressable mszCards,  Addressable pcchCards) {
        var mh$ = SCardListCardsA$MH();
        try {
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListCardsW$MH() {
        return RuntimeHelper.requireNonNull(constants$647.SCardListCardsW$MH,"SCardListCardsW");
    }
    public static int SCardListCardsW ( long hContext,  Addressable pbAtr,  Addressable rgquidInterfaces,  int cguidInterfaceCount,  Addressable mszCards,  Addressable pcchCards) {
        var mh$ = SCardListCardsW$MH();
        try {
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListInterfacesA$MH() {
        return RuntimeHelper.requireNonNull(constants$647.SCardListInterfacesA$MH,"SCardListInterfacesA");
    }
    public static int SCardListInterfacesA ( long hContext,  Addressable szCard,  Addressable pguidInterfaces,  Addressable pcguidInterfaces) {
        var mh$ = SCardListInterfacesA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListInterfacesW$MH() {
        return RuntimeHelper.requireNonNull(constants$647.SCardListInterfacesW$MH,"SCardListInterfacesW");
    }
    public static int SCardListInterfacesW ( long hContext,  Addressable szCard,  Addressable pguidInterfaces,  Addressable pcguidInterfaces) {
        var mh$ = SCardListInterfacesW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetProviderIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$648.SCardGetProviderIdA$MH,"SCardGetProviderIdA");
    }
    public static int SCardGetProviderIdA ( long hContext,  Addressable szCard,  Addressable pguidProviderId) {
        var mh$ = SCardGetProviderIdA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetProviderIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$648.SCardGetProviderIdW$MH,"SCardGetProviderIdW");
    }
    public static int SCardGetProviderIdW ( long hContext,  Addressable szCard,  Addressable pguidProviderId) {
        var mh$ = SCardGetProviderIdW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetCardTypeProviderNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$648.SCardGetCardTypeProviderNameA$MH,"SCardGetCardTypeProviderNameA");
    }
    public static int SCardGetCardTypeProviderNameA ( long hContext,  Addressable szCardName,  int dwProviderId,  Addressable szProvider,  Addressable pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetCardTypeProviderNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$648.SCardGetCardTypeProviderNameW$MH,"SCardGetCardTypeProviderNameW");
    }
    public static int SCardGetCardTypeProviderNameW ( long hContext,  Addressable szCardName,  int dwProviderId,  Addressable szProvider,  Addressable pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceReaderGroupA$MH() {
        return RuntimeHelper.requireNonNull(constants$648.SCardIntroduceReaderGroupA$MH,"SCardIntroduceReaderGroupA");
    }
    public static int SCardIntroduceReaderGroupA ( long hContext,  Addressable szGroupName) {
        var mh$ = SCardIntroduceReaderGroupA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceReaderGroupW$MH() {
        return RuntimeHelper.requireNonNull(constants$648.SCardIntroduceReaderGroupW$MH,"SCardIntroduceReaderGroupW");
    }
    public static int SCardIntroduceReaderGroupW ( long hContext,  Addressable szGroupName) {
        var mh$ = SCardIntroduceReaderGroupW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetReaderGroupA$MH() {
        return RuntimeHelper.requireNonNull(constants$649.SCardForgetReaderGroupA$MH,"SCardForgetReaderGroupA");
    }
    public static int SCardForgetReaderGroupA ( long hContext,  Addressable szGroupName) {
        var mh$ = SCardForgetReaderGroupA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetReaderGroupW$MH() {
        return RuntimeHelper.requireNonNull(constants$649.SCardForgetReaderGroupW$MH,"SCardForgetReaderGroupW");
    }
    public static int SCardForgetReaderGroupW ( long hContext,  Addressable szGroupName) {
        var mh$ = SCardForgetReaderGroupW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceReaderA$MH() {
        return RuntimeHelper.requireNonNull(constants$649.SCardIntroduceReaderA$MH,"SCardIntroduceReaderA");
    }
    public static int SCardIntroduceReaderA ( long hContext,  Addressable szReaderName,  Addressable szDeviceName) {
        var mh$ = SCardIntroduceReaderA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceReaderW$MH() {
        return RuntimeHelper.requireNonNull(constants$649.SCardIntroduceReaderW$MH,"SCardIntroduceReaderW");
    }
    public static int SCardIntroduceReaderW ( long hContext,  Addressable szReaderName,  Addressable szDeviceName) {
        var mh$ = SCardIntroduceReaderW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetReaderA$MH() {
        return RuntimeHelper.requireNonNull(constants$649.SCardForgetReaderA$MH,"SCardForgetReaderA");
    }
    public static int SCardForgetReaderA ( long hContext,  Addressable szReaderName) {
        var mh$ = SCardForgetReaderA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetReaderW$MH() {
        return RuntimeHelper.requireNonNull(constants$649.SCardForgetReaderW$MH,"SCardForgetReaderW");
    }
    public static int SCardForgetReaderW ( long hContext,  Addressable szReaderName) {
        var mh$ = SCardForgetReaderW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardAddReaderToGroupA$MH() {
        return RuntimeHelper.requireNonNull(constants$650.SCardAddReaderToGroupA$MH,"SCardAddReaderToGroupA");
    }
    public static int SCardAddReaderToGroupA ( long hContext,  Addressable szReaderName,  Addressable szGroupName) {
        var mh$ = SCardAddReaderToGroupA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardAddReaderToGroupW$MH() {
        return RuntimeHelper.requireNonNull(constants$650.SCardAddReaderToGroupW$MH,"SCardAddReaderToGroupW");
    }
    public static int SCardAddReaderToGroupW ( long hContext,  Addressable szReaderName,  Addressable szGroupName) {
        var mh$ = SCardAddReaderToGroupW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardRemoveReaderFromGroupA$MH() {
        return RuntimeHelper.requireNonNull(constants$650.SCardRemoveReaderFromGroupA$MH,"SCardRemoveReaderFromGroupA");
    }
    public static int SCardRemoveReaderFromGroupA ( long hContext,  Addressable szReaderName,  Addressable szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardRemoveReaderFromGroupW$MH() {
        return RuntimeHelper.requireNonNull(constants$650.SCardRemoveReaderFromGroupW$MH,"SCardRemoveReaderFromGroupW");
    }
    public static int SCardRemoveReaderFromGroupW ( long hContext,  Addressable szReaderName,  Addressable szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceCardTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$650.SCardIntroduceCardTypeA$MH,"SCardIntroduceCardTypeA");
    }
    public static int SCardIntroduceCardTypeA ( long hContext,  Addressable szCardName,  Addressable pguidPrimaryProvider,  Addressable rgguidInterfaces,  int dwInterfaceCount,  Addressable pbAtr,  Addressable pbAtrMask,  int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceCardTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$650.SCardIntroduceCardTypeW$MH,"SCardIntroduceCardTypeW");
    }
    public static int SCardIntroduceCardTypeW ( long hContext,  Addressable szCardName,  Addressable pguidPrimaryProvider,  Addressable rgguidInterfaces,  int dwInterfaceCount,  Addressable pbAtr,  Addressable pbAtrMask,  int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardSetCardTypeProviderNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$651.SCardSetCardTypeProviderNameA$MH,"SCardSetCardTypeProviderNameA");
    }
    public static int SCardSetCardTypeProviderNameA ( long hContext,  Addressable szCardName,  int dwProviderId,  Addressable szProvider) {
        var mh$ = SCardSetCardTypeProviderNameA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardSetCardTypeProviderNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$651.SCardSetCardTypeProviderNameW$MH,"SCardSetCardTypeProviderNameW");
    }
    public static int SCardSetCardTypeProviderNameW ( long hContext,  Addressable szCardName,  int dwProviderId,  Addressable szProvider) {
        var mh$ = SCardSetCardTypeProviderNameW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetCardTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$651.SCardForgetCardTypeA$MH,"SCardForgetCardTypeA");
    }
    public static int SCardForgetCardTypeA ( long hContext,  Addressable szCardName) {
        var mh$ = SCardForgetCardTypeA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetCardTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$651.SCardForgetCardTypeW$MH,"SCardForgetCardTypeW");
    }
    public static int SCardForgetCardTypeW ( long hContext,  Addressable szCardName) {
        var mh$ = SCardForgetCardTypeW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardFreeMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$651.SCardFreeMemory$MH,"SCardFreeMemory");
    }
    public static int SCardFreeMemory ( long hContext,  Addressable pvMem) {
        var mh$ = SCardFreeMemory$MH();
        try {
            return (int)mh$.invokeExact(hContext, pvMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardAccessStartedEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$651.SCardAccessStartedEvent$MH,"SCardAccessStartedEvent");
    }
    public static MemoryAddress SCardAccessStartedEvent () {
        var mh$ = SCardAccessStartedEvent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReleaseStartedEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$652.SCardReleaseStartedEvent$MH,"SCardReleaseStartedEvent");
    }
    public static void SCardReleaseStartedEvent () {
        var mh$ = SCardReleaseStartedEvent$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSCARD_READERSTATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_READERSTATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARD_READERSTATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_READERSTATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARD_READERSTATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_READERSTATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SCardLocateCardsA$MH() {
        return RuntimeHelper.requireNonNull(constants$652.SCardLocateCardsA$MH,"SCardLocateCardsA");
    }
    public static int SCardLocateCardsA ( long hContext,  Addressable mszCards,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardLocateCardsA$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardLocateCardsW$MH() {
        return RuntimeHelper.requireNonNull(constants$652.SCardLocateCardsW$MH,"SCardLocateCardsW");
    }
    public static int SCardLocateCardsW ( long hContext,  Addressable mszCards,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardLocateCardsW$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSCARD_ATRMASK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_ATRMASK = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SCardLocateCardsByATRA$MH() {
        return RuntimeHelper.requireNonNull(constants$652.SCardLocateCardsByATRA$MH,"SCardLocateCardsByATRA");
    }
    public static int SCardLocateCardsByATRA ( long hContext,  Addressable rgAtrMasks,  int cAtrs,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardLocateCardsByATRA$MH();
        try {
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardLocateCardsByATRW$MH() {
        return RuntimeHelper.requireNonNull(constants$652.SCardLocateCardsByATRW$MH,"SCardLocateCardsByATRW");
    }
    public static int SCardLocateCardsByATRW ( long hContext,  Addressable rgAtrMasks,  int cAtrs,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardLocateCardsByATRW$MH();
        try {
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetStatusChangeA$MH() {
        return RuntimeHelper.requireNonNull(constants$652.SCardGetStatusChangeA$MH,"SCardGetStatusChangeA");
    }
    public static int SCardGetStatusChangeA ( long hContext,  int dwTimeout,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardGetStatusChangeA$MH();
        try {
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetStatusChangeW$MH() {
        return RuntimeHelper.requireNonNull(constants$653.SCardGetStatusChangeW$MH,"SCardGetStatusChangeW");
    }
    public static int SCardGetStatusChangeW ( long hContext,  int dwTimeout,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardGetStatusChangeW$MH();
        try {
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardCancel$MH() {
        return RuntimeHelper.requireNonNull(constants$653.SCardCancel$MH,"SCardCancel");
    }
    public static int SCardCancel ( long hContext) {
        var mh$ = SCardCancel$MH();
        try {
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardConnectA$MH() {
        return RuntimeHelper.requireNonNull(constants$653.SCardConnectA$MH,"SCardConnectA");
    }
    public static int SCardConnectA ( long hContext,  Addressable szReader,  int dwShareMode,  int dwPreferredProtocols,  Addressable phCard,  Addressable pdwActiveProtocol) {
        var mh$ = SCardConnectA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardConnectW$MH() {
        return RuntimeHelper.requireNonNull(constants$653.SCardConnectW$MH,"SCardConnectW");
    }
    public static int SCardConnectW ( long hContext,  Addressable szReader,  int dwShareMode,  int dwPreferredProtocols,  Addressable phCard,  Addressable pdwActiveProtocol) {
        var mh$ = SCardConnectW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$653.SCardReconnect$MH,"SCardReconnect");
    }
    public static int SCardReconnect ( long hCard,  int dwShareMode,  int dwPreferredProtocols,  int dwInitialization,  Addressable pdwActiveProtocol) {
        var mh$ = SCardReconnect$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$653.SCardDisconnect$MH,"SCardDisconnect");
    }
    public static int SCardDisconnect ( long hCard,  int dwDisposition) {
        var mh$ = SCardDisconnect$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardBeginTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$654.SCardBeginTransaction$MH,"SCardBeginTransaction");
    }
    public static int SCardBeginTransaction ( long hCard) {
        var mh$ = SCardBeginTransaction$MH();
        try {
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardEndTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$654.SCardEndTransaction$MH,"SCardEndTransaction");
    }
    public static int SCardEndTransaction ( long hCard,  int dwDisposition) {
        var mh$ = SCardEndTransaction$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardCancelTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$654.SCardCancelTransaction$MH,"SCardCancelTransaction");
    }
    public static int SCardCancelTransaction ( long hCard) {
        var mh$ = SCardCancelTransaction$MH();
        try {
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardState$MH() {
        return RuntimeHelper.requireNonNull(constants$654.SCardState$MH,"SCardState");
    }
    public static int SCardState ( long hCard,  Addressable pdwState,  Addressable pdwProtocol,  Addressable pbAtr,  Addressable pcbAtrLen) {
        var mh$ = SCardState$MH();
        try {
            return (int)mh$.invokeExact(hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$654.SCardStatusA$MH,"SCardStatusA");
    }
    public static int SCardStatusA ( long hCard,  Addressable mszReaderNames,  Addressable pcchReaderLen,  Addressable pdwState,  Addressable pdwProtocol,  Addressable pbAtr,  Addressable pcbAtrLen) {
        var mh$ = SCardStatusA$MH();
        try {
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$654.SCardStatusW$MH,"SCardStatusW");
    }
    public static int SCardStatusW ( long hCard,  Addressable mszReaderNames,  Addressable pcchReaderLen,  Addressable pdwState,  Addressable pdwProtocol,  Addressable pbAtr,  Addressable pcbAtrLen) {
        var mh$ = SCardStatusW$MH();
        try {
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardTransmit$MH() {
        return RuntimeHelper.requireNonNull(constants$655.SCardTransmit$MH,"SCardTransmit");
    }
    public static int SCardTransmit ( long hCard,  Addressable pioSendPci,  Addressable pbSendBuffer,  int cbSendLength,  Addressable pioRecvPci,  Addressable pbRecvBuffer,  Addressable pcbRecvLength) {
        var mh$ = SCardTransmit$MH();
        try {
            return (int)mh$.invokeExact(hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetTransmitCount$MH() {
        return RuntimeHelper.requireNonNull(constants$655.SCardGetTransmitCount$MH,"SCardGetTransmitCount");
    }
    public static int SCardGetTransmitCount ( long hCard,  Addressable pcTransmitCount) {
        var mh$ = SCardGetTransmitCount$MH();
        try {
            return (int)mh$.invokeExact(hCard, pcTransmitCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardControl$MH() {
        return RuntimeHelper.requireNonNull(constants$655.SCardControl$MH,"SCardControl");
    }
    public static int SCardControl ( long hCard,  int dwControlCode,  Addressable lpInBuffer,  int cbInBufferSize,  Addressable lpOutBuffer,  int cbOutBufferSize,  Addressable lpBytesReturned) {
        var mh$ = SCardControl$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$655.SCardGetAttrib$MH,"SCardGetAttrib");
    }
    public static int SCardGetAttrib ( long hCard,  int dwAttrId,  Addressable pbAttr,  Addressable pcbAttrLen) {
        var mh$ = SCardGetAttrib$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, pcbAttrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardSetAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$655.SCardSetAttrib$MH,"SCardSetAttrib");
    }
    public static int SCardSetAttrib ( long hCard,  int dwAttrId,  Addressable pbAttr,  int cbAttrLen) {
        var mh$ = SCardSetAttrib$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, cbAttrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress POPENCARD_SEARCH_CRITERIAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARD_SEARCH_CRITERIAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARD_SEARCH_CRITERIAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARD_SEARCH_CRITERIAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARD_SEARCH_CRITERIA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARD_SEARCH_CRITERIA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAME_EXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAME_EXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAME_EXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAME_EXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAME_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAME_EX = Constants$root.C_POINTER$LAYOUT;
    public static int RSR_MATCH_TYPE_READER_AND_CONTAINER() {
        return (int)1L;
    }
    public static int RSR_MATCH_TYPE_SERIAL_NUMBER() {
        return (int)2L;
    }
    public static int RSR_MATCH_TYPE_ALL_CARDS() {
        return (int)3L;
    }
    public static OfAddress PREADER_SEL_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREADER_SEL_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SCardUIDlgSelectCardA$MH() {
        return RuntimeHelper.requireNonNull(constants$657.SCardUIDlgSelectCardA$MH,"SCardUIDlgSelectCardA");
    }
    public static int SCardUIDlgSelectCardA ( Addressable x0) {
        var mh$ = SCardUIDlgSelectCardA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardUIDlgSelectCardW$MH() {
        return RuntimeHelper.requireNonNull(constants$657.SCardUIDlgSelectCardW$MH,"SCardUIDlgSelectCardW");
    }
    public static int SCardUIDlgSelectCardW ( Addressable x0) {
        var mh$ = SCardUIDlgSelectCardW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress POPENCARDNAMEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAMEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAMEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAMEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAME = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetOpenCardNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$657.GetOpenCardNameA$MH,"GetOpenCardNameA");
    }
    public static int GetOpenCardNameA ( Addressable x0) {
        var mh$ = GetOpenCardNameA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOpenCardNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$657.GetOpenCardNameW$MH,"GetOpenCardNameW");
    }
    public static int GetOpenCardNameW ( Addressable x0) {
        var mh$ = GetOpenCardNameW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardDlgExtendedError$MH() {
        return RuntimeHelper.requireNonNull(constants$657.SCardDlgExtendedError$MH,"SCardDlgExtendedError");
    }
    public static int SCardDlgExtendedError () {
        var mh$ = SCardDlgExtendedError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReadCacheA$MH() {
        return RuntimeHelper.requireNonNull(constants$658.SCardReadCacheA$MH,"SCardReadCacheA");
    }
    public static int SCardReadCacheA ( long hContext,  Addressable CardIdentifier,  int FreshnessCounter,  Addressable LookupName,  Addressable Data,  Addressable DataLen) {
        var mh$ = SCardReadCacheA$MH();
        try {
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReadCacheW$MH() {
        return RuntimeHelper.requireNonNull(constants$658.SCardReadCacheW$MH,"SCardReadCacheW");
    }
    public static int SCardReadCacheW ( long hContext,  Addressable CardIdentifier,  int FreshnessCounter,  Addressable LookupName,  Addressable Data,  Addressable DataLen) {
        var mh$ = SCardReadCacheW$MH();
        try {
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardWriteCacheA$MH() {
        return RuntimeHelper.requireNonNull(constants$658.SCardWriteCacheA$MH,"SCardWriteCacheA");
    }
    public static int SCardWriteCacheA ( long hContext,  Addressable CardIdentifier,  int FreshnessCounter,  Addressable LookupName,  Addressable Data,  int DataLen) {
        var mh$ = SCardWriteCacheA$MH();
        try {
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardWriteCacheW$MH() {
        return RuntimeHelper.requireNonNull(constants$658.SCardWriteCacheW$MH,"SCardWriteCacheW");
    }
    public static int SCardWriteCacheW ( long hContext,  Addressable CardIdentifier,  int FreshnessCounter,  Addressable LookupName,  Addressable Data,  int DataLen) {
        var mh$ = SCardWriteCacheW$MH();
        try {
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetReaderIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$658.SCardGetReaderIconA$MH,"SCardGetReaderIconA");
    }
    public static int SCardGetReaderIconA ( long hContext,  Addressable szReaderName,  Addressable pbIcon,  Addressable pcbIcon) {
        var mh$ = SCardGetReaderIconA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetReaderIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$658.SCardGetReaderIconW$MH,"SCardGetReaderIconW");
    }
    public static int SCardGetReaderIconW ( long hContext,  Addressable szReaderName,  Addressable pbIcon,  Addressable pcbIcon) {
        var mh$ = SCardGetReaderIconW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetDeviceTypeIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$659.SCardGetDeviceTypeIdA$MH,"SCardGetDeviceTypeIdA");
    }
    public static int SCardGetDeviceTypeIdA ( long hContext,  Addressable szReaderName,  Addressable pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetDeviceTypeIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$659.SCardGetDeviceTypeIdW$MH,"SCardGetDeviceTypeIdW");
    }
    public static int SCardGetDeviceTypeIdW ( long hContext,  Addressable szReaderName,  Addressable pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetReaderDeviceInstanceIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$659.SCardGetReaderDeviceInstanceIdA$MH,"SCardGetReaderDeviceInstanceIdA");
    }
    public static int SCardGetReaderDeviceInstanceIdA ( long hContext,  Addressable szReaderName,  Addressable szDeviceInstanceId,  Addressable pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetReaderDeviceInstanceIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$659.SCardGetReaderDeviceInstanceIdW$MH,"SCardGetReaderDeviceInstanceIdW");
    }
    public static int SCardGetReaderDeviceInstanceIdW ( long hContext,  Addressable szReaderName,  Addressable szDeviceInstanceId,  Addressable pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReadersWithDeviceInstanceIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$659.SCardListReadersWithDeviceInstanceIdA$MH,"SCardListReadersWithDeviceInstanceIdA");
    }
    public static int SCardListReadersWithDeviceInstanceIdA ( long hContext,  Addressable szDeviceInstanceId,  Addressable mszReaders,  Addressable pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReadersWithDeviceInstanceIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$659.SCardListReadersWithDeviceInstanceIdW$MH,"SCardListReadersWithDeviceInstanceIdW");
    }
    public static int SCardListReadersWithDeviceInstanceIdW ( long hContext,  Addressable szDeviceInstanceId,  Addressable mszReaders,  Addressable pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardAudit$MH() {
        return RuntimeHelper.requireNonNull(constants$660.SCardAudit$MH,"SCardAudit");
    }
    public static int SCardAudit ( long hContext,  int dwEvent) {
        var mh$ = SCardAudit$MH();
        try {
            return (int)mh$.invokeExact(hContext, dwEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPRINTER_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_5A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_5A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_5W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_5W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_5 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_5 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_6 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_6 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_7A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_7A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_7W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_7W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_7 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_7 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_8A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_8A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_8W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_8W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_8 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_8 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_9A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_9A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_9W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_9W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_9 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_9 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_INFO_4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOB_INFO_4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDJOB_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDJOB_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDJOB_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDJOB_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDJOB_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDJOB_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_3A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_3A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_3W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_3W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_5A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_5A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_5W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_5W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_5 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_5 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_6A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_6A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_6W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_6W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_6 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_6 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_8A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_8A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_8W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_8W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVER_INFO_8 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVER_INFO_8 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORM_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFORM_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORM_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFORM_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORM_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFORM_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORM_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFORM_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORM_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFORM_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORM_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFORM_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_3A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_3A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_3W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_3W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDOC_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOC_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTPROCESSOR_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTPROCESSOR_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTPROCESSOR_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTPROCESSOR_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTPROCESSOR_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTPROCESSOR_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTPROCESSOR_CAPS_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTPROCESSOR_CAPS_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_3A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_3A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_3W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_3W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPORT_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPORT_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONITOR_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITOR_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONITOR_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITOR_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONITOR_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITOR_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONITOR_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITOR_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONITOR_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITOR_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONITOR_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITOR_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDATATYPES_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDATATYPES_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDATATYPES_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDATATYPES_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDATATYPES_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDATATYPES_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_DEFAULTSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_DEFAULTSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_DEFAULTSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_DEFAULTSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_DEFAULTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_DEFAULTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_ENUM_VALUESA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_ENUM_VALUESA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_ENUM_VALUESW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_ENUM_VALUESW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_ENUM_VALUES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_ENUM_VALUES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle EnumPrintersA$MH() {
        return RuntimeHelper.requireNonNull(constants$660.EnumPrintersA$MH,"EnumPrintersA");
    }
    public static int EnumPrintersA ( int Flags,  Addressable Name,  int Level,  Addressable pPrinterEnum,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumPrintersA$MH();
        try {
            return (int)mh$.invokeExact(Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrintersW$MH() {
        return RuntimeHelper.requireNonNull(constants$660.EnumPrintersW$MH,"EnumPrintersW");
    }
    public static int EnumPrintersW ( int Flags,  Addressable Name,  int Level,  Addressable pPrinterEnum,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumPrintersW$MH();
        try {
            return (int)mh$.invokeExact(Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSpoolFileHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$660.GetSpoolFileHandle$MH,"GetSpoolFileHandle");
    }
    public static MemoryAddress GetSpoolFileHandle ( Addressable hPrinter) {
        var mh$ = GetSpoolFileHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CommitSpoolData$MH() {
        return RuntimeHelper.requireNonNull(constants$660.CommitSpoolData$MH,"CommitSpoolData");
    }
    public static MemoryAddress CommitSpoolData ( Addressable hPrinter,  Addressable hSpoolFile,  int cbCommit) {
        var mh$ = CommitSpoolData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hPrinter, hSpoolFile, cbCommit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseSpoolFileHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$660.CloseSpoolFileHandle$MH,"CloseSpoolFileHandle");
    }
    public static int CloseSpoolFileHandle ( Addressable hPrinter,  Addressable hSpoolFile) {
        var mh$ = CloseSpoolFileHandle$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, hSpoolFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenPrinterA$MH() {
        return RuntimeHelper.requireNonNull(constants$661.OpenPrinterA$MH,"OpenPrinterA");
    }
    public static int OpenPrinterA ( Addressable pPrinterName,  Addressable phPrinter,  Addressable pDefault) {
        var mh$ = OpenPrinterA$MH();
        try {
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenPrinterW$MH() {
        return RuntimeHelper.requireNonNull(constants$661.OpenPrinterW$MH,"OpenPrinterW");
    }
    public static int OpenPrinterW ( Addressable pPrinterName,  Addressable phPrinter,  Addressable pDefault) {
        var mh$ = OpenPrinterW$MH();
        try {
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetPrinterA$MH() {
        return RuntimeHelper.requireNonNull(constants$661.ResetPrinterA$MH,"ResetPrinterA");
    }
    public static int ResetPrinterA ( Addressable hPrinter,  Addressable pDefault) {
        var mh$ = ResetPrinterA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pDefault);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetPrinterW$MH() {
        return RuntimeHelper.requireNonNull(constants$661.ResetPrinterW$MH,"ResetPrinterW");
    }
    public static int ResetPrinterW ( Addressable hPrinter,  Addressable pDefault) {
        var mh$ = ResetPrinterW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pDefault);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetJobA$MH() {
        return RuntimeHelper.requireNonNull(constants$661.SetJobA$MH,"SetJobA");
    }
    public static int SetJobA ( Addressable hPrinter,  int JobId,  int Level,  Addressable pJob,  int Command) {
        var mh$ = SetJobA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetJobW$MH() {
        return RuntimeHelper.requireNonNull(constants$661.SetJobW$MH,"SetJobW");
    }
    public static int SetJobW ( Addressable hPrinter,  int JobId,  int Level,  Addressable pJob,  int Command) {
        var mh$ = SetJobW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetJobA$MH() {
        return RuntimeHelper.requireNonNull(constants$662.GetJobA$MH,"GetJobA");
    }
    public static int GetJobA ( Addressable hPrinter,  int JobId,  int Level,  Addressable pJob,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetJobA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetJobW$MH() {
        return RuntimeHelper.requireNonNull(constants$662.GetJobW$MH,"GetJobW");
    }
    public static int GetJobW ( Addressable hPrinter,  int JobId,  int Level,  Addressable pJob,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetJobW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumJobsA$MH() {
        return RuntimeHelper.requireNonNull(constants$662.EnumJobsA$MH,"EnumJobsA");
    }
    public static int EnumJobsA ( Addressable hPrinter,  int FirstJob,  int NoJobs,  int Level,  Addressable pJob,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumJobsA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumJobsW$MH() {
        return RuntimeHelper.requireNonNull(constants$662.EnumJobsW$MH,"EnumJobsW");
    }
    public static int EnumJobsW ( Addressable hPrinter,  int FirstJob,  int NoJobs,  int Level,  Addressable pJob,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumJobsW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddPrinterA$MH() {
        return RuntimeHelper.requireNonNull(constants$662.AddPrinterA$MH,"AddPrinterA");
    }
    public static MemoryAddress AddPrinterA ( Addressable pName,  int Level,  Addressable pPrinter) {
        var mh$ = AddPrinterA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pName, Level, pPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddPrinterW$MH() {
        return RuntimeHelper.requireNonNull(constants$662.AddPrinterW$MH,"AddPrinterW");
    }
    public static MemoryAddress AddPrinterW ( Addressable pName,  int Level,  Addressable pPrinter) {
        var mh$ = AddPrinterW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pName, Level, pPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$663.DeletePrinter$MH,"DeletePrinter");
    }
    public static int DeletePrinter ( Addressable hPrinter) {
        var mh$ = DeletePrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPrinterA$MH() {
        return RuntimeHelper.requireNonNull(constants$663.SetPrinterA$MH,"SetPrinterA");
    }
    public static int SetPrinterA ( Addressable hPrinter,  int Level,  Addressable pPrinter,  int Command) {
        var mh$ = SetPrinterA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPrinterW$MH() {
        return RuntimeHelper.requireNonNull(constants$663.SetPrinterW$MH,"SetPrinterW");
    }
    public static int SetPrinterW ( Addressable hPrinter,  int Level,  Addressable pPrinter,  int Command) {
        var mh$ = SetPrinterW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterA$MH() {
        return RuntimeHelper.requireNonNull(constants$663.GetPrinterA$MH,"GetPrinterA");
    }
    public static int GetPrinterA ( Addressable hPrinter,  int Level,  Addressable pPrinter,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetPrinterA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterW$MH() {
        return RuntimeHelper.requireNonNull(constants$663.GetPrinterW$MH,"GetPrinterW");
    }
    public static int GetPrinterW ( Addressable hPrinter,  int Level,  Addressable pPrinter,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetPrinterW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddPrinterDriverA$MH() {
        return RuntimeHelper.requireNonNull(constants$663.AddPrinterDriverA$MH,"AddPrinterDriverA");
    }
    public static int AddPrinterDriverA ( Addressable pName,  int Level,  Addressable pDriverInfo) {
        var mh$ = AddPrinterDriverA$MH();
        try {
            return (int)mh$.invokeExact(pName, Level, pDriverInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddPrinterDriverW$MH() {
        return RuntimeHelper.requireNonNull(constants$664.AddPrinterDriverW$MH,"AddPrinterDriverW");
    }
    public static int AddPrinterDriverW ( Addressable pName,  int Level,  Addressable pDriverInfo) {
        var mh$ = AddPrinterDriverW$MH();
        try {
            return (int)mh$.invokeExact(pName, Level, pDriverInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddPrinterDriverExA$MH() {
        return RuntimeHelper.requireNonNull(constants$664.AddPrinterDriverExA$MH,"AddPrinterDriverExA");
    }
    public static int AddPrinterDriverExA ( Addressable pName,  int Level,  Addressable lpbDriverInfo,  int dwFileCopyFlags) {
        var mh$ = AddPrinterDriverExA$MH();
        try {
            return (int)mh$.invokeExact(pName, Level, lpbDriverInfo, dwFileCopyFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddPrinterDriverExW$MH() {
        return RuntimeHelper.requireNonNull(constants$664.AddPrinterDriverExW$MH,"AddPrinterDriverExW");
    }
    public static int AddPrinterDriverExW ( Addressable pName,  int Level,  Addressable lpbDriverInfo,  int dwFileCopyFlags) {
        var mh$ = AddPrinterDriverExW$MH();
        try {
            return (int)mh$.invokeExact(pName, Level, lpbDriverInfo, dwFileCopyFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrinterDriversA$MH() {
        return RuntimeHelper.requireNonNull(constants$664.EnumPrinterDriversA$MH,"EnumPrinterDriversA");
    }
    public static int EnumPrinterDriversA ( Addressable pName,  Addressable pEnvironment,  int Level,  Addressable pDriverInfo,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumPrinterDriversA$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrinterDriversW$MH() {
        return RuntimeHelper.requireNonNull(constants$664.EnumPrinterDriversW$MH,"EnumPrinterDriversW");
    }
    public static int EnumPrinterDriversW ( Addressable pName,  Addressable pEnvironment,  int Level,  Addressable pDriverInfo,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumPrinterDriversW$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterDriverA$MH() {
        return RuntimeHelper.requireNonNull(constants$664.GetPrinterDriverA$MH,"GetPrinterDriverA");
    }
    public static int GetPrinterDriverA ( Addressable hPrinter,  Addressable pEnvironment,  int Level,  Addressable pDriverInfo,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetPrinterDriverA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterDriverW$MH() {
        return RuntimeHelper.requireNonNull(constants$665.GetPrinterDriverW$MH,"GetPrinterDriverW");
    }
    public static int GetPrinterDriverW ( Addressable hPrinter,  Addressable pEnvironment,  int Level,  Addressable pDriverInfo,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetPrinterDriverW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterDriverDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$665.GetPrinterDriverDirectoryA$MH,"GetPrinterDriverDirectoryA");
    }
    public static int GetPrinterDriverDirectoryA ( Addressable pName,  Addressable pEnvironment,  int Level,  Addressable pDriverDirectory,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetPrinterDriverDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterDriverDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$665.GetPrinterDriverDirectoryW$MH,"GetPrinterDriverDirectoryW");
    }
    public static int GetPrinterDriverDirectoryW ( Addressable pName,  Addressable pEnvironment,  int Level,  Addressable pDriverDirectory,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetPrinterDriverDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterDriverA$MH() {
        return RuntimeHelper.requireNonNull(constants$665.DeletePrinterDriverA$MH,"DeletePrinterDriverA");
    }
    public static int DeletePrinterDriverA ( Addressable pName,  Addressable pEnvironment,  Addressable pDriverName) {
        var mh$ = DeletePrinterDriverA$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterDriverW$MH() {
        return RuntimeHelper.requireNonNull(constants$665.DeletePrinterDriverW$MH,"DeletePrinterDriverW");
    }
    public static int DeletePrinterDriverW ( Addressable pName,  Addressable pEnvironment,  Addressable pDriverName) {
        var mh$ = DeletePrinterDriverW$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterDriverExA$MH() {
        return RuntimeHelper.requireNonNull(constants$665.DeletePrinterDriverExA$MH,"DeletePrinterDriverExA");
    }
    public static int DeletePrinterDriverExA ( Addressable pName,  Addressable pEnvironment,  Addressable pDriverName,  int dwDeleteFlag,  int dwVersionFlag) {
        var mh$ = DeletePrinterDriverExA$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterDriverExW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.DeletePrinterDriverExW$MH,"DeletePrinterDriverExW");
    }
    public static int DeletePrinterDriverExW ( Addressable pName,  Addressable pEnvironment,  Addressable pDriverName,  int dwDeleteFlag,  int dwVersionFlag) {
        var mh$ = DeletePrinterDriverExW$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddPrintProcessorA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.AddPrintProcessorA$MH,"AddPrintProcessorA");
    }
    public static int AddPrintProcessorA ( Addressable pName,  Addressable pEnvironment,  Addressable pPathName,  Addressable pPrintProcessorName) {
        var mh$ = AddPrintProcessorA$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, pPathName, pPrintProcessorName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddPrintProcessorW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.AddPrintProcessorW$MH,"AddPrintProcessorW");
    }
    public static int AddPrintProcessorW ( Addressable pName,  Addressable pEnvironment,  Addressable pPathName,  Addressable pPrintProcessorName) {
        var mh$ = AddPrintProcessorW$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, pPathName, pPrintProcessorName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrintProcessorsA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.EnumPrintProcessorsA$MH,"EnumPrintProcessorsA");
    }
    public static int EnumPrintProcessorsA ( Addressable pName,  Addressable pEnvironment,  int Level,  Addressable pPrintProcessorInfo,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumPrintProcessorsA$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrintProcessorsW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.EnumPrintProcessorsW$MH,"EnumPrintProcessorsW");
    }
    public static int EnumPrintProcessorsW ( Addressable pName,  Addressable pEnvironment,  int Level,  Addressable pPrintProcessorInfo,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumPrintProcessorsW$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrintProcessorDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.GetPrintProcessorDirectoryA$MH,"GetPrintProcessorDirectoryA");
    }
    public static int GetPrintProcessorDirectoryA ( Addressable pName,  Addressable pEnvironment,  int Level,  Addressable pPrintProcessorInfo,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetPrintProcessorDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrintProcessorDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.GetPrintProcessorDirectoryW$MH,"GetPrintProcessorDirectoryW");
    }
    public static int GetPrintProcessorDirectoryW ( Addressable pName,  Addressable pEnvironment,  int Level,  Addressable pPrintProcessorInfo,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetPrintProcessorDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrintProcessorDatatypesA$MH() {
        return RuntimeHelper.requireNonNull(constants$667.EnumPrintProcessorDatatypesA$MH,"EnumPrintProcessorDatatypesA");
    }
    public static int EnumPrintProcessorDatatypesA ( Addressable pName,  Addressable pPrintProcessorName,  int Level,  Addressable pDatatypes,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumPrintProcessorDatatypesA$MH();
        try {
            return (int)mh$.invokeExact(pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrintProcessorDatatypesW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.EnumPrintProcessorDatatypesW$MH,"EnumPrintProcessorDatatypesW");
    }
    public static int EnumPrintProcessorDatatypesW ( Addressable pName,  Addressable pPrintProcessorName,  int Level,  Addressable pDatatypes,  int cbBuf,  Addressable pcbNeeded,  Addressable pcReturned) {
        var mh$ = EnumPrintProcessorDatatypesW$MH();
        try {
            return (int)mh$.invokeExact(pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrintProcessorA$MH() {
        return RuntimeHelper.requireNonNull(constants$667.DeletePrintProcessorA$MH,"DeletePrintProcessorA");
    }
    public static int DeletePrintProcessorA ( Addressable pName,  Addressable pEnvironment,  Addressable pPrintProcessorName) {
        var mh$ = DeletePrintProcessorA$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProcessorName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrintProcessorW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.DeletePrintProcessorW$MH,"DeletePrintProcessorW");
    }
    public static int DeletePrintProcessorW ( Addressable pName,  Addressable pEnvironment,  Addressable pPrintProcessorName) {
        var mh$ = DeletePrintProcessorW$MH();
        try {
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProcessorName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartDocPrinterA$MH() {
        return RuntimeHelper.requireNonNull(constants$667.StartDocPrinterA$MH,"StartDocPrinterA");
    }
    public static int StartDocPrinterA ( Addressable hPrinter,  int Level,  Addressable pDocInfo) {
        var mh$ = StartDocPrinterA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pDocInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartDocPrinterW$MH() {
        return RuntimeHelper.requireNonNull(constants$668.StartDocPrinterW$MH,"StartDocPrinterW");
    }
    public static int StartDocPrinterW ( Addressable hPrinter,  int Level,  Addressable pDocInfo) {
        var mh$ = StartDocPrinterW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pDocInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartPagePrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$668.StartPagePrinter$MH,"StartPagePrinter");
    }
    public static int StartPagePrinter ( Addressable hPrinter) {
        var mh$ = StartPagePrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$668.WritePrinter$MH,"WritePrinter");
    }
    public static int WritePrinter ( Addressable hPrinter,  Addressable pBuf,  int cbBuf,  Addressable pcWritten) {
        var mh$ = WritePrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pcWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushPrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$668.FlushPrinter$MH,"FlushPrinter");
    }
    public static int FlushPrinter ( Addressable hPrinter,  Addressable pBuf,  int cbBuf,  Addressable pcWritten,  int cSleep) {
        var mh$ = FlushPrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pcWritten, cSleep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPagePrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$668.EndPagePrinter$MH,"EndPagePrinter");
    }
    public static int EndPagePrinter ( Addressable hPrinter) {
        var mh$ = EndPagePrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortPrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$668.AbortPrinter$MH,"AbortPrinter");
    }
    public static int AbortPrinter ( Addressable hPrinter) {
        var mh$ = AbortPrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$669.ReadPrinter$MH,"ReadPrinter");
    }
    public static int ReadPrinter ( Addressable hPrinter,  Addressable pBuf,  int cbBuf,  Addressable pNoBytesRead) {
        var mh$ = ReadPrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pNoBytesRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDocPrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$669.EndDocPrinter$MH,"EndDocPrinter");
    }
    public static int EndDocPrinter ( Addressable hPrinter) {
        var mh$ = EndDocPrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddJobA$MH() {
        return RuntimeHelper.requireNonNull(constants$669.AddJobA$MH,"AddJobA");
    }
    public static int AddJobA ( Addressable hPrinter,  int Level,  Addressable pData,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = AddJobA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pData, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddJobW$MH() {
        return RuntimeHelper.requireNonNull(constants$669.AddJobW$MH,"AddJobW");
    }
    public static int AddJobW ( Addressable hPrinter,  int Level,  Addressable pData,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = AddJobW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pData, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScheduleJob$MH() {
        return RuntimeHelper.requireNonNull(constants$669.ScheduleJob$MH,"ScheduleJob");
    }
    public static int ScheduleJob ( Addressable hPrinter,  int JobId) {
        var mh$ = ScheduleJob$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, JobId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrinterProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$669.PrinterProperties$MH,"PrinterProperties");
    }
    public static int PrinterProperties ( Addressable hWnd,  Addressable hPrinter) {
        var mh$ = PrinterProperties$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DocumentPropertiesA$MH() {
        return RuntimeHelper.requireNonNull(constants$670.DocumentPropertiesA$MH,"DocumentPropertiesA");
    }
    public static int DocumentPropertiesA ( Addressable hWnd,  Addressable hPrinter,  Addressable pDeviceName,  Addressable pDevModeOutput,  Addressable pDevModeInput,  int fMode) {
        var mh$ = DocumentPropertiesA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DocumentPropertiesW$MH() {
        return RuntimeHelper.requireNonNull(constants$670.DocumentPropertiesW$MH,"DocumentPropertiesW");
    }
    public static int DocumentPropertiesW ( Addressable hWnd,  Addressable hPrinter,  Addressable pDeviceName,  Addressable pDevModeOutput,  Addressable pDevModeInput,  int fMode) {
        var mh$ = DocumentPropertiesW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdvancedDocumentPropertiesA$MH() {
        return RuntimeHelper.requireNonNull(constants$670.AdvancedDocumentPropertiesA$MH,"AdvancedDocumentPropertiesA");
    }
    public static int AdvancedDocumentPropertiesA ( Addressable hWnd,  Addressable hPrinter,  Addressable pDeviceName,  Addressable pDevModeOutput,  Addressable pDevModeInput) {
        var mh$ = AdvancedDocumentPropertiesA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdvancedDocumentPropertiesW$MH() {
        return RuntimeHelper.requireNonNull(constants$670.AdvancedDocumentPropertiesW$MH,"AdvancedDocumentPropertiesW");
    }
    public static int AdvancedDocumentPropertiesW ( Addressable hWnd,  Addressable hPrinter,  Addressable pDeviceName,  Addressable pDevModeOutput,  Addressable pDevModeInput) {
        var mh$ = AdvancedDocumentPropertiesW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtDeviceMode$MH() {
        return RuntimeHelper.requireNonNull(constants$670.ExtDeviceMode$MH,"ExtDeviceMode");
    }
    public static int ExtDeviceMode ( Addressable hWnd,  Addressable hInst,  Addressable pDevModeOutput,  Addressable pDeviceName,  Addressable pPort,  Addressable pDevModeInput,  Addressable pProfile,  int fMode) {
        var mh$ = ExtDeviceMode$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hInst, pDevModeOutput, pDeviceName, pPort, pDevModeInput, pProfile, fMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterDataA$MH() {
        return RuntimeHelper.requireNonNull(constants$670.GetPrinterDataA$MH,"GetPrinterDataA");
    }
    public static int GetPrinterDataA ( Addressable hPrinter,  Addressable pValueName,  Addressable pType,  Addressable pData,  int nSize,  Addressable pcbNeeded) {
        var mh$ = GetPrinterDataA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterDataW$MH() {
        return RuntimeHelper.requireNonNull(constants$671.GetPrinterDataW$MH,"GetPrinterDataW");
    }
    public static int GetPrinterDataW ( Addressable hPrinter,  Addressable pValueName,  Addressable pType,  Addressable pData,  int nSize,  Addressable pcbNeeded) {
        var mh$ = GetPrinterDataW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterDataExA$MH() {
        return RuntimeHelper.requireNonNull(constants$671.GetPrinterDataExA$MH,"GetPrinterDataExA");
    }
    public static int GetPrinterDataExA ( Addressable hPrinter,  Addressable pKeyName,  Addressable pValueName,  Addressable pType,  Addressable pData,  int nSize,  Addressable pcbNeeded) {
        var mh$ = GetPrinterDataExA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrinterDataExW$MH() {
        return RuntimeHelper.requireNonNull(constants$671.GetPrinterDataExW$MH,"GetPrinterDataExW");
    }
    public static int GetPrinterDataExW ( Addressable hPrinter,  Addressable pKeyName,  Addressable pValueName,  Addressable pType,  Addressable pData,  int nSize,  Addressable pcbNeeded) {
        var mh$ = GetPrinterDataExW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrinterDataA$MH() {
        return RuntimeHelper.requireNonNull(constants$671.EnumPrinterDataA$MH,"EnumPrinterDataA");
    }
    public static int EnumPrinterDataA ( Addressable hPrinter,  int dwIndex,  Addressable pValueName,  int cbValueName,  Addressable pcbValueName,  Addressable pType,  Addressable pData,  int cbData,  Addressable pcbData) {
        var mh$ = EnumPrinterDataA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrinterDataW$MH() {
        return RuntimeHelper.requireNonNull(constants$671.EnumPrinterDataW$MH,"EnumPrinterDataW");
    }
    public static int EnumPrinterDataW ( Addressable hPrinter,  int dwIndex,  Addressable pValueName,  int cbValueName,  Addressable pcbValueName,  Addressable pType,  Addressable pData,  int cbData,  Addressable pcbData) {
        var mh$ = EnumPrinterDataW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrinterDataExA$MH() {
        return RuntimeHelper.requireNonNull(constants$671.EnumPrinterDataExA$MH,"EnumPrinterDataExA");
    }
    public static int EnumPrinterDataExA ( Addressable hPrinter,  Addressable pKeyName,  Addressable pEnumValues,  int cbEnumValues,  Addressable pcbEnumValues,  Addressable pnEnumValues) {
        var mh$ = EnumPrinterDataExA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrinterDataExW$MH() {
        return RuntimeHelper.requireNonNull(constants$672.EnumPrinterDataExW$MH,"EnumPrinterDataExW");
    }
    public static int EnumPrinterDataExW ( Addressable hPrinter,  Addressable pKeyName,  Addressable pEnumValues,  int cbEnumValues,  Addressable pcbEnumValues,  Addressable pnEnumValues) {
        var mh$ = EnumPrinterDataExW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrinterKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$672.EnumPrinterKeyA$MH,"EnumPrinterKeyA");
    }
    public static int EnumPrinterKeyA ( Addressable hPrinter,  Addressable pKeyName,  Addressable pSubkey,  int cbSubkey,  Addressable pcbSubkey) {
        var mh$ = EnumPrinterKeyA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPrinterKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$672.EnumPrinterKeyW$MH,"EnumPrinterKeyW");
    }
    public static int EnumPrinterKeyW ( Addressable hPrinter,  Addressable pKeyName,  Addressable pSubkey,  int cbSubkey,  Addressable pcbSubkey) {
        var mh$ = EnumPrinterKeyW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPrinterDataA$MH() {
        return RuntimeHelper.requireNonNull(constants$672.SetPrinterDataA$MH,"SetPrinterDataA");
    }
    public static int SetPrinterDataA ( Addressable hPrinter,  Addressable pValueName,  int Type,  Addressable pData,  int cbData) {
        var mh$ = SetPrinterDataA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPrinterDataW$MH() {
        return RuntimeHelper.requireNonNull(constants$672.SetPrinterDataW$MH,"SetPrinterDataW");
    }
    public static int SetPrinterDataW ( Addressable hPrinter,  Addressable pValueName,  int Type,  Addressable pData,  int cbData) {
        var mh$ = SetPrinterDataW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPrinterDataExA$MH() {
        return RuntimeHelper.requireNonNull(constants$672.SetPrinterDataExA$MH,"SetPrinterDataExA");
    }
    public static int SetPrinterDataExA ( Addressable hPrinter,  Addressable pKeyName,  Addressable pValueName,  int Type,  Addressable pData,  int cbData) {
        var mh$ = SetPrinterDataExA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPrinterDataExW$MH() {
        return RuntimeHelper.requireNonNull(constants$673.SetPrinterDataExW$MH,"SetPrinterDataExW");
    }
    public static int SetPrinterDataExW ( Addressable hPrinter,  Addressable pKeyName,  Addressable pValueName,  int Type,  Addressable pData,  int cbData) {
        var mh$ = SetPrinterDataExW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterDataA$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DeletePrinterDataA$MH,"DeletePrinterDataA");
    }
    public static int DeletePrinterDataA ( Addressable hPrinter,  Addressable pValueName) {
        var mh$ = DeletePrinterDataA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterDataW$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DeletePrinterDataW$MH,"DeletePrinterDataW");
    }
    public static int DeletePrinterDataW ( Addressable hPrinter,  Addressable pValueName) {
        var mh$ = DeletePrinterDataW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterDataExA$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DeletePrinterDataExA$MH,"DeletePrinterDataExA");
    }
    public static int DeletePrinterDataExA ( Addressable hPrinter,  Addressable pKeyName,  Addressable pValueName) {
        var mh$ = DeletePrinterDataExA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterDataExW$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DeletePrinterDataExW$MH,"DeletePrinterDataExW");
    }
    public static int DeletePrinterDataExW ( Addressable hPrinter,  Addressable pKeyName,  Addressable pValueName) {
        var mh$ = DeletePrinterDataExW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DeletePrinterKeyA$MH,"DeletePrinterKeyA");
    }
    public static int DeletePrinterKeyA ( Addressable hPrinter,  Addressable pKeyName) {
        var mh$ = DeletePrinterKeyA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeletePrinterKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$674.DeletePrinterKeyW$MH,"DeletePrinterKeyW");
    }
    public static int DeletePrinterKeyW ( Addressable hPrinter,  Addressable pKeyName) {
        var mh$ = DeletePrinterKeyW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pKeyName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPRINTER_NOTIFY_OPTIONS_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_NOTIFY_OPTIONS_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_NOTIFY_OPTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_NOTIFY_OPTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_NOTIFY_INFO_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_NOTIFY_INFO_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_NOTIFY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_NOTIFY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBINARY_CONTAINER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIDI_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBIDI_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIDI_REQUEST_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBIDI_REQUEST_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIDI_REQUEST_CONTAINER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBIDI_REQUEST_CONTAINER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIDI_RESPONSE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBIDI_RESPONSE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIDI_RESPONSE_CONTAINER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBIDI_RESPONSE_CONTAINER = Constants$root.C_POINTER$LAYOUT;
    public static int BIDI_NULL() {
        return (int)0L;
    }
    public static int BIDI_INT() {
        return (int)1L;
    }
    public static int BIDI_FLOAT() {
        return (int)2L;
    }
    public static int BIDI_BOOL() {
        return (int)3L;
    }
    public static int BIDI_STRING() {
        return (int)4L;
    }
    public static int BIDI_TEXT() {
        return (int)5L;
    }
    public static int BIDI_ENUM() {
        return (int)6L;
    }
    public static int BIDI_BLOB() {
        return (int)7L;
    }
    public static MethodHandle WaitForPrinterChange$MH() {
        return RuntimeHelper.requireNonNull(constants$674.WaitForPrinterChange$MH,"WaitForPrinterChange");
    }
    public static int WaitForPrinterChange ( Addressable hPrinter,  int Flags) {
        var mh$ = WaitForPrinterChange$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstPrinterChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$674.FindFirstPrinterChangeNotification$MH,"FindFirstPrinterChangeNotification");
    }
    public static MemoryAddress FindFirstPrinterChangeNotification ( Addressable hPrinter,  int fdwFilter,  int fdwOptions,  Addressable pPrinterNotifyOptions) {
        var mh$ = FindFirstPrinterChangeNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hPrinter, fdwFilter, fdwOptions, pPrinterNotifyOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextPrinterChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$674.FindNextPrinterChangeNotification$MH,"FindNextPrinterChangeNotification");
    }
    public static int FindNextPrinterChangeNotification ( Addressable hChange,  Addressable pdwChange,  Addressable pvReserved,  Addressable ppPrinterNotifyInfo) {
        var mh$ = FindNextPrinterChangeNotification$MH();
        try {
            return (int)mh$.invokeExact(hChange, pdwChange, pvReserved, ppPrinterNotifyInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreePrinterNotifyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$674.FreePrinterNotifyInfo$MH,"FreePrinterNotifyInfo");
    }
    public static int FreePrinterNotifyInfo ( Addressable pPrinterNotifyInfo) {
        var mh$ = FreePrinterNotifyInfo$MH();
        try {
            return (int)mh$.invokeExact(pPrinterNotifyInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindClosePrinterChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$674.FindClosePrinterChangeNotification$MH,"FindClosePrinterChangeNotification");
    }
    public static int FindClosePrinterChangeNotification ( Addressable hChange) {
        var mh$ = FindClosePrinterChangeNotification$MH();
        try {
            return (int)mh$.invokeExact(hChange);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrinterMessageBoxA$MH() {
        return RuntimeHelper.requireNonNull(constants$675.PrinterMessageBoxA$MH,"PrinterMessageBoxA");
    }
    public static int PrinterMessageBoxA ( Addressable hPrinter,  int Error,  Addressable hWnd,  Addressable pText,  Addressable pCaption,  int dwType) {
        var mh$ = PrinterMessageBoxA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Error, hWnd, pText, pCaption, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrinterMessageBoxW$MH() {
        return RuntimeHelper.requireNonNull(constants$675.PrinterMessageBoxW$MH,"PrinterMessageBoxW");
    }
    public static int PrinterMessageBoxW ( Addressable hPrinter,  int Error,  Addressable hWnd,  Addressable pText,  Addressable pCaption,  int dwType) {
        var mh$ = PrinterMessageBoxW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Error, hWnd, pText, pCaption, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClosePrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$675.ClosePrinter$MH,"ClosePrinter");
    }
    public static int ClosePrinter ( Addressable hPrinter) {
        var mh$ = ClosePrinter$MH();
        try {
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFormA$MH() {
        return RuntimeHelper.requireNonNull(constants$675.AddFormA$MH,"AddFormA");
    }
    public static int AddFormA ( Addressable hPrinter,  int Level,  Addressable pForm) {
        var mh$ = AddFormA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFormW$MH() {
        return RuntimeHelper.requireNonNull(constants$675.AddFormW$MH,"AddFormW");
    }
    public static int AddFormW ( Addressable hPrinter,  int Level,  Addressable pForm) {
        var mh$ = AddFormW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, Level, pForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFormA$MH() {
        return RuntimeHelper.requireNonNull(constants$675.DeleteFormA$MH,"DeleteFormA");
    }
    public static int DeleteFormA ( Addressable hPrinter,  Addressable pFormName) {
        var mh$ = DeleteFormA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pFormName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFormW$MH() {
        return RuntimeHelper.requireNonNull(constants$676.DeleteFormW$MH,"DeleteFormW");
    }
    public static int DeleteFormW ( Addressable hPrinter,  Addressable pFormName) {
        var mh$ = DeleteFormW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pFormName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFormA$MH() {
        return RuntimeHelper.requireNonNull(constants$676.GetFormA$MH,"GetFormA");
    }
    public static int GetFormA ( Addressable hPrinter,  Addressable pFormName,  int Level,  Addressable pForm,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetFormA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFormW$MH() {
        return RuntimeHelper.requireNonNull(constants$676.GetFormW$MH,"GetFormW");
    }
    public static int GetFormW ( Addressable hPrinter,  Addressable pFormName,  int Level,  Addressable pForm,  int cbBuf,  Addressable pcbNeeded) {
        var mh$ = GetFormW$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFormA$MH() {
        return RuntimeHelper.requireNonNull(constants$676.SetFormA$MH,"SetFormA");
    }
    public static int SetFormA ( Addressable hPrinter,  Addressable pFormName,  int Level,  Addressable pForm) {
        var mh$ = SetFormA$MH();
        try {
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


