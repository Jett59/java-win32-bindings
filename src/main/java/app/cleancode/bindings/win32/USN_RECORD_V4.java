// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class USN_RECORD_V4 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("RecordLength"),
            Constants$root.C_SHORT$LAYOUT.withName("MajorVersion"),
            Constants$root.C_SHORT$LAYOUT.withName("MinorVersion")
        ).withName("Header"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Identifier")
        ).withName("FileReferenceNumber"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Identifier")
        ).withName("ParentFileReferenceNumber"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Usn"),
        Constants$root.C_LONG$LAYOUT.withName("Reason"),
        Constants$root.C_LONG$LAYOUT.withName("SourceInfo"),
        Constants$root.C_LONG$LAYOUT.withName("RemainingExtents"),
        Constants$root.C_SHORT$LAYOUT.withName("NumberOfExtents"),
        Constants$root.C_SHORT$LAYOUT.withName("ExtentSize"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("Offset"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("Length")
        )).withName("Extents")
    );
    public static MemoryLayout $LAYOUT() {
        return USN_RECORD_V4.$struct$LAYOUT;
    }
    public static MemorySegment Header$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment FileReferenceNumber$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment ParentFileReferenceNumber$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    static final VarHandle Usn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Usn"));
    public static VarHandle Usn$VH() {
        return USN_RECORD_V4.Usn$VH;
    }
    public static long Usn$get(MemorySegment seg) {
        return (long)USN_RECORD_V4.Usn$VH.get(seg);
    }
    public static void Usn$set( MemorySegment seg, long x) {
        USN_RECORD_V4.Usn$VH.set(seg, x);
    }
    public static long Usn$get(MemorySegment seg, long index) {
        return (long)USN_RECORD_V4.Usn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Usn$set(MemorySegment seg, long index, long x) {
        USN_RECORD_V4.Usn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reason$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reason"));
    public static VarHandle Reason$VH() {
        return USN_RECORD_V4.Reason$VH;
    }
    public static int Reason$get(MemorySegment seg) {
        return (int)USN_RECORD_V4.Reason$VH.get(seg);
    }
    public static void Reason$set( MemorySegment seg, int x) {
        USN_RECORD_V4.Reason$VH.set(seg, x);
    }
    public static int Reason$get(MemorySegment seg, long index) {
        return (int)USN_RECORD_V4.Reason$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reason$set(MemorySegment seg, long index, int x) {
        USN_RECORD_V4.Reason$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SourceInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SourceInfo"));
    public static VarHandle SourceInfo$VH() {
        return USN_RECORD_V4.SourceInfo$VH;
    }
    public static int SourceInfo$get(MemorySegment seg) {
        return (int)USN_RECORD_V4.SourceInfo$VH.get(seg);
    }
    public static void SourceInfo$set( MemorySegment seg, int x) {
        USN_RECORD_V4.SourceInfo$VH.set(seg, x);
    }
    public static int SourceInfo$get(MemorySegment seg, long index) {
        return (int)USN_RECORD_V4.SourceInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SourceInfo$set(MemorySegment seg, long index, int x) {
        USN_RECORD_V4.SourceInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RemainingExtents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RemainingExtents"));
    public static VarHandle RemainingExtents$VH() {
        return USN_RECORD_V4.RemainingExtents$VH;
    }
    public static int RemainingExtents$get(MemorySegment seg) {
        return (int)USN_RECORD_V4.RemainingExtents$VH.get(seg);
    }
    public static void RemainingExtents$set( MemorySegment seg, int x) {
        USN_RECORD_V4.RemainingExtents$VH.set(seg, x);
    }
    public static int RemainingExtents$get(MemorySegment seg, long index) {
        return (int)USN_RECORD_V4.RemainingExtents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemainingExtents$set(MemorySegment seg, long index, int x) {
        USN_RECORD_V4.RemainingExtents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfExtents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfExtents"));
    public static VarHandle NumberOfExtents$VH() {
        return USN_RECORD_V4.NumberOfExtents$VH;
    }
    public static short NumberOfExtents$get(MemorySegment seg) {
        return (short)USN_RECORD_V4.NumberOfExtents$VH.get(seg);
    }
    public static void NumberOfExtents$set( MemorySegment seg, short x) {
        USN_RECORD_V4.NumberOfExtents$VH.set(seg, x);
    }
    public static short NumberOfExtents$get(MemorySegment seg, long index) {
        return (short)USN_RECORD_V4.NumberOfExtents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfExtents$set(MemorySegment seg, long index, short x) {
        USN_RECORD_V4.NumberOfExtents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExtentSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExtentSize"));
    public static VarHandle ExtentSize$VH() {
        return USN_RECORD_V4.ExtentSize$VH;
    }
    public static short ExtentSize$get(MemorySegment seg) {
        return (short)USN_RECORD_V4.ExtentSize$VH.get(seg);
    }
    public static void ExtentSize$set( MemorySegment seg, short x) {
        USN_RECORD_V4.ExtentSize$VH.set(seg, x);
    }
    public static short ExtentSize$get(MemorySegment seg, long index) {
        return (short)USN_RECORD_V4.ExtentSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtentSize$set(MemorySegment seg, long index, short x) {
        USN_RECORD_V4.ExtentSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Extents$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


