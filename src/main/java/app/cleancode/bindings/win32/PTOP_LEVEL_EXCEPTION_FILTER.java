// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PTOP_LEVEL_EXCEPTION_FILTER {

    int apply(java.lang.foreign.MemoryAddress ExceptionInfo);
    static MemorySegment allocate(PTOP_LEVEL_EXCEPTION_FILTER fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PTOP_LEVEL_EXCEPTION_FILTER.class, fi, constants$90.PTOP_LEVEL_EXCEPTION_FILTER$FUNC, session);
    }
    static PTOP_LEVEL_EXCEPTION_FILTER ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _ExceptionInfo) -> {
            try {
                return (int)constants$90.PTOP_LEVEL_EXCEPTION_FILTER$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_ExceptionInfo);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


