// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagMCI_SEQ_SET_PARMS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwCallback"),
        Constants$root.C_LONG$LAYOUT.withName("dwTimeFormat"),
        Constants$root.C_LONG$LAYOUT.withName("dwAudio"),
        Constants$root.C_LONG$LAYOUT.withName("dwTempo"),
        Constants$root.C_LONG$LAYOUT.withName("dwPort"),
        Constants$root.C_LONG$LAYOUT.withName("dwSlave"),
        Constants$root.C_LONG$LAYOUT.withName("dwMaster"),
        Constants$root.C_LONG$LAYOUT.withName("dwOffset")
    ).withName("tagMCI_SEQ_SET_PARMS");
    public static MemoryLayout $LAYOUT() {
        return tagMCI_SEQ_SET_PARMS.$struct$LAYOUT;
    }
    static final VarHandle dwCallback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCallback"));
    public static VarHandle dwCallback$VH() {
        return tagMCI_SEQ_SET_PARMS.dwCallback$VH;
    }
    public static long dwCallback$get(MemorySegment seg) {
        return (long)tagMCI_SEQ_SET_PARMS.dwCallback$VH.get(seg);
    }
    public static void dwCallback$set( MemorySegment seg, long x) {
        tagMCI_SEQ_SET_PARMS.dwCallback$VH.set(seg, x);
    }
    public static long dwCallback$get(MemorySegment seg, long index) {
        return (long)tagMCI_SEQ_SET_PARMS.dwCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCallback$set(MemorySegment seg, long index, long x) {
        tagMCI_SEQ_SET_PARMS.dwCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTimeFormat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTimeFormat"));
    public static VarHandle dwTimeFormat$VH() {
        return tagMCI_SEQ_SET_PARMS.dwTimeFormat$VH;
    }
    public static int dwTimeFormat$get(MemorySegment seg) {
        return (int)tagMCI_SEQ_SET_PARMS.dwTimeFormat$VH.get(seg);
    }
    public static void dwTimeFormat$set( MemorySegment seg, int x) {
        tagMCI_SEQ_SET_PARMS.dwTimeFormat$VH.set(seg, x);
    }
    public static int dwTimeFormat$get(MemorySegment seg, long index) {
        return (int)tagMCI_SEQ_SET_PARMS.dwTimeFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTimeFormat$set(MemorySegment seg, long index, int x) {
        tagMCI_SEQ_SET_PARMS.dwTimeFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwAudio$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwAudio"));
    public static VarHandle dwAudio$VH() {
        return tagMCI_SEQ_SET_PARMS.dwAudio$VH;
    }
    public static int dwAudio$get(MemorySegment seg) {
        return (int)tagMCI_SEQ_SET_PARMS.dwAudio$VH.get(seg);
    }
    public static void dwAudio$set( MemorySegment seg, int x) {
        tagMCI_SEQ_SET_PARMS.dwAudio$VH.set(seg, x);
    }
    public static int dwAudio$get(MemorySegment seg, long index) {
        return (int)tagMCI_SEQ_SET_PARMS.dwAudio$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAudio$set(MemorySegment seg, long index, int x) {
        tagMCI_SEQ_SET_PARMS.dwAudio$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTempo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTempo"));
    public static VarHandle dwTempo$VH() {
        return tagMCI_SEQ_SET_PARMS.dwTempo$VH;
    }
    public static int dwTempo$get(MemorySegment seg) {
        return (int)tagMCI_SEQ_SET_PARMS.dwTempo$VH.get(seg);
    }
    public static void dwTempo$set( MemorySegment seg, int x) {
        tagMCI_SEQ_SET_PARMS.dwTempo$VH.set(seg, x);
    }
    public static int dwTempo$get(MemorySegment seg, long index) {
        return (int)tagMCI_SEQ_SET_PARMS.dwTempo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTempo$set(MemorySegment seg, long index, int x) {
        tagMCI_SEQ_SET_PARMS.dwTempo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwPort"));
    public static VarHandle dwPort$VH() {
        return tagMCI_SEQ_SET_PARMS.dwPort$VH;
    }
    public static int dwPort$get(MemorySegment seg) {
        return (int)tagMCI_SEQ_SET_PARMS.dwPort$VH.get(seg);
    }
    public static void dwPort$set( MemorySegment seg, int x) {
        tagMCI_SEQ_SET_PARMS.dwPort$VH.set(seg, x);
    }
    public static int dwPort$get(MemorySegment seg, long index) {
        return (int)tagMCI_SEQ_SET_PARMS.dwPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwPort$set(MemorySegment seg, long index, int x) {
        tagMCI_SEQ_SET_PARMS.dwPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwSlave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSlave"));
    public static VarHandle dwSlave$VH() {
        return tagMCI_SEQ_SET_PARMS.dwSlave$VH;
    }
    public static int dwSlave$get(MemorySegment seg) {
        return (int)tagMCI_SEQ_SET_PARMS.dwSlave$VH.get(seg);
    }
    public static void dwSlave$set( MemorySegment seg, int x) {
        tagMCI_SEQ_SET_PARMS.dwSlave$VH.set(seg, x);
    }
    public static int dwSlave$get(MemorySegment seg, long index) {
        return (int)tagMCI_SEQ_SET_PARMS.dwSlave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSlave$set(MemorySegment seg, long index, int x) {
        tagMCI_SEQ_SET_PARMS.dwSlave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwMaster$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwMaster"));
    public static VarHandle dwMaster$VH() {
        return tagMCI_SEQ_SET_PARMS.dwMaster$VH;
    }
    public static int dwMaster$get(MemorySegment seg) {
        return (int)tagMCI_SEQ_SET_PARMS.dwMaster$VH.get(seg);
    }
    public static void dwMaster$set( MemorySegment seg, int x) {
        tagMCI_SEQ_SET_PARMS.dwMaster$VH.set(seg, x);
    }
    public static int dwMaster$get(MemorySegment seg, long index) {
        return (int)tagMCI_SEQ_SET_PARMS.dwMaster$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMaster$set(MemorySegment seg, long index, int x) {
        tagMCI_SEQ_SET_PARMS.dwMaster$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwOffset"));
    public static VarHandle dwOffset$VH() {
        return tagMCI_SEQ_SET_PARMS.dwOffset$VH;
    }
    public static int dwOffset$get(MemorySegment seg) {
        return (int)tagMCI_SEQ_SET_PARMS.dwOffset$VH.get(seg);
    }
    public static void dwOffset$set( MemorySegment seg, int x) {
        tagMCI_SEQ_SET_PARMS.dwOffset$VH.set(seg, x);
    }
    public static int dwOffset$get(MemorySegment seg, long index) {
        return (int)tagMCI_SEQ_SET_PARMS.dwOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOffset$set(MemorySegment seg, long index, int x) {
        tagMCI_SEQ_SET_PARMS.dwOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


