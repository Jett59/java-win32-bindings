// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class WINDOWS_9 extends WINDOWS_8 {

    public static int TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX() {
        return (int)16L;
    }
    public static int TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH() {
        return (int)16L;
    }
    public static int CDB_SIZE() {
        return (int)16L;
    }
    public static int TELEMETRY_COMMAND_SIZE() {
        return (int)16L;
    }
    public static int DEVICEDUMP_CAP_PRIVATE_SECTION() {
        return (int)1L;
    }
    public static int DEVICEDUMP_CAP_RESTRICTED_SECTION() {
        return (int)2L;
    }
    public static int STORAGE_IDLE_POWERUP_REASON_VERSION_V1() {
        return (int)1L;
    }
    public static int STORAGE_DEVICE_POWER_CAP_VERSION_V1() {
        return (int)1L;
    }
    public static int STORAGE_EVENT_NOTIFICATION_VERSION_V1() {
        return (int)1L;
    }
    public static int STORAGE_EVENT_MEDIA_STATUS() {
        return (int)1L;
    }
    public static int STORAGE_EVENT_DEVICE_STATUS() {
        return (int)2L;
    }
    public static int STORAGE_EVENT_DEVICE_OPERATION() {
        return (int)4L;
    }
    public static int READ_COPY_NUMBER_KEY() {
        return (int)1380142592L;
    }
    public static int READ_COPY_NUMBER_BYPASS_CACHE_FLAG() {
        return (int)256L;
    }
    public static int STORAGE_HW_FIRMWARE_REQUEST_FLAG_CONTROLLER() {
        return (int)1L;
    }
    public static int STORAGE_HW_FIRMWARE_REQUEST_FLAG_LAST_SEGMENT() {
        return (int)2L;
    }
    public static int STORAGE_HW_FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT() {
        return (int)4L;
    }
    public static int STORAGE_HW_FIRMWARE_INVALID_SLOT() {
        return (int)255L;
    }
    public static int STORAGE_HW_FIRMWARE_REVISION_LENGTH() {
        return (int)16L;
    }
    public static int STORAGE_PROTOCOL_STRUCTURE_VERSION() {
        return (int)1L;
    }
    public static int STORAGE_PROTOCOL_STATUS_PENDING() {
        return (int)0L;
    }
    public static int STORAGE_PROTOCOL_STATUS_SUCCESS() {
        return (int)1L;
    }
    public static int STORAGE_PROTOCOL_STATUS_ERROR() {
        return (int)2L;
    }
    public static int STORAGE_PROTOCOL_STATUS_INVALID_REQUEST() {
        return (int)3L;
    }
    public static int STORAGE_PROTOCOL_STATUS_NO_DEVICE() {
        return (int)4L;
    }
    public static int STORAGE_PROTOCOL_STATUS_BUSY() {
        return (int)5L;
    }
    public static int STORAGE_PROTOCOL_STATUS_DATA_OVERRUN() {
        return (int)6L;
    }
    public static int STORAGE_PROTOCOL_STATUS_INSUFFICIENT_RESOURCES() {
        return (int)7L;
    }
    public static int STORAGE_PROTOCOL_STATUS_THROTTLED_REQUEST() {
        return (int)8L;
    }
    public static int STORAGE_PROTOCOL_STATUS_NOT_SUPPORTED() {
        return (int)255L;
    }
    public static int STORAGE_PROTOCOL_COMMAND_LENGTH_NVME() {
        return (int)64L;
    }
    public static int STORAGE_PROTOCOL_SPECIFIC_NVME_ADMIN_COMMAND() {
        return (int)1L;
    }
    public static int STORAGE_PROTOCOL_SPECIFIC_NVME_NVM_COMMAND() {
        return (int)2L;
    }
    public static int STORATTRIBUTE_NONE() {
        return (int)0L;
    }
    public static int STORATTRIBUTE_MANAGEMENT_STATE() {
        return (int)1L;
    }
    public static int IOCTL_SCMBUS_DEVICE_FUNCTION_BASE() {
        return (int)0L;
    }
    public static int IOCTL_SCM_LOGICAL_DEVICE_FUNCTION_BASE() {
        return (int)768L;
    }
    public static int IOCTL_SCM_PHYSICAL_DEVICE_FUNCTION_BASE() {
        return (int)1536L;
    }
    public static int SCM_MAX_SYMLINK_LEN_IN_CHARS() {
        return (int)256L;
    }
    public static int MAX_INTERFACE_CODES() {
        return (int)8L;
    }
    public static int SCM_PD_FIRMWARE_REVISION_LENGTH_BYTES() {
        return (int)32L;
    }
    public static int SCM_PD_PROPERTY_NAME_LENGTH_IN_CHARS() {
        return (int)128L;
    }
    public static int SCM_PD_MAX_OPERATIONAL_STATUS() {
        return (int)16L;
    }
    public static int SCM_PD_FIRMWARE_LAST_DOWNLOAD() {
        return (int)1L;
    }
    public static int PARTITION_ENTRY_UNUSED() {
        return (int)0L;
    }
    public static int PARTITION_FAT_12() {
        return (int)1L;
    }
    public static int PARTITION_XENIX_1() {
        return (int)2L;
    }
    public static int PARTITION_XENIX_2() {
        return (int)3L;
    }
    public static int PARTITION_FAT_16() {
        return (int)4L;
    }
    public static int PARTITION_EXTENDED() {
        return (int)5L;
    }
    public static int PARTITION_HUGE() {
        return (int)6L;
    }
    public static int PARTITION_IFS() {
        return (int)7L;
    }
    public static int PARTITION_OS2BOOTMGR() {
        return (int)10L;
    }
    public static int PARTITION_FAT32() {
        return (int)11L;
    }
    public static int PARTITION_FAT32_XINT13() {
        return (int)12L;
    }
    public static int PARTITION_XINT13() {
        return (int)14L;
    }
    public static int PARTITION_XINT13_EXTENDED() {
        return (int)15L;
    }
    public static int PARTITION_MSFT_RECOVERY() {
        return (int)39L;
    }
    public static int PARTITION_MAIN_OS() {
        return (int)40L;
    }
    public static int PARTIITON_OS_DATA() {
        return (int)41L;
    }
    public static int PARTITION_PRE_INSTALLED() {
        return (int)42L;
    }
    public static int PARTITION_BSP() {
        return (int)43L;
    }
    public static int PARTITION_DPP() {
        return (int)44L;
    }
    public static int PARTITION_WINDOWS_SYSTEM() {
        return (int)45L;
    }
    public static int PARTITION_PREP() {
        return (int)65L;
    }
    public static int PARTITION_LDM() {
        return (int)66L;
    }
    public static int PARTITION_DM() {
        return (int)84L;
    }
    public static int PARTITION_EZDRIVE() {
        return (int)85L;
    }
    public static int PARTITION_UNIX() {
        return (int)99L;
    }
    public static int PARTITION_SPACES_DATA() {
        return (int)215L;
    }
    public static int PARTITION_SPACES() {
        return (int)231L;
    }
    public static int PARTITION_GPT() {
        return (int)238L;
    }
    public static int PARTITION_SYSTEM() {
        return (int)239L;
    }
    public static int VALID_NTFT() {
        return (int)192L;
    }
    public static int PARTITION_NTFT() {
        return (int)128L;
    }
    public static int HIST_NO_OF_BUCKETS() {
        return (int)24L;
    }
    public static int DISK_LOGGING_START() {
        return (int)0L;
    }
    public static int DISK_LOGGING_STOP() {
        return (int)1L;
    }
    public static int DISK_LOGGING_DUMP() {
        return (int)2L;
    }
    public static int DISK_BINNING() {
        return (int)3L;
    }
    public static int CAP_ATA_ID_CMD() {
        return (int)1L;
    }
    public static int CAP_ATAPI_ID_CMD() {
        return (int)2L;
    }
    public static int CAP_SMART_CMD() {
        return (int)4L;
    }
    public static int ATAPI_ID_CMD() {
        return (int)161L;
    }
    public static int ID_CMD() {
        return (int)236L;
    }
    public static int SMART_CMD() {
        return (int)176L;
    }
    public static int SMART_CYL_LOW() {
        return (int)79L;
    }
    public static int SMART_CYL_HI() {
        return (int)194L;
    }
    public static int SMART_NO_ERROR() {
        return (int)0L;
    }
    public static int SMART_IDE_ERROR() {
        return (int)1L;
    }
    public static int SMART_INVALID_FLAG() {
        return (int)2L;
    }
    public static int SMART_INVALID_COMMAND() {
        return (int)3L;
    }
    public static int SMART_INVALID_BUFFER() {
        return (int)4L;
    }
    public static int SMART_INVALID_DRIVE() {
        return (int)5L;
    }
    public static int SMART_INVALID_IOCTL() {
        return (int)6L;
    }
    public static int SMART_ERROR_NO_MEM() {
        return (int)7L;
    }
    public static int SMART_INVALID_REGISTER() {
        return (int)8L;
    }
    public static int SMART_NOT_SUPPORTED() {
        return (int)9L;
    }
    public static int SMART_NO_IDE_DEVICE() {
        return (int)10L;
    }
    public static int SMART_OFFLINE_ROUTINE_OFFLINE() {
        return (int)0L;
    }
    public static int SMART_SHORT_SELFTEST_OFFLINE() {
        return (int)1L;
    }
    public static int SMART_EXTENDED_SELFTEST_OFFLINE() {
        return (int)2L;
    }
    public static int SMART_ABORT_OFFLINE_SELFTEST() {
        return (int)127L;
    }
    public static int SMART_SHORT_SELFTEST_CAPTIVE() {
        return (int)129L;
    }
    public static int SMART_EXTENDED_SELFTEST_CAPTIVE() {
        return (int)130L;
    }
    public static int READ_ATTRIBUTE_BUFFER_SIZE() {
        return (int)512L;
    }
    public static int IDENTIFY_BUFFER_SIZE() {
        return (int)512L;
    }
    public static int READ_THRESHOLD_BUFFER_SIZE() {
        return (int)512L;
    }
    public static int SMART_LOG_SECTOR_SIZE() {
        return (int)512L;
    }
    public static int READ_ATTRIBUTES() {
        return (int)208L;
    }
    public static int READ_THRESHOLDS() {
        return (int)209L;
    }
    public static int ENABLE_DISABLE_AUTOSAVE() {
        return (int)210L;
    }
    public static int SAVE_ATTRIBUTE_VALUES() {
        return (int)211L;
    }
    public static int EXECUTE_OFFLINE_DIAGS() {
        return (int)212L;
    }
    public static int SMART_READ_LOG() {
        return (int)213L;
    }
    public static int SMART_WRITE_LOG() {
        return (int)214L;
    }
    public static int ENABLE_SMART() {
        return (int)216L;
    }
    public static int DISABLE_SMART() {
        return (int)217L;
    }
    public static int RETURN_SMART_STATUS() {
        return (int)218L;
    }
    public static int ENABLE_DISABLE_AUTO_OFFLINE() {
        return (int)219L;
    }
    public static int DISK_ATTRIBUTE_OFFLINE() {
        return (int)1L;
    }
    public static int DISK_ATTRIBUTE_READ_ONLY() {
        return (int)2L;
    }
    public static int MAX_VOLUME_ID_SIZE() {
        return (int)36L;
    }
    public static int MAX_VOLUME_TEMPLATE_SIZE() {
        return (int)40L;
    }
    public static int VENDOR_ID_LENGTH() {
        return (int)8L;
    }
    public static int PRODUCT_ID_LENGTH() {
        return (int)16L;
    }
    public static int REVISION_LENGTH() {
        return (int)4L;
    }
    public static int SERIAL_NUMBER_LENGTH() {
        return (int)32L;
    }
    public static int CHANGER_BAR_CODE_SCANNER_INSTALLED() {
        return (int)1L;
    }
    public static int CHANGER_INIT_ELEM_STAT_WITH_RANGE() {
        return (int)2L;
    }
    public static int CHANGER_CLOSE_IEPORT() {
        return (int)4L;
    }
    public static int CHANGER_OPEN_IEPORT() {
        return (int)8L;
    }
    public static int CHANGER_STATUS_NON_VOLATILE() {
        return (int)16L;
    }
    public static int CHANGER_EXCHANGE_MEDIA() {
        return (int)32L;
    }
    public static int CHANGER_CLEANER_SLOT() {
        return (int)64L;
    }
    public static int CHANGER_LOCK_UNLOCK() {
        return (int)128L;
    }
    public static int CHANGER_CARTRIDGE_MAGAZINE() {
        return (int)256L;
    }
    public static int CHANGER_MEDIUM_FLIP() {
        return (int)512L;
    }
    public static int CHANGER_POSITION_TO_ELEMENT() {
        return (int)1024L;
    }
    public static int CHANGER_REPORT_IEPORT_STATE() {
        return (int)2048L;
    }
    public static int CHANGER_STORAGE_DRIVE() {
        return (int)4096L;
    }
    public static int CHANGER_STORAGE_IEPORT() {
        return (int)8192L;
    }
    public static int CHANGER_STORAGE_SLOT() {
        return (int)16384L;
    }
    public static int CHANGER_STORAGE_TRANSPORT() {
        return (int)32768L;
    }
    public static int CHANGER_DRIVE_CLEANING_REQUIRED() {
        return (int)65536L;
    }
    public static int CHANGER_PREDISMOUNT_EJECT_REQUIRED() {
        return (int)131072L;
    }
    public static int CHANGER_CLEANER_ACCESS_NOT_VALID() {
        return (int)262144L;
    }
    public static int CHANGER_PREMOUNT_EJECT_REQUIRED() {
        return (int)524288L;
    }
    public static int CHANGER_VOLUME_IDENTIFICATION() {
        return (int)1048576L;
    }
    public static int CHANGER_VOLUME_SEARCH() {
        return (int)2097152L;
    }
    public static int CHANGER_VOLUME_ASSERT() {
        return (int)4194304L;
    }
    public static int CHANGER_VOLUME_REPLACE() {
        return (int)8388608L;
    }
    public static int CHANGER_VOLUME_UNDEFINE() {
        return (int)16777216L;
    }
    public static int CHANGER_SERIAL_NUMBER_VALID() {
        return (int)67108864L;
    }
    public static int CHANGER_DEVICE_REINITIALIZE_CAPABLE() {
        return (int)134217728L;
    }
    public static int CHANGER_KEYPAD_ENABLE_DISABLE() {
        return (int)268435456L;
    }
    public static int CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS() {
        return (int)536870912L;
    }
    public static int CHANGER_TO_TRANSPORT() {
        return (int)1L;
    }
    public static int CHANGER_TO_SLOT() {
        return (int)2L;
    }
    public static int CHANGER_TO_IEPORT() {
        return (int)4L;
    }
    public static int CHANGER_TO_DRIVE() {
        return (int)8L;
    }
    public static int LOCK_UNLOCK_IEPORT() {
        return (int)1L;
    }
    public static int LOCK_UNLOCK_DOOR() {
        return (int)2L;
    }
    public static int LOCK_UNLOCK_KEYPAD() {
        return (int)4L;
    }
    public static int LOCK_ELEMENT() {
        return (int)0L;
    }
    public static int UNLOCK_ELEMENT() {
        return (int)1L;
    }
    public static int EXTEND_IEPORT() {
        return (int)2L;
    }
    public static int RETRACT_IEPORT() {
        return (int)3L;
    }
    public static int ELEMENT_STATUS_FULL() {
        return (int)1L;
    }
    public static int ELEMENT_STATUS_IMPEXP() {
        return (int)2L;
    }
    public static int ELEMENT_STATUS_EXCEPT() {
        return (int)4L;
    }
    public static int ELEMENT_STATUS_ACCESS() {
        return (int)8L;
    }
    public static int ELEMENT_STATUS_EXENAB() {
        return (int)16L;
    }
    public static int ELEMENT_STATUS_INENAB() {
        return (int)32L;
    }
    public static int ELEMENT_STATUS_PRODUCT_DATA() {
        return (int)64L;
    }
    public static int ELEMENT_STATUS_LUN_VALID() {
        return (int)4096L;
    }
    public static int ELEMENT_STATUS_ID_VALID() {
        return (int)8192L;
    }
    public static int ELEMENT_STATUS_NOT_BUS() {
        return (int)32768L;
    }
    public static int ELEMENT_STATUS_INVERT() {
        return (int)4194304L;
    }
    public static int ELEMENT_STATUS_SVALID() {
        return (int)8388608L;
    }
    public static int ELEMENT_STATUS_PVOLTAG() {
        return (int)268435456L;
    }
    public static int ELEMENT_STATUS_AVOLTAG() {
        return (int)536870912L;
    }
    public static int ERROR_LABEL_UNREADABLE() {
        return (int)1L;
    }
    public static int ERROR_LABEL_QUESTIONABLE() {
        return (int)2L;
    }
    public static int ERROR_SLOT_NOT_PRESENT() {
        return (int)4L;
    }
    public static int ERROR_DRIVE_NOT_INSTALLED() {
        return (int)8L;
    }
    public static int ERROR_TRAY_MALFUNCTION() {
        return (int)16L;
    }
    public static int ERROR_INIT_STATUS_NEEDED() {
        return (int)17L;
    }
    public static int SEARCH_ALL() {
        return (int)0L;
    }
    public static int SEARCH_PRIMARY() {
        return (int)1L;
    }
    public static int SEARCH_ALTERNATE() {
        return (int)2L;
    }
    public static int SEARCH_ALL_NO_SEQ() {
        return (int)4L;
    }
    public static int SEARCH_PRI_NO_SEQ() {
        return (int)5L;
    }
    public static int SEARCH_ALT_NO_SEQ() {
        return (int)6L;
    }
    public static int ASSERT_PRIMARY() {
        return (int)8L;
    }
    public static int ASSERT_ALTERNATE() {
        return (int)9L;
    }
    public static int REPLACE_PRIMARY() {
        return (int)10L;
    }
    public static int REPLACE_ALTERNATE() {
        return (int)11L;
    }
    public static int UNDEFINE_PRIMARY() {
        return (int)12L;
    }
    public static int UNDEFINE_ALTERNATE() {
        return (int)13L;
    }
    public static int GET_VOLUME_BITMAP_FLAG_MASK_METADATA() {
        return (int)1L;
    }
    public static int FLAG_USN_TRACK_MODIFIED_RANGES_ENABLE() {
        return (int)1L;
    }
    public static int FILE_PREFETCH_TYPE_FOR_CREATE() {
        return (int)1L;
    }
    public static int FILE_PREFETCH_TYPE_FOR_DIRENUM() {
        return (int)2L;
    }
    public static int FILE_PREFETCH_TYPE_FOR_CREATE_EX() {
        return (int)3L;
    }
    public static int FILE_PREFETCH_TYPE_FOR_DIRENUM_EX() {
        return (int)4L;
    }
    public static int FILE_PREFETCH_TYPE_MAX() {
        return (int)4L;
    }
    public static int FILESYSTEM_STATISTICS_TYPE_NTFS() {
        return (int)1L;
    }
    public static int FILESYSTEM_STATISTICS_TYPE_FAT() {
        return (int)2L;
    }
    public static int FILESYSTEM_STATISTICS_TYPE_EXFAT() {
        return (int)3L;
    }
    public static int FILESYSTEM_STATISTICS_TYPE_REFS() {
        return (int)4L;
    }
    public static int FILE_SET_ENCRYPTION() {
        return (int)1L;
    }
    public static int FILE_CLEAR_ENCRYPTION() {
        return (int)2L;
    }
    public static int STREAM_SET_ENCRYPTION() {
        return (int)3L;
    }
    public static int STREAM_CLEAR_ENCRYPTION() {
        return (int)4L;
    }
    public static int MAXIMUM_ENCRYPTION_VALUE() {
        return (int)4L;
    }
    public static int ENCRYPTED_DATA_INFO_SPARSE_FILE() {
        return (int)1L;
    }
    public static int COPYFILE_SIS_LINK() {
        return (int)1L;
    }
    public static int COPYFILE_SIS_REPLACE() {
        return (int)2L;
    }
    public static int COPYFILE_SIS_FLAGS() {
        return (int)3L;
    }
    public static int TXFS_RM_FLAG_LOGGING_MODE() {
        return (int)1L;
    }
    public static int TXFS_RM_FLAG_RENAME_RM() {
        return (int)2L;
    }
    public static int TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX() {
        return (int)4L;
    }
    public static int TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN() {
        return (int)8L;
    }
    public static int TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS() {
        return (int)16L;
    }
    public static int TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT() {
        return (int)32L;
    }
    public static int TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE() {
        return (int)64L;
    }
    public static int TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX() {
        return (int)128L;
    }
    public static int TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN() {
        return (int)256L;
    }
    public static int TXFS_RM_FLAG_GROW_LOG() {
        return (int)1024L;
    }
    public static int TXFS_RM_FLAG_SHRINK_LOG() {
        return (int)2048L;
    }
    public static int TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE() {
        return (int)4096L;
    }
    public static int TXFS_RM_FLAG_PRESERVE_CHANGES() {
        return (int)8192L;
    }
    public static int TXFS_RM_FLAG_RESET_RM_AT_NEXT_START() {
        return (int)16384L;
    }
    public static int TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START() {
        return (int)32768L;
    }
    public static int TXFS_RM_FLAG_PREFER_CONSISTENCY() {
        return (int)65536L;
    }
    public static int TXFS_RM_FLAG_PREFER_AVAILABILITY() {
        return (int)131072L;
    }
    public static int TXFS_TRANSACTION_STATE_NONE() {
        return (int)0L;
    }
    public static int TXFS_TRANSACTION_STATE_ACTIVE() {
        return (int)1L;
    }
    public static int TXFS_TRANSACTION_STATE_PREPARED() {
        return (int)2L;
    }
    public static int TXFS_TRANSACTION_STATE_NOTACTIVE() {
        return (int)3L;
    }
    public static int TXFS_RM_STATE_NOT_STARTED() {
        return (int)0L;
    }
    public static int TXFS_RM_STATE_STARTING() {
        return (int)1L;
    }
    public static int TXFS_RM_STATE_ACTIVE() {
        return (int)2L;
    }
    public static int TXFS_RM_STATE_SHUTTING_DOWN() {
        return (int)3L;
    }
    public static int TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN() {
        return (int)1L;
    }
    public static int TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK() {
        return (int)2L;
    }
    public static int TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX() {
        return (int)1L;
    }
    public static int TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN() {
        return (int)2L;
    }
    public static int TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE() {
        return (int)4L;
    }
    public static int TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS() {
        return (int)8L;
    }
    public static int TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT() {
        return (int)16L;
    }
    public static int TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE() {
        return (int)32L;
    }
    public static int TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX() {
        return (int)64L;
    }
    public static int TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN() {
        return (int)128L;
    }
    public static int TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT() {
        return (int)512L;
    }
    public static int TXFS_START_RM_FLAG_LOGGING_MODE() {
        return (int)1024L;
    }
    public static int TXFS_START_RM_FLAG_PRESERVE_CHANGES() {
        return (int)2048L;
    }
    public static int TXFS_START_RM_FLAG_PREFER_CONSISTENCY() {
        return (int)4096L;
    }
    public static int TXFS_START_RM_FLAG_PREFER_AVAILABILITY() {
        return (int)8192L;
    }
    public static int TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_CREATED() {
        return (int)1L;
    }
    public static int TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_DELETED() {
        return (int)2L;
    }
    public static int TXFS_SAVEPOINT_SET() {
        return (int)1L;
    }
    public static int TXFS_SAVEPOINT_ROLLBACK() {
        return (int)2L;
    }
    public static int TXFS_SAVEPOINT_CLEAR() {
        return (int)4L;
    }
    public static int TXFS_SAVEPOINT_CLEAR_ALL() {
        return (int)16L;
    }
    public static int REQUEST_OPLOCK_CURRENT_VERSION() {
        return (int)1L;
    }
    public static int QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_HOST_VOLUMES() {
        return (int)1L;
    }
    public static int QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_GUEST_VOLUMES() {
        return (int)2L;
    }
    public static int SD_GLOBAL_CHANGE_TYPE_MACHINE_SID() {
        return (int)1L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_PAGE_FILE() {
        return (int)1L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_DENY_DEFRAG_SET() {
        return (int)2L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_FS_SYSTEM_FILE() {
        return (int)4L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_TXF_SYSTEM_FILE() {
        return (int)8L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_DATA() {
        return (int)16777216L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_INDEX() {
        return (int)33554432L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_SYSTEM() {
        return (int)50331648L;
    }
    public static int FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN() {
        return (int)1L;
    }
    public static int FILE_TYPE_NOTIFICATION_FLAG_USAGE_END() {
        return (int)2L;
    }
    public static int CSV_MGMTLOCK_CHECK_VOLUME_REDIRECTED() {
        return (int)1L;
    }
    public static int CSV_QUERY_MDS_PATH_V2_VERSION_1() {
        return (int)1L;
    }
    public static int CSV_QUERY_MDS_PATH_FLAG_STORAGE_ON_THIS_NODE_IS_CONNECTED() {
        return (int)1L;
    }
    public static int CSV_QUERY_MDS_PATH_FLAG_CSV_DIRECT_IO_ENABLED() {
        return (int)2L;
    }
    public static int CSV_QUERY_MDS_PATH_FLAG_SMB_BYPASS_CSV_ENABLED() {
        return (int)4L;
    }
    public static int SET_PURGE_FAILURE_MODE_ENABLED() {
        return (int)1L;
    }
    public static int SET_PURGE_FAILURE_MODE_DISABLED() {
        return (int)2L;
    }
    public static int FILE_REGION_USAGE_VALID_CACHED_DATA() {
        return (int)1L;
    }
    public static int FILE_REGION_USAGE_VALID_NONCACHED_DATA() {
        return (int)2L;
    }
    public static int FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT() {
        return (int)4L;
    }
    public static int FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT() {
        return (int)8L;
    }
    public static int FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT() {
        return (int)16L;
    }
    public static int QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ() {
        return (int)1073741824L;
    }
    public static int QUERY_STORAGE_CLASSES_FLAGS_NO_DEFRAG_VOLUME() {
        return (int)536870912L;
    }
    public static int DUPLICATE_EXTENTS_DATA_EX_SOURCE_ATOMIC() {
        return (int)1L;
    }
    public static int DUPLICATE_EXTENTS_DATA_EX_ASYNC() {
        return (int)2L;
    }
    public static int REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1() {
        return (int)1L;
    }
    public static int REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1() {
        return (int)1L;
    }
    public static int WIM_PROVIDER_HASH_SIZE() {
        return (int)20L;
    }
    public static int PROJFS_PROTOCOL_VERSION() {
        return (int)3L;
    }
    public static int IOCTL_VOLUME_BASE() {
        return (int)86L;
    }
    public static int EFS_TRACKED_OFFSET_HEADER_FLAG() {
        return (int)1L;
    }
    public static int SPACES_TRACKED_OFFSET_HEADER_FLAG() {
        return (int)2L;
    }
    public static int SCARD_ATR_LENGTH() {
        return (int)33L;
    }
    public static int SCARD_PROTOCOL_UNDEFINED() {
        return (int)0L;
    }
    public static int SCARD_PROTOCOL_T0() {
        return (int)1L;
    }
    public static int SCARD_PROTOCOL_T1() {
        return (int)2L;
    }
    public static int SCARD_PROTOCOL_RAW() {
        return (int)65536L;
    }
    public static int SCARD_PROTOCOL_OPTIMAL() {
        return (int)0L;
    }
    public static int SCARD_POWER_DOWN() {
        return (int)0L;
    }
    public static int SCARD_COLD_RESET() {
        return (int)1L;
    }
    public static int SCARD_WARM_RESET() {
        return (int)2L;
    }
    public static int MAXIMUM_ATTR_STRING_LENGTH() {
        return (int)32L;
    }
    public static int MAXIMUM_SMARTCARD_READERS() {
        return (int)10L;
    }
    public static int SCARD_CLASS_VENDOR_INFO() {
        return (int)1L;
    }
    public static int SCARD_CLASS_COMMUNICATIONS() {
        return (int)2L;
    }
    public static int SCARD_CLASS_PROTOCOL() {
        return (int)3L;
    }
    public static int SCARD_CLASS_POWER_MGMT() {
        return (int)4L;
    }
    public static int SCARD_CLASS_SECURITY() {
        return (int)5L;
    }
    public static int SCARD_CLASS_MECHANICAL() {
        return (int)6L;
    }
    public static int SCARD_CLASS_VENDOR_DEFINED() {
        return (int)7L;
    }
    public static int SCARD_CLASS_IFD_PROTOCOL() {
        return (int)8L;
    }
    public static int SCARD_CLASS_ICC_STATE() {
        return (int)9L;
    }
    public static int SCARD_CLASS_PERF() {
        return (int)32766L;
    }
    public static int SCARD_CLASS_SYSTEM() {
        return (int)32767L;
    }
    public static int SCARD_T0_HEADER_LENGTH() {
        return (int)7L;
    }
    public static int SCARD_T0_CMD_LENGTH() {
        return (int)5L;
    }
    public static int SCARD_T1_PROLOGUE_LENGTH() {
        return (int)3L;
    }
    public static int SCARD_T1_EPILOGUE_LENGTH() {
        return (int)2L;
    }
    public static int SCARD_T1_EPILOGUE_LENGTH_LRC() {
        return (int)1L;
    }
    public static int SCARD_T1_MAX_IFS() {
        return (int)254L;
    }
    public static int SCARD_UNKNOWN() {
        return (int)0L;
    }
    public static int SCARD_ABSENT() {
        return (int)1L;
    }
    public static int SCARD_PRESENT() {
        return (int)2L;
    }
    public static int SCARD_SWALLOWED() {
        return (int)3L;
    }
    public static int SCARD_POWERED() {
        return (int)4L;
    }
    public static int SCARD_NEGOTIABLE() {
        return (int)5L;
    }
    public static int SCARD_SPECIFIC() {
        return (int)6L;
    }
    public static int SCARD_READER_SWALLOWS() {
        return (int)1L;
    }
    public static int SCARD_READER_EJECTS() {
        return (int)2L;
    }
    public static int SCARD_READER_CONFISCATES() {
        return (int)4L;
    }
    public static int SCARD_READER_CONTACTLESS() {
        return (int)8L;
    }
    public static int SCARD_READER_TYPE_SERIAL() {
        return (int)1L;
    }
    public static int SCARD_READER_TYPE_PARALELL() {
        return (int)2L;
    }
    public static int SCARD_READER_TYPE_KEYBOARD() {
        return (int)4L;
    }
    public static int SCARD_READER_TYPE_SCSI() {
        return (int)8L;
    }
    public static int SCARD_READER_TYPE_IDE() {
        return (int)16L;
    }
    public static int SCARD_READER_TYPE_USB() {
        return (int)32L;
    }
    public static int SCARD_READER_TYPE_PCMCIA() {
        return (int)64L;
    }
    public static int SCARD_READER_TYPE_TPM() {
        return (int)128L;
    }
    public static int SCARD_READER_TYPE_NFC() {
        return (int)256L;
    }
    public static int SCARD_READER_TYPE_UICC() {
        return (int)512L;
    }
    public static int SCARD_READER_TYPE_NGC() {
        return (int)1024L;
    }
    public static int SCARD_READER_TYPE_EMBEDDEDSE() {
        return (int)2048L;
    }
    public static int SCARD_READER_TYPE_VENDOR() {
        return (int)240L;
    }
    public static int SCARD_SCOPE_USER() {
        return (int)0L;
    }
    public static int SCARD_SCOPE_TERMINAL() {
        return (int)1L;
    }
    public static int SCARD_SCOPE_SYSTEM() {
        return (int)2L;
    }
    public static int SCARD_PROVIDER_PRIMARY() {
        return (int)1L;
    }
    public static int SCARD_PROVIDER_CSP() {
        return (int)2L;
    }
    public static int SCARD_PROVIDER_KSP() {
        return (int)3L;
    }
    public static int SCARD_STATE_UNAWARE() {
        return (int)0L;
    }
    public static int SCARD_STATE_IGNORE() {
        return (int)1L;
    }
    public static int SCARD_STATE_CHANGED() {
        return (int)2L;
    }
    public static int SCARD_STATE_UNKNOWN() {
        return (int)4L;
    }
    public static int SCARD_STATE_UNAVAILABLE() {
        return (int)8L;
    }
    public static int SCARD_STATE_EMPTY() {
        return (int)16L;
    }
    public static int SCARD_STATE_PRESENT() {
        return (int)32L;
    }
    public static int SCARD_STATE_ATRMATCH() {
        return (int)64L;
    }
    public static int SCARD_STATE_EXCLUSIVE() {
        return (int)128L;
    }
    public static int SCARD_STATE_INUSE() {
        return (int)256L;
    }
    public static int SCARD_STATE_MUTE() {
        return (int)512L;
    }
    public static int SCARD_STATE_UNPOWERED() {
        return (int)1024L;
    }
    public static int SCARD_SHARE_EXCLUSIVE() {
        return (int)1L;
    }
    public static int SCARD_SHARE_SHARED() {
        return (int)2L;
    }
    public static int SCARD_SHARE_DIRECT() {
        return (int)3L;
    }
    public static int SCARD_LEAVE_CARD() {
        return (int)0L;
    }
    public static int SCARD_RESET_CARD() {
        return (int)1L;
    }
    public static int SCARD_UNPOWER_CARD() {
        return (int)2L;
    }
    public static int SCARD_EJECT_CARD() {
        return (int)3L;
    }
    public static int SC_DLG_MINIMAL_UI() {
        return (int)1L;
    }
    public static int SC_DLG_NO_UI() {
        return (int)2L;
    }
    public static int SC_DLG_FORCE_UI() {
        return (int)4L;
    }
    public static int SCERR_NOCARDNAME() {
        return (int)16384L;
    }
    public static int SCERR_NOGUIDS() {
        return (int)32768L;
    }
    public static int SCARD_AUDIT_CHV_FAILURE() {
        return (int)0L;
    }
    public static int SCARD_AUDIT_CHV_SUCCESS() {
        return (int)1L;
    }
    public static int DSPRINT_PUBLISH() {
        return (int)1L;
    }
    public static int DSPRINT_UPDATE() {
        return (int)2L;
    }
    public static int DSPRINT_UNPUBLISH() {
        return (int)4L;
    }
    public static int DSPRINT_REPUBLISH() {
        return (int)8L;
    }
    public static int PRINTER_CONTROL_PAUSE() {
        return (int)1L;
    }
    public static int PRINTER_CONTROL_RESUME() {
        return (int)2L;
    }
    public static int PRINTER_CONTROL_PURGE() {
        return (int)3L;
    }
    public static int PRINTER_CONTROL_SET_STATUS() {
        return (int)4L;
    }
    public static int PRINTER_STATUS_PAUSED() {
        return (int)1L;
    }
    public static int PRINTER_STATUS_ERROR() {
        return (int)2L;
    }
    public static int PRINTER_STATUS_PENDING_DELETION() {
        return (int)4L;
    }
    public static int PRINTER_STATUS_PAPER_JAM() {
        return (int)8L;
    }
    public static int PRINTER_STATUS_PAPER_OUT() {
        return (int)16L;
    }
    public static int PRINTER_STATUS_MANUAL_FEED() {
        return (int)32L;
    }
    public static int PRINTER_STATUS_PAPER_PROBLEM() {
        return (int)64L;
    }
    public static int PRINTER_STATUS_OFFLINE() {
        return (int)128L;
    }
    public static int PRINTER_STATUS_IO_ACTIVE() {
        return (int)256L;
    }
    public static int PRINTER_STATUS_BUSY() {
        return (int)512L;
    }
    public static int PRINTER_STATUS_PRINTING() {
        return (int)1024L;
    }
    public static int PRINTER_STATUS_OUTPUT_BIN_FULL() {
        return (int)2048L;
    }
    public static int PRINTER_STATUS_NOT_AVAILABLE() {
        return (int)4096L;
    }
    public static int PRINTER_STATUS_WAITING() {
        return (int)8192L;
    }
    public static int PRINTER_STATUS_PROCESSING() {
        return (int)16384L;
    }
    public static int PRINTER_STATUS_INITIALIZING() {
        return (int)32768L;
    }
    public static int PRINTER_STATUS_WARMING_UP() {
        return (int)65536L;
    }
    public static int PRINTER_STATUS_TONER_LOW() {
        return (int)131072L;
    }
    public static int PRINTER_STATUS_NO_TONER() {
        return (int)262144L;
    }
    public static int PRINTER_STATUS_PAGE_PUNT() {
        return (int)524288L;
    }
    public static int PRINTER_STATUS_USER_INTERVENTION() {
        return (int)1048576L;
    }
    public static int PRINTER_STATUS_OUT_OF_MEMORY() {
        return (int)2097152L;
    }
    public static int PRINTER_STATUS_DOOR_OPEN() {
        return (int)4194304L;
    }
    public static int PRINTER_STATUS_SERVER_UNKNOWN() {
        return (int)8388608L;
    }
    public static int PRINTER_STATUS_POWER_SAVE() {
        return (int)16777216L;
    }
    public static int PRINTER_STATUS_SERVER_OFFLINE() {
        return (int)33554432L;
    }
    public static int PRINTER_STATUS_DRIVER_UPDATE_NEEDED() {
        return (int)67108864L;
    }
    public static int PRINTER_ATTRIBUTE_QUEUED() {
        return (int)1L;
    }
    public static int PRINTER_ATTRIBUTE_DIRECT() {
        return (int)2L;
    }
    public static int PRINTER_ATTRIBUTE_DEFAULT() {
        return (int)4L;
    }
    public static int PRINTER_ATTRIBUTE_SHARED() {
        return (int)8L;
    }
    public static int PRINTER_ATTRIBUTE_NETWORK() {
        return (int)16L;
    }
    public static int PRINTER_ATTRIBUTE_HIDDEN() {
        return (int)32L;
    }
    public static int PRINTER_ATTRIBUTE_LOCAL() {
        return (int)64L;
    }
    public static int PRINTER_ATTRIBUTE_ENABLE_DEVQ() {
        return (int)128L;
    }
    public static int PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS() {
        return (int)256L;
    }
    public static int PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST() {
        return (int)512L;
    }
    public static int PRINTER_ATTRIBUTE_WORK_OFFLINE() {
        return (int)1024L;
    }
    public static int PRINTER_ATTRIBUTE_ENABLE_BIDI() {
        return (int)2048L;
    }
    public static int PRINTER_ATTRIBUTE_RAW_ONLY() {
        return (int)4096L;
    }
    public static int PRINTER_ATTRIBUTE_PUBLISHED() {
        return (int)8192L;
    }
    public static int PRINTER_ATTRIBUTE_FAX() {
        return (int)16384L;
    }
    public static int PRINTER_ATTRIBUTE_TS() {
        return (int)32768L;
    }
    public static int PRINTER_ATTRIBUTE_PUSHED_USER() {
        return (int)131072L;
    }
    public static int PRINTER_ATTRIBUTE_PUSHED_MACHINE() {
        return (int)262144L;
    }
    public static int PRINTER_ATTRIBUTE_MACHINE() {
        return (int)524288L;
    }
    public static int PRINTER_ATTRIBUTE_FRIENDLY_NAME() {
        return (int)1048576L;
    }
    public static int PRINTER_ATTRIBUTE_TS_GENERIC_DRIVER() {
        return (int)2097152L;
    }
    public static int PRINTER_ATTRIBUTE_PER_USER() {
        return (int)4194304L;
    }
    public static int PRINTER_ATTRIBUTE_ENTERPRISE_CLOUD() {
        return (int)8388608L;
    }
    public static int NO_PRIORITY() {
        return (int)0L;
    }
    public static int MAX_PRIORITY() {
        return (int)99L;
    }
    public static int MIN_PRIORITY() {
        return (int)1L;
    }
    public static int DEF_PRIORITY() {
        return (int)1L;
    }
    public static int JOB_CONTROL_PAUSE() {
        return (int)1L;
    }
    public static int JOB_CONTROL_RESUME() {
        return (int)2L;
    }
    public static int JOB_CONTROL_CANCEL() {
        return (int)3L;
    }
    public static int JOB_CONTROL_RESTART() {
        return (int)4L;
    }
    public static int JOB_CONTROL_DELETE() {
        return (int)5L;
    }
    public static int JOB_CONTROL_SENT_TO_PRINTER() {
        return (int)6L;
    }
    public static int JOB_CONTROL_LAST_PAGE_EJECTED() {
        return (int)7L;
    }
    public static int JOB_CONTROL_RETAIN() {
        return (int)8L;
    }
    public static int JOB_CONTROL_RELEASE() {
        return (int)9L;
    }
    public static int JOB_STATUS_PAUSED() {
        return (int)1L;
    }
    public static int JOB_STATUS_ERROR() {
        return (int)2L;
    }
    public static int JOB_STATUS_DELETING() {
        return (int)4L;
    }
    public static int JOB_STATUS_SPOOLING() {
        return (int)8L;
    }
    public static int JOB_STATUS_PRINTING() {
        return (int)16L;
    }
    public static int JOB_STATUS_OFFLINE() {
        return (int)32L;
    }
    public static int JOB_STATUS_PAPEROUT() {
        return (int)64L;
    }
    public static int JOB_STATUS_PRINTED() {
        return (int)128L;
    }
    public static int JOB_STATUS_DELETED() {
        return (int)256L;
    }
    public static int JOB_STATUS_BLOCKED_DEVQ() {
        return (int)512L;
    }
    public static int JOB_STATUS_USER_INTERVENTION() {
        return (int)1024L;
    }
    public static int JOB_STATUS_RESTART() {
        return (int)2048L;
    }
    public static int JOB_STATUS_COMPLETE() {
        return (int)4096L;
    }
    public static int JOB_STATUS_RETAINED() {
        return (int)8192L;
    }
    public static int JOB_STATUS_RENDERING_LOCALLY() {
        return (int)16384L;
    }
    public static int JOB_POSITION_UNSPECIFIED() {
        return (int)0L;
    }
    public static int PRINTER_DRIVER_PACKAGE_AWARE() {
        return (int)1L;
    }
    public static int PRINTER_DRIVER_XPS() {
        return (int)2L;
    }
    public static int PRINTER_DRIVER_SANDBOX_ENABLED() {
        return (int)4L;
    }
    public static int PRINTER_DRIVER_CLASS() {
        return (int)8L;
    }
    public static int PRINTER_DRIVER_DERIVED() {
        return (int)16L;
    }
    public static int PRINTER_DRIVER_NOT_SHAREABLE() {
        return (int)32L;
    }
    public static int PRINTER_DRIVER_CATEGORY_FAX() {
        return (int)64L;
    }
    public static int PRINTER_DRIVER_CATEGORY_FILE() {
        return (int)128L;
    }
    public static int PRINTER_DRIVER_CATEGORY_VIRTUAL() {
        return (int)256L;
    }
    public static int PRINTER_DRIVER_CATEGORY_SERVICE() {
        return (int)512L;
    }
    public static int PRINTER_DRIVER_SOFT_RESET_REQUIRED() {
        return (int)1024L;
    }
    public static int PRINTER_DRIVER_SANDBOX_DISABLED() {
        return (int)2048L;
    }
    public static int PRINTER_DRIVER_CATEGORY_3D() {
        return (int)4096L;
    }
    public static int PRINTER_DRIVER_CATEGORY_CLOUD() {
        return (int)8192L;
    }
    public static int DRIVER_KERNELMODE() {
        return (int)1L;
    }
    public static int DRIVER_USERMODE() {
        return (int)2L;
    }
    public static int DPD_DELETE_UNUSED_FILES() {
        return (int)1L;
    }
    public static int DPD_DELETE_SPECIFIC_VERSION() {
        return (int)2L;
    }
    public static int DPD_DELETE_ALL_FILES() {
        return (int)4L;
    }
    public static int APD_STRICT_UPGRADE() {
        return (int)1L;
    }
    public static int APD_STRICT_DOWNGRADE() {
        return (int)2L;
    }
    public static int APD_COPY_ALL_FILES() {
        return (int)4L;
    }
    public static int APD_COPY_NEW_FILES() {
        return (int)8L;
    }
    public static int APD_COPY_FROM_DIRECTORY() {
        return (int)16L;
    }
    public static int STRING_NONE() {
        return (int)1L;
    }
    public static int STRING_MUIDLL() {
        return (int)2L;
    }
    public static int STRING_LANGPAIR() {
        return (int)4L;
    }
    public static int DI_CHANNEL() {
        return (int)1L;
    }
    public static int DI_READ_SPOOL_JOB() {
        return (int)3L;
    }
    public static int DI_MEMORYMAP_WRITE() {
        return (int)1L;
    }
    public static int FORM_USER() {
        return (int)0L;
    }
    public static int FORM_BUILTIN() {
        return (int)1L;
    }
    public static int FORM_PRINTER() {
        return (int)2L;
    }
    public static int PORT_TYPE_WRITE() {
        return (int)1L;
    }
    public static int PORT_TYPE_READ() {
        return (int)2L;
    }
    public static int PORT_TYPE_REDIRECTED() {
        return (int)4L;
    }
    public static int PORT_TYPE_NET_ATTACHED() {
        return (int)8L;
    }
    public static int PORT_STATUS_TYPE_ERROR() {
        return (int)1L;
    }
    public static int PORT_STATUS_TYPE_WARNING() {
        return (int)2L;
    }
    public static int PORT_STATUS_TYPE_INFO() {
        return (int)3L;
    }
    public static int PORT_STATUS_OFFLINE() {
        return (int)1L;
    }
    public static int PORT_STATUS_PAPER_JAM() {
        return (int)2L;
    }
    public static int PORT_STATUS_PAPER_OUT() {
        return (int)3L;
    }
    public static int PORT_STATUS_OUTPUT_BIN_FULL() {
        return (int)4L;
    }
    public static int PORT_STATUS_PAPER_PROBLEM() {
        return (int)5L;
    }
    public static int PORT_STATUS_NO_TONER() {
        return (int)6L;
    }
    public static int PORT_STATUS_DOOR_OPEN() {
        return (int)7L;
    }
    public static int PORT_STATUS_USER_INTERVENTION() {
        return (int)8L;
    }
    public static int PORT_STATUS_OUT_OF_MEMORY() {
        return (int)9L;
    }
    public static int PORT_STATUS_TONER_LOW() {
        return (int)10L;
    }
    public static int PORT_STATUS_WARMING_UP() {
        return (int)11L;
    }
    public static int PORT_STATUS_POWER_SAVE() {
        return (int)12L;
    }
    public static int PRINTER_ENUM_DEFAULT() {
        return (int)1L;
    }
    public static int PRINTER_ENUM_LOCAL() {
        return (int)2L;
    }
    public static int PRINTER_ENUM_CONNECTIONS() {
        return (int)4L;
    }
    public static int PRINTER_ENUM_FAVORITE() {
        return (int)4L;
    }
    public static int PRINTER_ENUM_NAME() {
        return (int)8L;
    }
    public static int PRINTER_ENUM_REMOTE() {
        return (int)16L;
    }
    public static int PRINTER_ENUM_SHARED() {
        return (int)32L;
    }
    public static int PRINTER_ENUM_NETWORK() {
        return (int)64L;
    }
    public static int PRINTER_ENUM_EXPAND() {
        return (int)16384L;
    }
    public static int PRINTER_ENUM_CONTAINER() {
        return (int)32768L;
    }
    public static int PRINTER_ENUM_ICONMASK() {
        return (int)16711680L;
    }
    public static int PRINTER_ENUM_ICON1() {
        return (int)65536L;
    }
    public static int PRINTER_ENUM_ICON2() {
        return (int)131072L;
    }
    public static int PRINTER_ENUM_ICON3() {
        return (int)262144L;
    }
    public static int PRINTER_ENUM_ICON4() {
        return (int)524288L;
    }
    public static int PRINTER_ENUM_ICON5() {
        return (int)1048576L;
    }
    public static int PRINTER_ENUM_ICON6() {
        return (int)2097152L;
    }
    public static int PRINTER_ENUM_ICON7() {
        return (int)4194304L;
    }
    public static int PRINTER_ENUM_ICON8() {
        return (int)8388608L;
    }
    public static int PRINTER_ENUM_HIDE() {
        return (int)16777216L;
    }
    public static int PRINTER_ENUM_CATEGORY_ALL() {
        return (int)33554432L;
    }
    public static int PRINTER_ENUM_CATEGORY_3D() {
        return (int)67108864L;
    }
    public static int SPOOL_FILE_PERSISTENT() {
        return (int)1L;
    }
    public static int SPOOL_FILE_TEMPORARY() {
        return (int)2L;
    }
    public static int PRINTER_NOTIFY_TYPE() {
        return (int)0L;
    }
    public static int JOB_NOTIFY_TYPE() {
        return (int)1L;
    }
    public static int SERVER_NOTIFY_TYPE() {
        return (int)2L;
    }
    public static int PRINTER_NOTIFY_FIELD_SERVER_NAME() {
        return (int)0L;
    }
    public static int PRINTER_NOTIFY_FIELD_PRINTER_NAME() {
        return (int)1L;
    }
    public static int PRINTER_NOTIFY_FIELD_SHARE_NAME() {
        return (int)2L;
    }
    public static int PRINTER_NOTIFY_FIELD_PORT_NAME() {
        return (int)3L;
    }
    public static int PRINTER_NOTIFY_FIELD_DRIVER_NAME() {
        return (int)4L;
    }
    public static int PRINTER_NOTIFY_FIELD_COMMENT() {
        return (int)5L;
    }
    public static int PRINTER_NOTIFY_FIELD_LOCATION() {
        return (int)6L;
    }
    public static int PRINTER_NOTIFY_FIELD_DEVMODE() {
        return (int)7L;
    }
    public static int PRINTER_NOTIFY_FIELD_SEPFILE() {
        return (int)8L;
    }
    public static int PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR() {
        return (int)9L;
    }
    public static int PRINTER_NOTIFY_FIELD_PARAMETERS() {
        return (int)10L;
    }
    public static int PRINTER_NOTIFY_FIELD_DATATYPE() {
        return (int)11L;
    }
    public static int PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR() {
        return (int)12L;
    }
    public static int PRINTER_NOTIFY_FIELD_ATTRIBUTES() {
        return (int)13L;
    }
    public static int PRINTER_NOTIFY_FIELD_PRIORITY() {
        return (int)14L;
    }
    public static int PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY() {
        return (int)15L;
    }
    public static int PRINTER_NOTIFY_FIELD_START_TIME() {
        return (int)16L;
    }
    public static int PRINTER_NOTIFY_FIELD_UNTIL_TIME() {
        return (int)17L;
    }
    public static int PRINTER_NOTIFY_FIELD_STATUS() {
        return (int)18L;
    }
    public static int PRINTER_NOTIFY_FIELD_STATUS_STRING() {
        return (int)19L;
    }
    public static int PRINTER_NOTIFY_FIELD_CJOBS() {
        return (int)20L;
    }
    public static int PRINTER_NOTIFY_FIELD_AVERAGE_PPM() {
        return (int)21L;
    }
    public static int PRINTER_NOTIFY_FIELD_TOTAL_PAGES() {
        return (int)22L;
    }
    public static int PRINTER_NOTIFY_FIELD_PAGES_PRINTED() {
        return (int)23L;
    }
    public static int PRINTER_NOTIFY_FIELD_TOTAL_BYTES() {
        return (int)24L;
    }
    public static int PRINTER_NOTIFY_FIELD_BYTES_PRINTED() {
        return (int)25L;
    }
    public static int PRINTER_NOTIFY_FIELD_OBJECT_GUID() {
        return (int)26L;
    }
    public static int PRINTER_NOTIFY_FIELD_FRIENDLY_NAME() {
        return (int)27L;
    }
    public static int PRINTER_NOTIFY_FIELD_BRANCH_OFFICE_PRINTING() {
        return (int)28L;
    }
    public static int JOB_NOTIFY_FIELD_PRINTER_NAME() {
        return (int)0L;
    }
    public static int JOB_NOTIFY_FIELD_MACHINE_NAME() {
        return (int)1L;
    }
    public static int JOB_NOTIFY_FIELD_PORT_NAME() {
        return (int)2L;
    }
    public static int JOB_NOTIFY_FIELD_USER_NAME() {
        return (int)3L;
    }
    public static int JOB_NOTIFY_FIELD_NOTIFY_NAME() {
        return (int)4L;
    }
    public static int JOB_NOTIFY_FIELD_DATATYPE() {
        return (int)5L;
    }
    public static int JOB_NOTIFY_FIELD_PRINT_PROCESSOR() {
        return (int)6L;
    }
    public static int JOB_NOTIFY_FIELD_PARAMETERS() {
        return (int)7L;
    }
    public static int JOB_NOTIFY_FIELD_DRIVER_NAME() {
        return (int)8L;
    }
    public static int JOB_NOTIFY_FIELD_DEVMODE() {
        return (int)9L;
    }
    public static int JOB_NOTIFY_FIELD_STATUS() {
        return (int)10L;
    }
    public static int JOB_NOTIFY_FIELD_STATUS_STRING() {
        return (int)11L;
    }
    public static int JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR() {
        return (int)12L;
    }
    public static int JOB_NOTIFY_FIELD_DOCUMENT() {
        return (int)13L;
    }
    public static int JOB_NOTIFY_FIELD_PRIORITY() {
        return (int)14L;
    }
    public static int JOB_NOTIFY_FIELD_POSITION() {
        return (int)15L;
    }
    public static int JOB_NOTIFY_FIELD_SUBMITTED() {
        return (int)16L;
    }
    public static int JOB_NOTIFY_FIELD_START_TIME() {
        return (int)17L;
    }
    public static int JOB_NOTIFY_FIELD_UNTIL_TIME() {
        return (int)18L;
    }
    public static int JOB_NOTIFY_FIELD_TIME() {
        return (int)19L;
    }
    public static int JOB_NOTIFY_FIELD_TOTAL_PAGES() {
        return (int)20L;
    }
    public static int JOB_NOTIFY_FIELD_PAGES_PRINTED() {
        return (int)21L;
    }
    public static int JOB_NOTIFY_FIELD_TOTAL_BYTES() {
        return (int)22L;
    }
    public static int JOB_NOTIFY_FIELD_BYTES_PRINTED() {
        return (int)23L;
    }
    public static int JOB_NOTIFY_FIELD_REMOTE_JOB_ID() {
        return (int)24L;
    }
    public static int SERVER_NOTIFY_FIELD_PRINT_DRIVER_ISOLATION_GROUP() {
        return (int)0L;
    }
    public static int PRINTER_NOTIFY_CATEGORY_ALL() {
        return (int)4096L;
    }
    public static int PRINTER_NOTIFY_CATEGORY_3D() {
        return (int)8192L;
    }
    public static int PRINTER_NOTIFY_OPTIONS_REFRESH() {
        return (int)1L;
    }
    public static int PRINTER_NOTIFY_INFO_DISCARDED() {
        return (int)1L;
    }
    public static int BIDI_ACCESS_ADMINISTRATOR() {
        return (int)1L;
    }
    public static int BIDI_ACCESS_USER() {
        return (int)2L;
    }
    public static int ERROR_BIDI_STATUS_OK() {
        return (int)0L;
    }
    public static int ERROR_BIDI_ERROR_BASE() {
        return (int)13000L;
    }
    public static int PRINTER_CHANGE_ADD_PRINTER() {
        return (int)1L;
    }
    public static int PRINTER_CHANGE_SET_PRINTER() {
        return (int)2L;
    }
    public static int PRINTER_CHANGE_DELETE_PRINTER() {
        return (int)4L;
    }
    public static int PRINTER_CHANGE_FAILED_CONNECTION_PRINTER() {
        return (int)8L;
    }
    public static int PRINTER_CHANGE_PRINTER() {
        return (int)255L;
    }
    public static int PRINTER_CHANGE_ADD_JOB() {
        return (int)256L;
    }
    public static int PRINTER_CHANGE_SET_JOB() {
        return (int)512L;
    }
    public static int PRINTER_CHANGE_DELETE_JOB() {
        return (int)1024L;
    }
    public static int PRINTER_CHANGE_WRITE_JOB() {
        return (int)2048L;
    }
    public static int PRINTER_CHANGE_JOB() {
        return (int)65280L;
    }
    public static int PRINTER_CHANGE_ADD_FORM() {
        return (int)65536L;
    }
    public static int PRINTER_CHANGE_SET_FORM() {
        return (int)131072L;
    }
    public static int PRINTER_CHANGE_DELETE_FORM() {
        return (int)262144L;
    }
    public static int PRINTER_CHANGE_FORM() {
        return (int)458752L;
    }
    public static int PRINTER_CHANGE_ADD_PORT() {
        return (int)1048576L;
    }
    public static int PRINTER_CHANGE_CONFIGURE_PORT() {
        return (int)2097152L;
    }
    public static int PRINTER_CHANGE_DELETE_PORT() {
        return (int)4194304L;
    }
    public static int PRINTER_CHANGE_PORT() {
        return (int)7340032L;
    }
    public static int PRINTER_CHANGE_ADD_PRINT_PROCESSOR() {
        return (int)16777216L;
    }
    public static int PRINTER_CHANGE_DELETE_PRINT_PROCESSOR() {
        return (int)67108864L;
    }
    public static int PRINTER_CHANGE_PRINT_PROCESSOR() {
        return (int)117440512L;
    }
    public static int PRINTER_CHANGE_SERVER() {
        return (int)134217728L;
    }
    public static int PRINTER_CHANGE_ADD_PRINTER_DRIVER() {
        return (int)268435456L;
    }
    public static int PRINTER_CHANGE_SET_PRINTER_DRIVER() {
        return (int)536870912L;
    }
    public static int PRINTER_CHANGE_DELETE_PRINTER_DRIVER() {
        return (int)1073741824L;
    }
    public static int PRINTER_CHANGE_PRINTER_DRIVER() {
        return (int)1879048192L;
    }
    public static int PRINTER_CHANGE_ALL() {
        return (int)2138570751L;
    }
    public static int PRINTER_ERROR_WARNING() {
        return (int)1073741824L;
    }
    public static int PRINTER_ERROR_SEVERE() {
        return (int)536870912L;
    }
    public static int PRINTER_ERROR_OUTOFPAPER() {
        return (int)1L;
    }
    public static int PRINTER_ERROR_JAM() {
        return (int)2L;
    }
    public static int PRINTER_ERROR_OUTOFTONER() {
        return (int)4L;
    }
    public static int SERVER_ACCESS_ADMINISTER() {
        return (int)1L;
    }
    public static int SERVER_ACCESS_ENUMERATE() {
        return (int)2L;
    }
    public static int PRINTER_ACCESS_ADMINISTER() {
        return (int)4L;
    }
    public static int PRINTER_ACCESS_USE() {
        return (int)8L;
    }
    public static int JOB_ACCESS_ADMINISTER() {
        return (int)16L;
    }
    public static int JOB_ACCESS_READ() {
        return (int)32L;
    }
    public static int PRINTER_ACCESS_MANAGE_LIMITED() {
        return (int)64L;
    }
    public static int PRINTER_CONNECTION_MISMATCH() {
        return (int)32L;
    }
    public static int PRINTER_CONNECTION_NO_UI() {
        return (int)64L;
    }
    public static int IPDFP_COPY_ALL_FILES() {
        return (int)1L;
    }
    public static int UPDP_SILENT_UPLOAD() {
        return (int)1L;
    }
    public static int UPDP_UPLOAD_ALWAYS() {
        return (int)2L;
    }
    public static int UPDP_CHECK_DRIVERSTORE() {
        return (int)4L;
    }
    public static int COM_RIGHTS_EXECUTE() {
        return (int)1L;
    }
    public static int COM_RIGHTS_EXECUTE_LOCAL() {
        return (int)2L;
    }
    public static int COM_RIGHTS_EXECUTE_REMOTE() {
        return (int)4L;
    }
    public static int COM_RIGHTS_ACTIVATE_LOCAL() {
        return (int)8L;
    }
    public static int COM_RIGHTS_ACTIVATE_REMOTE() {
        return (int)16L;
    }
    public static int COM_RIGHTS_RESERVED1() {
        return (int)32L;
    }
    public static int COM_RIGHTS_RESERVED2() {
        return (int)64L;
    }
    public static int CWMO_MAX_HANDLES() {
        return (int)56L;
    }
    public static int CWCSTORAGENAME() {
        return (int)32L;
    }
    public static int STGFMT_STORAGE() {
        return (int)0L;
    }
    public static int STGFMT_NATIVE() {
        return (int)1L;
    }
    public static int STGFMT_FILE() {
        return (int)3L;
    }
    public static int STGFMT_ANY() {
        return (int)4L;
    }
    public static int STGFMT_DOCFILE() {
        return (int)5L;
    }
    public static int STGFMT_DOCUMENT() {
        return (int)0L;
    }
    public static int STGOPTIONS_VERSION() {
        return (int)2L;
    }
    public static int CCH_MAX_PROPSTG_NAME() {
        return (int)31L;
    }
    public static int SERVICE_ACTIVE() {
        return (int)1L;
    }
    public static int SERVICE_INACTIVE() {
        return (int)2L;
    }
    public static int SERVICE_CONTROL_STOP() {
        return (int)1L;
    }
    public static int SERVICE_CONTROL_PAUSE() {
        return (int)2L;
    }
    public static int SERVICE_CONTROL_CONTINUE() {
        return (int)3L;
    }
    public static int SERVICE_CONTROL_INTERROGATE() {
        return (int)4L;
    }
    public static int SERVICE_CONTROL_SHUTDOWN() {
        return (int)5L;
    }
    public static int SERVICE_CONTROL_PARAMCHANGE() {
        return (int)6L;
    }
    public static int SERVICE_CONTROL_NETBINDADD() {
        return (int)7L;
    }
    public static int SERVICE_CONTROL_NETBINDREMOVE() {
        return (int)8L;
    }
    public static int SERVICE_CONTROL_NETBINDENABLE() {
        return (int)9L;
    }
    public static int SERVICE_CONTROL_NETBINDDISABLE() {
        return (int)10L;
    }
    public static int SERVICE_CONTROL_DEVICEEVENT() {
        return (int)11L;
    }
    public static int SERVICE_CONTROL_HARDWAREPROFILECHANGE() {
        return (int)12L;
    }
    public static int SERVICE_CONTROL_POWEREVENT() {
        return (int)13L;
    }
    public static int SERVICE_CONTROL_SESSIONCHANGE() {
        return (int)14L;
    }
    public static int SERVICE_CONTROL_PRESHUTDOWN() {
        return (int)15L;
    }
    public static int SERVICE_CONTROL_TIMECHANGE() {
        return (int)16L;
    }
    public static int SERVICE_CONTROL_TRIGGEREVENT() {
        return (int)32L;
    }
    public static int SERVICE_CONTROL_LOWRESOURCES() {
        return (int)96L;
    }
    public static int SERVICE_CONTROL_SYSTEMLOWRESOURCES() {
        return (int)97L;
    }
    public static int SERVICE_STOPPED() {
        return (int)1L;
    }
    public static int SERVICE_START_PENDING() {
        return (int)2L;
    }
    public static int SERVICE_STOP_PENDING() {
        return (int)3L;
    }
    public static int SERVICE_RUNNING() {
        return (int)4L;
    }
    public static int SERVICE_CONTINUE_PENDING() {
        return (int)5L;
    }
    public static int SERVICE_PAUSE_PENDING() {
        return (int)6L;
    }
    public static int SERVICE_PAUSED() {
        return (int)7L;
    }
    public static int SERVICE_ACCEPT_STOP() {
        return (int)1L;
    }
    public static int SERVICE_ACCEPT_PAUSE_CONTINUE() {
        return (int)2L;
    }
    public static int SERVICE_ACCEPT_SHUTDOWN() {
        return (int)4L;
    }
    public static int SERVICE_ACCEPT_PARAMCHANGE() {
        return (int)8L;
    }
    public static int SERVICE_ACCEPT_NETBINDCHANGE() {
        return (int)16L;
    }
    public static int SERVICE_ACCEPT_HARDWAREPROFILECHANGE() {
        return (int)32L;
    }
    public static int SERVICE_ACCEPT_POWEREVENT() {
        return (int)64L;
    }
    public static int SERVICE_ACCEPT_SESSIONCHANGE() {
        return (int)128L;
    }
    public static int SERVICE_ACCEPT_PRESHUTDOWN() {
        return (int)256L;
    }
    public static int SERVICE_ACCEPT_TIMECHANGE() {
        return (int)512L;
    }
    public static int SERVICE_ACCEPT_TRIGGEREVENT() {
        return (int)1024L;
    }
    public static int SERVICE_ACCEPT_USER_LOGOFF() {
        return (int)2048L;
    }
    public static int SERVICE_ACCEPT_LOWRESOURCES() {
        return (int)8192L;
    }
    public static int SERVICE_ACCEPT_SYSTEMLOWRESOURCES() {
        return (int)16384L;
    }
    public static int SC_MANAGER_CONNECT() {
        return (int)1L;
    }
    public static int SC_MANAGER_CREATE_SERVICE() {
        return (int)2L;
    }
    public static int SC_MANAGER_ENUMERATE_SERVICE() {
        return (int)4L;
    }
    public static int SC_MANAGER_LOCK() {
        return (int)8L;
    }
    public static int SC_MANAGER_QUERY_LOCK_STATUS() {
        return (int)16L;
    }
    public static int SC_MANAGER_MODIFY_BOOT_CONFIG() {
        return (int)32L;
    }
    public static int SERVICE_QUERY_CONFIG() {
        return (int)1L;
    }
    public static int SERVICE_CHANGE_CONFIG() {
        return (int)2L;
    }
    public static int SERVICE_QUERY_STATUS() {
        return (int)4L;
    }
    public static int SERVICE_ENUMERATE_DEPENDENTS() {
        return (int)8L;
    }
    public static int SERVICE_START() {
        return (int)16L;
    }
    public static int SERVICE_STOP() {
        return (int)32L;
    }
    public static int SERVICE_PAUSE_CONTINUE() {
        return (int)64L;
    }
    public static int SERVICE_INTERROGATE() {
        return (int)128L;
    }
    public static int SERVICE_USER_DEFINED_CONTROL() {
        return (int)256L;
    }
    public static int SERVICE_RUNS_IN_SYSTEM_PROCESS() {
        return (int)1L;
    }
    public static int SERVICE_CONFIG_DESCRIPTION() {
        return (int)1L;
    }
    public static int SERVICE_CONFIG_FAILURE_ACTIONS() {
        return (int)2L;
    }
    public static int SERVICE_CONFIG_DELAYED_AUTO_START_INFO() {
        return (int)3L;
    }
    public static int SERVICE_CONFIG_FAILURE_ACTIONS_FLAG() {
        return (int)4L;
    }
    public static int SERVICE_CONFIG_SERVICE_SID_INFO() {
        return (int)5L;
    }
    public static int SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO() {
        return (int)6L;
    }
    public static int SERVICE_CONFIG_PRESHUTDOWN_INFO() {
        return (int)7L;
    }
    public static int SERVICE_CONFIG_TRIGGER_INFO() {
        return (int)8L;
    }
    public static int SERVICE_CONFIG_PREFERRED_NODE() {
        return (int)9L;
    }
    public static int SERVICE_CONFIG_LAUNCH_PROTECTED() {
        return (int)12L;
    }
    public static int SERVICE_NOTIFY_STATUS_CHANGE_1() {
        return (int)1L;
    }
    public static int SERVICE_NOTIFY_STATUS_CHANGE_2() {
        return (int)2L;
    }
    public static int SERVICE_NOTIFY_STOPPED() {
        return (int)1L;
    }
    public static int SERVICE_NOTIFY_START_PENDING() {
        return (int)2L;
    }
    public static int SERVICE_NOTIFY_STOP_PENDING() {
        return (int)4L;
    }
    public static int SERVICE_NOTIFY_RUNNING() {
        return (int)8L;
    }
    public static int SERVICE_NOTIFY_CONTINUE_PENDING() {
        return (int)16L;
    }
    public static int SERVICE_NOTIFY_PAUSE_PENDING() {
        return (int)32L;
    }
    public static int SERVICE_NOTIFY_PAUSED() {
        return (int)64L;
    }
    public static int SERVICE_NOTIFY_CREATED() {
        return (int)128L;
    }
    public static int SERVICE_NOTIFY_DELETED() {
        return (int)256L;
    }
    public static int SERVICE_NOTIFY_DELETE_PENDING() {
        return (int)512L;
    }
    public static int SERVICE_STOP_REASON_FLAG_MIN() {
        return (int)0L;
    }
    public static int SERVICE_STOP_REASON_FLAG_UNPLANNED() {
        return (int)268435456L;
    }
    public static int SERVICE_STOP_REASON_FLAG_CUSTOM() {
        return (int)536870912L;
    }
    public static int SERVICE_STOP_REASON_FLAG_PLANNED() {
        return (int)1073741824L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_MIN() {
        return (int)0L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_OTHER() {
        return (int)65536L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_HARDWARE() {
        return (int)131072L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM() {
        return (int)196608L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_SOFTWARE() {
        return (int)262144L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_APPLICATION() {
        return (int)327680L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_NONE() {
        return (int)393216L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_MAX() {
        return (int)458752L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM() {
        return (int)4194304L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM() {
        return (int)16711680L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MIN() {
        return (int)0L;
    }
    public static int SERVICE_STOP_REASON_MINOR_OTHER() {
        return (int)1L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MAINTENANCE() {
        return (int)2L;
    }
    public static int SERVICE_STOP_REASON_MINOR_INSTALLATION() {
        return (int)3L;
    }
    public static int SERVICE_STOP_REASON_MINOR_UPGRADE() {
        return (int)4L;
    }
    public static int SERVICE_STOP_REASON_MINOR_RECONFIG() {
        return (int)5L;
    }
    public static int SERVICE_STOP_REASON_MINOR_HUNG() {
        return (int)6L;
    }
    public static int SERVICE_STOP_REASON_MINOR_UNSTABLE() {
        return (int)7L;
    }
    public static int SERVICE_STOP_REASON_MINOR_DISK() {
        return (int)8L;
    }
    public static int SERVICE_STOP_REASON_MINOR_NETWORKCARD() {
        return (int)9L;
    }
    public static int SERVICE_STOP_REASON_MINOR_ENVIRONMENT() {
        return (int)10L;
    }
    public static int SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER() {
        return (int)11L;
    }
    public static int SERVICE_STOP_REASON_MINOR_OTHERDRIVER() {
        return (int)12L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SERVICEPACK() {
        return (int)13L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE() {
        return (int)14L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SECURITYFIX() {
        return (int)15L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SECURITY() {
        return (int)16L;
    }
    public static int SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY() {
        return (int)17L;
    }
    public static int SERVICE_STOP_REASON_MINOR_WMI() {
        return (int)18L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL() {
        return (int)19L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL() {
        return (int)20L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL() {
        return (int)21L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MMC() {
        return (int)22L;
    }
    public static int SERVICE_STOP_REASON_MINOR_NONE() {
        return (int)23L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT() {
        return (int)24L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MAX() {
        return (int)25L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MIN_CUSTOM() {
        return (int)256L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MAX_CUSTOM() {
        return (int)65535L;
    }
    public static int SERVICE_CONTROL_STATUS_REASON_INFO() {
        return (int)1L;
    }
    public static int SERVICE_SID_TYPE_NONE() {
        return (int)0L;
    }
    public static int SERVICE_SID_TYPE_UNRESTRICTED() {
        return (int)1L;
    }
    public static int SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL() {
        return (int)1L;
    }
    public static int SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY() {
        return (int)2L;
    }
    public static int SERVICE_TRIGGER_TYPE_DOMAIN_JOIN() {
        return (int)3L;
    }
    public static int SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT() {
        return (int)4L;
    }
    public static int SERVICE_TRIGGER_TYPE_GROUP_POLICY() {
        return (int)5L;
    }
    public static int SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT() {
        return (int)6L;
    }
    public static int SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE() {
        return (int)7L;
    }
    public static int SERVICE_TRIGGER_TYPE_CUSTOM() {
        return (int)20L;
    }
    public static int SERVICE_TRIGGER_TYPE_AGGREGATE() {
        return (int)30L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_BINARY() {
        return (int)1L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_STRING() {
        return (int)2L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_LEVEL() {
        return (int)3L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY() {
        return (int)4L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL() {
        return (int)5L;
    }
    public static int SERVICE_START_REASON_DEMAND() {
        return (int)1L;
    }
    public static int SERVICE_START_REASON_AUTO() {
        return (int)2L;
    }
    public static int SERVICE_START_REASON_TRIGGER() {
        return (int)4L;
    }
    public static int SERVICE_START_REASON_RESTART_ON_FAILURE() {
        return (int)8L;
    }
    public static int SERVICE_START_REASON_DELAYEDAUTO() {
        return (int)16L;
    }
    public static int SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON() {
        return (int)1L;
    }
    public static int SERVICE_LAUNCH_PROTECTED_NONE() {
        return (int)0L;
    }
    public static int SERVICE_LAUNCH_PROTECTED_WINDOWS() {
        return (int)1L;
    }
    public static int SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT() {
        return (int)2L;
    }
    public static int SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT() {
        return (int)3L;
    }
    public static int SERVICE_TRIGGER_ACTION_SERVICE_START() {
        return (int)1L;
    }
    public static int SERVICE_TRIGGER_ACTION_SERVICE_STOP() {
        return (int)2L;
    }
    public static OfAddress PULONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSHORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSZ = Constants$root.C_POINTER$LAYOUT;
    public static OfInt BOOL = Constants$root.C_LONG$LAYOUT;
    public static OfFloat FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfAddress PFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBOOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBOOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfInt INT = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PUINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOID64 = Constants$root.C_POINTER$LAYOUT;
    public static OfByte CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt LONG = Constants$root.C_LONG$LAYOUT;
    public static OfInt INT$0 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NWPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZCH = Constants$root.C_POINTER$LAYOUT;
    public static OfByte TCHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress PTCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_AFFINITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HRESULT = Constants$root.C_LONG$LAYOUT;
    public static OfByte CCHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress PLCID = Constants$root.C_POINTER$LAYOUT;
    public static int UNSPECIFIED_COMPARTMENT_ID() {
        return (int)0L;
    }
    public static int DEFAULT_COMPARTMENT_ID() {
        return (int)1L;
    }
    public static OfAddress PCOMPARTMENT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFLOAT128 = Constants$root.C_POINTER$LAYOUT;
    public static OfLong LONGLONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLONGLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONGLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfLong USN = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    public static OfLong RTL_REFERENCE_COUNT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PRTL_REFERENCE_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfInt RTL_REFERENCE_COUNT32 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PRTL_REFERENCE_COUNT32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORDLONG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _rotl8$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotl8$MH,"_rotl8");
    }
    public static byte _rotl8 ( byte Value,  byte Shift) {
        var mh$ = _rotl8$MH();
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl16$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotl16$MH,"_rotl16");
    }
    public static short _rotl16 ( short Value,  byte Shift) {
        var mh$ = _rotl16$MH();
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr8$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotr8$MH,"_rotr8");
    }
    public static byte _rotr8 ( byte Value,  byte Shift) {
        var mh$ = _rotr8$MH();
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr16$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotr16$MH,"_rotr16");
    }
    public static short _rotr16 ( short Value,  byte Shift) {
        var mh$ = _rotr16$MH();
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotl$MH,"_rotl");
    }
    public static int _rotl ( int Value,  int Shift) {
        var mh$ = _rotl$MH();
        try {
            return (int)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl64$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotl64$MH,"_rotl64");
    }
    public static long _rotl64 ( long Value,  int Shift) {
        var mh$ = _rotl64$MH();
        try {
            return (long)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr$MH() {
        return RuntimeHelper.requireNonNull(constants$1._rotr$MH,"_rotr");
    }
    public static int _rotr ( int Value,  int Shift) {
        var mh$ = _rotr$MH();
        try {
            return (int)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr64$MH() {
        return RuntimeHelper.requireNonNull(constants$1._rotr64$MH,"_rotr64");
    }
    public static long _rotr64 ( long Value,  int Shift) {
        var mh$ = _rotr64$MH();
        try {
            return (long)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBOOLEAN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSINGLE_LIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKSPIN_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PM128A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_CET_U_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_AREA_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSTATE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_AMD64 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _bittest$MH() {
        return RuntimeHelper.requireNonNull(constants$2._bittest$MH,"_bittest");
    }
    public static byte _bittest ( Addressable Base,  int Offset) {
        var mh$ = _bittest$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement$MH() {
        return RuntimeHelper.requireNonNull(constants$2._bittestandcomplement$MH,"_bittestandcomplement");
    }
    public static byte _bittestandcomplement ( Addressable Base,  int Offset) {
        var mh$ = _bittestandcomplement$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$2._bittestandset$MH,"_bittestandset");
    }
    public static byte _bittestandset ( Addressable Base,  int Offset) {
        var mh$ = _bittestandset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$2._bittestandreset$MH,"_bittestandreset");
    }
    public static byte _bittestandreset ( Addressable Base,  int Offset) {
        var mh$ = _bittestandreset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$2._interlockedbittestandset$MH,"_interlockedbittestandset");
    }
    public static byte _interlockedbittestandset ( Addressable Base,  int Offset) {
        var mh$ = _interlockedbittestandset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$2._interlockedbittestandreset$MH,"_interlockedbittestandreset");
    }
    public static byte _interlockedbittestandreset ( Addressable Base,  int Offset) {
        var mh$ = _interlockedbittestandreset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittest64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._bittest64$MH,"_bittest64");
    }
    public static byte _bittest64 ( Addressable Base,  long Offset) {
        var mh$ = _bittest64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._bittestandcomplement64$MH,"_bittestandcomplement64");
    }
    public static byte _bittestandcomplement64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandcomplement64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._bittestandset64$MH,"_bittestandset64");
    }
    public static byte _bittestandset64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._bittestandreset64$MH,"_bittestandreset64");
    }
    public static byte _bittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._interlockedbittestandset64$MH,"_interlockedbittestandset64");
    }
    public static byte _interlockedbittestandset64 ( Addressable Base,  long Offset) {
        var mh$ = _interlockedbittestandset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._interlockedbittestandreset64$MH,"_interlockedbittestandreset64");
    }
    public static byte _interlockedbittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = _interlockedbittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_clflush$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_clflush$MH,"_mm_clflush");
    }
    public static void _mm_clflush ( Addressable Address) {
        var mh$ = _mm_clflush$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_lfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_lfence$MH,"_mm_lfence");
    }
    public static void _mm_lfence () {
        var mh$ = _mm_lfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_mfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_mfence$MH,"_mm_mfence");
    }
    public static void _mm_mfence () {
        var mh$ = _mm_mfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_sfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_sfence$MH,"_mm_sfence");
    }
    public static void _mm_sfence () {
        var mh$ = _mm_sfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_pause$MH,"_mm_pause");
    }
    public static void _mm_pause () {
        var mh$ = _mm_pause$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


