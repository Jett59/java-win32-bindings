// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface EXCEPTION_ROUTINE {

    int apply(java.lang.foreign.MemoryAddress ExceptionRecord, java.lang.foreign.MemoryAddress EstablisherFrame, java.lang.foreign.MemoryAddress ContextRecord, java.lang.foreign.MemoryAddress DispatcherContext);
    static MemorySegment allocate(EXCEPTION_ROUTINE fi, MemorySession session) {
        return RuntimeHelper.upcallStub(EXCEPTION_ROUTINE.class, fi, constants$1.EXCEPTION_ROUTINE$FUNC, session);
    }
    static EXCEPTION_ROUTINE ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _ExceptionRecord, java.lang.foreign.MemoryAddress _EstablisherFrame, java.lang.foreign.MemoryAddress _ContextRecord, java.lang.foreign.MemoryAddress _DispatcherContext) -> {
            try {
                return (int)constants$1.EXCEPTION_ROUTINE$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_ExceptionRecord, (java.lang.foreign.Addressable)_EstablisherFrame, (java.lang.foreign.Addressable)_ContextRecord, (java.lang.foreign.Addressable)_DispatcherContext);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


