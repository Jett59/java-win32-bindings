// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class READER_SEL_RESPONSE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbReaderNameOffset"),
        Constants$root.C_LONG$LAYOUT.withName("cchReaderNameLength"),
        Constants$root.C_LONG$LAYOUT.withName("cbCardNameOffset"),
        Constants$root.C_LONG$LAYOUT.withName("cchCardNameLength")
    );
    public static MemoryLayout $LAYOUT() {
        return READER_SEL_RESPONSE.$struct$LAYOUT;
    }
    static final VarHandle cbReaderNameOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbReaderNameOffset"));
    public static VarHandle cbReaderNameOffset$VH() {
        return READER_SEL_RESPONSE.cbReaderNameOffset$VH;
    }
    public static int cbReaderNameOffset$get(MemorySegment seg) {
        return (int)READER_SEL_RESPONSE.cbReaderNameOffset$VH.get(seg);
    }
    public static void cbReaderNameOffset$set( MemorySegment seg, int x) {
        READER_SEL_RESPONSE.cbReaderNameOffset$VH.set(seg, x);
    }
    public static int cbReaderNameOffset$get(MemorySegment seg, long index) {
        return (int)READER_SEL_RESPONSE.cbReaderNameOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbReaderNameOffset$set(MemorySegment seg, long index, int x) {
        READER_SEL_RESPONSE.cbReaderNameOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cchReaderNameLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cchReaderNameLength"));
    public static VarHandle cchReaderNameLength$VH() {
        return READER_SEL_RESPONSE.cchReaderNameLength$VH;
    }
    public static int cchReaderNameLength$get(MemorySegment seg) {
        return (int)READER_SEL_RESPONSE.cchReaderNameLength$VH.get(seg);
    }
    public static void cchReaderNameLength$set( MemorySegment seg, int x) {
        READER_SEL_RESPONSE.cchReaderNameLength$VH.set(seg, x);
    }
    public static int cchReaderNameLength$get(MemorySegment seg, long index) {
        return (int)READER_SEL_RESPONSE.cchReaderNameLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cchReaderNameLength$set(MemorySegment seg, long index, int x) {
        READER_SEL_RESPONSE.cchReaderNameLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbCardNameOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbCardNameOffset"));
    public static VarHandle cbCardNameOffset$VH() {
        return READER_SEL_RESPONSE.cbCardNameOffset$VH;
    }
    public static int cbCardNameOffset$get(MemorySegment seg) {
        return (int)READER_SEL_RESPONSE.cbCardNameOffset$VH.get(seg);
    }
    public static void cbCardNameOffset$set( MemorySegment seg, int x) {
        READER_SEL_RESPONSE.cbCardNameOffset$VH.set(seg, x);
    }
    public static int cbCardNameOffset$get(MemorySegment seg, long index) {
        return (int)READER_SEL_RESPONSE.cbCardNameOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbCardNameOffset$set(MemorySegment seg, long index, int x) {
        READER_SEL_RESPONSE.cbCardNameOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cchCardNameLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cchCardNameLength"));
    public static VarHandle cchCardNameLength$VH() {
        return READER_SEL_RESPONSE.cchCardNameLength$VH;
    }
    public static int cchCardNameLength$get(MemorySegment seg) {
        return (int)READER_SEL_RESPONSE.cchCardNameLength$VH.get(seg);
    }
    public static void cchCardNameLength$set( MemorySegment seg, int x) {
        READER_SEL_RESPONSE.cchCardNameLength$VH.set(seg, x);
    }
    public static int cchCardNameLength$get(MemorySegment seg, long index) {
        return (int)READER_SEL_RESPONSE.cchCardNameLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cchCardNameLength$set(MemorySegment seg, long index, int x) {
        READER_SEL_RESPONSE.cchCardNameLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


