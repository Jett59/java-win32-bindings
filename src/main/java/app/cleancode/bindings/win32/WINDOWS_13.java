// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class WINDOWS_13 extends WINDOWS_12 {

    public static OfAddress PNEWTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPNEWTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNEWTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPELARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPELARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPELARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGBRUSH32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGBRUSH32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGBRUSH32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPATTERN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPATTERN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPATTERN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGPEN32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGPEN32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGPEN32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPALETTEENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPALETTEENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPANOSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVMODEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEVMODEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEVMODEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVMODEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEVMODEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEVMODEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEVMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEVMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPLAY_DEVICEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISPLAY_DEVICEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPLAY_DEVICEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISPLAY_DEVICEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPLAY_DEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISPLAY_DEVICE = Constants$root.C_POINTER$LAYOUT;
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15() {
        return (int)0L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI() {
        return (int)5L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS() {
        return (int)6L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN() {
        return (int)8L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI() {
        return (int)9L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL() {
        return (int)10L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED() {
        return (int)11L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL() {
        return (int)12L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED() {
        return (int)13L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE() {
        return (int)14L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST() {
        return (int)15L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED() {
        return (int)16L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL() {
        return (int)17L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL() {
        return (int)-2147483648L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED() {
        return (int)0L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_SCALING_IDENTITY() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_SCALING_CENTERED() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_SCALING_STRETCHED() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_SCALING_CUSTOM() {
        return (int)5L;
    }
    public static int DISPLAYCONFIG_SCALING_PREFERRED() {
        return (int)128L;
    }
    public static int DISPLAYCONFIG_SCALING_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_ROTATION_IDENTITY() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_ROTATION_ROTATE90() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_ROTATION_ROTATE180() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_ROTATION_ROTATE270() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_ROTATION_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_TARGET() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_8BPP() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_16BPP() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_24BPP() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_32BPP() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_NONGDI() {
        return (int)5L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_INTERNAL() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_CLONE() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_EXTEND() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_EXTERNAL() {
        return (int)8L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE() {
        return (int)5L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE() {
        return (int)6L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION() {
        return (int)7L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION() {
        return (int)8L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO() {
        return (int)9L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE() {
        return (int)10L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL() {
        return (int)11L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_RGB() {
        return (int)0L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR444() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR422() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR420() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_INTENSITY() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32() {
        return (int)-1L;
    }
    public static OfAddress PRGNDATAHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRGNDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRGNDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRGNDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PABC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPABC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPABC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PABCFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPABCFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPABCFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POUTLINETEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPOUTLINETEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTLINETEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POUTLINETEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPOUTLINETEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTLINETEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POUTLINETEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPOUTLINETEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTLINETEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOLYTEXTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOLYTEXTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOLYTEXTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOLYTEXTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOLYTEXTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOLYTEXTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOLYTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOLYTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOLYTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMAT2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGLYPHMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOINTFX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTTPOLYCURVE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTTPOLYGONHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGCP_RESULTSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGCP_RESULTSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGCP_RESULTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRASTERIZER_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPIXELFORMATDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPIXELFORMATDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AddFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$263.AddFontResourceA$MH,"AddFontResourceA");
    }
    public static int AddFontResourceA ( Addressable x0) {
        var mh$ = AddFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$263.AddFontResourceW$MH,"AddFontResourceW");
    }
    public static int AddFontResourceW ( Addressable x0) {
        var mh$ = AddFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnimatePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$264.AnimatePalette$MH,"AnimatePalette");
    }
    public static int AnimatePalette ( Addressable hPal,  int iStartIndex,  int cEntries,  Addressable ppe) {
        var mh$ = AnimatePalette$MH();
        try {
            return (int)mh$.invokeExact(hPal, iStartIndex, cEntries, ppe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Arc$MH() {
        return RuntimeHelper.requireNonNull(constants$264.Arc$MH,"Arc");
    }
    public static int Arc ( Addressable hdc,  int x1,  int y1,  int x2,  int y2,  int x3,  int y3,  int x4,  int y4) {
        var mh$ = Arc$MH();
        try {
            return (int)mh$.invokeExact(hdc, x1, y1, x2, y2, x3, y3, x4, y4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BitBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$264.BitBlt$MH,"BitBlt");
    }
    public static int BitBlt ( Addressable hdc,  int x,  int y,  int cx,  int cy,  Addressable hdcSrc,  int x1,  int y1,  int rop) {
        var mh$ = BitBlt$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, cx, cy, hdcSrc, x1, y1, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelDC$MH() {
        return RuntimeHelper.requireNonNull(constants$264.CancelDC$MH,"CancelDC");
    }
    public static int CancelDC ( Addressable hdc) {
        var mh$ = CancelDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Chord$MH() {
        return RuntimeHelper.requireNonNull(constants$264.Chord$MH,"Chord");
    }
    public static int Chord ( Addressable hdc,  int x1,  int y1,  int x2,  int y2,  int x3,  int y3,  int x4,  int y4) {
        var mh$ = Chord$MH();
        try {
            return (int)mh$.invokeExact(hdc, x1, y1, x2, y2, x3, y3, x4, y4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChoosePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$264.ChoosePixelFormat$MH,"ChoosePixelFormat");
    }
    public static int ChoosePixelFormat ( Addressable hdc,  Addressable ppfd) {
        var mh$ = ChoosePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$265.CloseMetaFile$MH,"CloseMetaFile");
    }
    public static MemoryAddress CloseMetaFile ( Addressable hdc) {
        var mh$ = CloseMetaFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CombineRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$265.CombineRgn$MH,"CombineRgn");
    }
    public static int CombineRgn ( Addressable hrgnDst,  Addressable hrgnSrc1,  Addressable hrgnSrc2,  int iMode) {
        var mh$ = CombineRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgnDst, hrgnSrc1, hrgnSrc2, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$265.CopyMetaFileA$MH,"CopyMetaFileA");
    }
    public static MemoryAddress CopyMetaFileA ( Addressable x0,  Addressable x1) {
        var mh$ = CopyMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$265.CopyMetaFileW$MH,"CopyMetaFileW");
    }
    public static MemoryAddress CopyMetaFileW ( Addressable x0,  Addressable x1) {
        var mh$ = CopyMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$265.CreateBitmap$MH,"CreateBitmap");
    }
    public static MemoryAddress CreateBitmap ( int nWidth,  int nHeight,  int nPlanes,  int nBitCount,  Addressable lpBits) {
        var mh$ = CreateBitmap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nWidth, nHeight, nPlanes, nBitCount, lpBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBitmapIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$265.CreateBitmapIndirect$MH,"CreateBitmapIndirect");
    }
    public static MemoryAddress CreateBitmapIndirect ( Addressable pbm) {
        var mh$ = CreateBitmapIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pbm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBrushIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$266.CreateBrushIndirect$MH,"CreateBrushIndirect");
    }
    public static MemoryAddress CreateBrushIndirect ( Addressable plbrush) {
        var mh$ = CreateBrushIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(plbrush);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCompatibleBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$266.CreateCompatibleBitmap$MH,"CreateCompatibleBitmap");
    }
    public static MemoryAddress CreateCompatibleBitmap ( Addressable hdc,  int cx,  int cy) {
        var mh$ = CreateCompatibleBitmap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, cx, cy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDiscardableBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$266.CreateDiscardableBitmap$MH,"CreateDiscardableBitmap");
    }
    public static MemoryAddress CreateDiscardableBitmap ( Addressable hdc,  int cx,  int cy) {
        var mh$ = CreateDiscardableBitmap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, cx, cy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCompatibleDC$MH() {
        return RuntimeHelper.requireNonNull(constants$266.CreateCompatibleDC$MH,"CreateCompatibleDC");
    }
    public static MemoryAddress CreateCompatibleDC ( Addressable hdc) {
        var mh$ = CreateCompatibleDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDCA$MH() {
        return RuntimeHelper.requireNonNull(constants$266.CreateDCA$MH,"CreateDCA");
    }
    public static MemoryAddress CreateDCA ( Addressable pwszDriver,  Addressable pwszDevice,  Addressable pszPort,  Addressable pdm) {
        var mh$ = CreateDCA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszDriver, pwszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDCW$MH() {
        return RuntimeHelper.requireNonNull(constants$266.CreateDCW$MH,"CreateDCW");
    }
    public static MemoryAddress CreateDCW ( Addressable pwszDriver,  Addressable pwszDevice,  Addressable pszPort,  Addressable pdm) {
        var mh$ = CreateDCW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszDriver, pwszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$267.CreateDIBitmap$MH,"CreateDIBitmap");
    }
    public static MemoryAddress CreateDIBitmap ( Addressable hdc,  Addressable pbmih,  int flInit,  Addressable pjBits,  Addressable pbmi,  int iUsage) {
        var mh$ = CreateDIBitmap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, pbmih, flInit, pjBits, pbmi, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBPatternBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$267.CreateDIBPatternBrush$MH,"CreateDIBPatternBrush");
    }
    public static MemoryAddress CreateDIBPatternBrush ( Addressable h,  int iUsage) {
        var mh$ = CreateDIBPatternBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(h, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBPatternBrushPt$MH() {
        return RuntimeHelper.requireNonNull(constants$267.CreateDIBPatternBrushPt$MH,"CreateDIBPatternBrushPt");
    }
    public static MemoryAddress CreateDIBPatternBrushPt ( Addressable lpPackedDIB,  int iUsage) {
        var mh$ = CreateDIBPatternBrushPt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpPackedDIB, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEllipticRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$267.CreateEllipticRgn$MH,"CreateEllipticRgn");
    }
    public static MemoryAddress CreateEllipticRgn ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = CreateEllipticRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEllipticRgnIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$267.CreateEllipticRgnIndirect$MH,"CreateEllipticRgnIndirect");
    }
    public static MemoryAddress CreateEllipticRgnIndirect ( Addressable lprect) {
        var mh$ = CreateEllipticRgnIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectA$MH() {
        return RuntimeHelper.requireNonNull(constants$267.CreateFontIndirectA$MH,"CreateFontIndirectA");
    }
    public static MemoryAddress CreateFontIndirectA ( Addressable lplf) {
        var mh$ = CreateFontIndirectA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectW$MH() {
        return RuntimeHelper.requireNonNull(constants$268.CreateFontIndirectW$MH,"CreateFontIndirectW");
    }
    public static MemoryAddress CreateFontIndirectW ( Addressable lplf) {
        var mh$ = CreateFontIndirectW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$268.CreateFontA$MH,"CreateFontA");
    }
    public static MemoryAddress CreateFontA ( int cHeight,  int cWidth,  int cEscapement,  int cOrientation,  int cWeight,  int bItalic,  int bUnderline,  int bStrikeOut,  int iCharSet,  int iOutPrecision,  int iClipPrecision,  int iQuality,  int iPitchAndFamily,  Addressable pszFaceName) {
        var mh$ = CreateFontA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, pszFaceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$268.CreateFontW$MH,"CreateFontW");
    }
    public static MemoryAddress CreateFontW ( int cHeight,  int cWidth,  int cEscapement,  int cOrientation,  int cWeight,  int bItalic,  int bUnderline,  int bStrikeOut,  int iCharSet,  int iOutPrecision,  int iClipPrecision,  int iQuality,  int iPitchAndFamily,  Addressable pszFaceName) {
        var mh$ = CreateFontW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, pszFaceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHatchBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$268.CreateHatchBrush$MH,"CreateHatchBrush");
    }
    public static MemoryAddress CreateHatchBrush ( int iHatch,  int color) {
        var mh$ = CreateHatchBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iHatch, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateICA$MH() {
        return RuntimeHelper.requireNonNull(constants$268.CreateICA$MH,"CreateICA");
    }
    public static MemoryAddress CreateICA ( Addressable pszDriver,  Addressable pszDevice,  Addressable pszPort,  Addressable pdm) {
        var mh$ = CreateICA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszDriver, pszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateICW$MH() {
        return RuntimeHelper.requireNonNull(constants$268.CreateICW$MH,"CreateICW");
    }
    public static MemoryAddress CreateICW ( Addressable pszDriver,  Addressable pszDevice,  Addressable pszPort,  Addressable pdm) {
        var mh$ = CreateICW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszDriver, pszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$269.CreateMetaFileA$MH,"CreateMetaFileA");
    }
    public static MemoryAddress CreateMetaFileA ( Addressable pszFile) {
        var mh$ = CreateMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$269.CreateMetaFileW$MH,"CreateMetaFileW");
    }
    public static MemoryAddress CreateMetaFileW ( Addressable pszFile) {
        var mh$ = CreateMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$269.CreatePalette$MH,"CreatePalette");
    }
    public static MemoryAddress CreatePalette ( Addressable plpal) {
        var mh$ = CreatePalette$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(plpal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePen$MH() {
        return RuntimeHelper.requireNonNull(constants$269.CreatePen$MH,"CreatePen");
    }
    public static MemoryAddress CreatePen ( int iStyle,  int cWidth,  int color) {
        var mh$ = CreatePen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iStyle, cWidth, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePenIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$269.CreatePenIndirect$MH,"CreatePenIndirect");
    }
    public static MemoryAddress CreatePenIndirect ( Addressable plpen) {
        var mh$ = CreatePenIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(plpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePolyPolygonRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$269.CreatePolyPolygonRgn$MH,"CreatePolyPolygonRgn");
    }
    public static MemoryAddress CreatePolyPolygonRgn ( Addressable pptl,  Addressable pc,  int cPoly,  int iMode) {
        var mh$ = CreatePolyPolygonRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pptl, pc, cPoly, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePatternBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$270.CreatePatternBrush$MH,"CreatePatternBrush");
    }
    public static MemoryAddress CreatePatternBrush ( Addressable hbm) {
        var mh$ = CreatePatternBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hbm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$270.CreateRectRgn$MH,"CreateRectRgn");
    }
    public static MemoryAddress CreateRectRgn ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = CreateRectRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRectRgnIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$270.CreateRectRgnIndirect$MH,"CreateRectRgnIndirect");
    }
    public static MemoryAddress CreateRectRgnIndirect ( Addressable lprect) {
        var mh$ = CreateRectRgnIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRoundRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$270.CreateRoundRectRgn$MH,"CreateRoundRectRgn");
    }
    public static MemoryAddress CreateRoundRectRgn ( int x1,  int y1,  int x2,  int y2,  int w,  int h) {
        var mh$ = CreateRoundRectRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x1, y1, x2, y2, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateScalableFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$270.CreateScalableFontResourceA$MH,"CreateScalableFontResourceA");
    }
    public static int CreateScalableFontResourceA ( int fdwHidden,  Addressable lpszFont,  Addressable lpszFile,  Addressable lpszPath) {
        var mh$ = CreateScalableFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(fdwHidden, lpszFont, lpszFile, lpszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateScalableFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$270.CreateScalableFontResourceW$MH,"CreateScalableFontResourceW");
    }
    public static int CreateScalableFontResourceW ( int fdwHidden,  Addressable lpszFont,  Addressable lpszFile,  Addressable lpszPath) {
        var mh$ = CreateScalableFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(fdwHidden, lpszFont, lpszFile, lpszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSolidBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$271.CreateSolidBrush$MH,"CreateSolidBrush");
    }
    public static MemoryAddress CreateSolidBrush ( int color) {
        var mh$ = CreateSolidBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteDC$MH() {
        return RuntimeHelper.requireNonNull(constants$271.DeleteDC$MH,"DeleteDC");
    }
    public static int DeleteDC ( Addressable hdc) {
        var mh$ = DeleteDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$271.DeleteMetaFile$MH,"DeleteMetaFile");
    }
    public static int DeleteMetaFile ( Addressable hmf) {
        var mh$ = DeleteMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteObject$MH() {
        return RuntimeHelper.requireNonNull(constants$271.DeleteObject$MH,"DeleteObject");
    }
    public static int DeleteObject ( Addressable ho) {
        var mh$ = DeleteObject$MH();
        try {
            return (int)mh$.invokeExact(ho);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DescribePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$271.DescribePixelFormat$MH,"DescribePixelFormat");
    }
    public static int DescribePixelFormat ( Addressable hdc,  int iPixelFormat,  int nBytes,  Addressable ppfd) {
        var mh$ = DescribePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, iPixelFormat, nBytes, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceCapabilitiesA$MH() {
        return RuntimeHelper.requireNonNull(constants$272.DeviceCapabilitiesA$MH,"DeviceCapabilitiesA");
    }
    public static int DeviceCapabilitiesA ( Addressable pDevice,  Addressable pPort,  short fwCapability,  Addressable pOutput,  Addressable pDevMode) {
        var mh$ = DeviceCapabilitiesA$MH();
        try {
            return (int)mh$.invokeExact(pDevice, pPort, fwCapability, pOutput, pDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceCapabilitiesW$MH() {
        return RuntimeHelper.requireNonNull(constants$272.DeviceCapabilitiesW$MH,"DeviceCapabilitiesW");
    }
    public static int DeviceCapabilitiesW ( Addressable pDevice,  Addressable pPort,  short fwCapability,  Addressable pOutput,  Addressable pDevMode) {
        var mh$ = DeviceCapabilitiesW$MH();
        try {
            return (int)mh$.invokeExact(pDevice, pPort, fwCapability, pOutput, pDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEscape$MH() {
        return RuntimeHelper.requireNonNull(constants$272.DrawEscape$MH,"DrawEscape");
    }
    public static int DrawEscape ( Addressable hdc,  int iEscape,  int cjIn,  Addressable lpIn) {
        var mh$ = DrawEscape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjIn, lpIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ellipse$MH() {
        return RuntimeHelper.requireNonNull(constants$273.Ellipse$MH,"Ellipse");
    }
    public static int Ellipse ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = Ellipse$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EnumFontFamiliesExA$MH,"EnumFontFamiliesExA");
    }
    public static int EnumFontFamiliesExA ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam,  int dwFlags) {
        var mh$ = EnumFontFamiliesExA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EnumFontFamiliesExW$MH,"EnumFontFamiliesExW");
    }
    public static int EnumFontFamiliesExW ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam,  int dwFlags) {
        var mh$ = EnumFontFamiliesExW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesA$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EnumFontFamiliesA$MH,"EnumFontFamiliesA");
    }
    public static int EnumFontFamiliesA ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam) {
        var mh$ = EnumFontFamiliesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesW$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EnumFontFamiliesW$MH,"EnumFontFamiliesW");
    }
    public static int EnumFontFamiliesW ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam) {
        var mh$ = EnumFontFamiliesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontsA$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EnumFontsA$MH,"EnumFontsA");
    }
    public static int EnumFontsA ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam) {
        var mh$ = EnumFontsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontsW$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EnumFontsW$MH,"EnumFontsW");
    }
    public static int EnumFontsW ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam) {
        var mh$ = EnumFontsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EnumObjects$MH,"EnumObjects");
    }
    public static int EnumObjects ( Addressable hdc,  int nType,  Addressable lpFunc,  long lParam) {
        var mh$ = EnumObjects$MH();
        try {
            return (int)mh$.invokeExact(hdc, nType, lpFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EqualRgn$MH,"EqualRgn");
    }
    public static int EqualRgn ( Addressable hrgn1,  Addressable hrgn2) {
        var mh$ = EqualRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn1, hrgn2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Escape$MH() {
        return RuntimeHelper.requireNonNull(constants$274.Escape$MH,"Escape");
    }
    public static int Escape ( Addressable hdc,  int iEscape,  int cjIn,  Addressable pvIn,  Addressable pvOut) {
        var mh$ = Escape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjIn, pvIn, pvOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtEscape$MH() {
        return RuntimeHelper.requireNonNull(constants$274.ExtEscape$MH,"ExtEscape");
    }
    public static int ExtEscape ( Addressable hdc,  int iEscape,  int cjInput,  Addressable lpInData,  int cjOutput,  Addressable lpOutData) {
        var mh$ = ExtEscape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjInput, lpInData, cjOutput, lpOutData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExcludeClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$274.ExcludeClipRect$MH,"ExcludeClipRect");
    }
    public static int ExcludeClipRect ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = ExcludeClipRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtCreateRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$275.ExtCreateRegion$MH,"ExtCreateRegion");
    }
    public static MemoryAddress ExtCreateRegion ( Addressable lpx,  int nCount,  Addressable lpData) {
        var mh$ = ExtCreateRegion$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpx, nCount, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtFloodFill$MH() {
        return RuntimeHelper.requireNonNull(constants$275.ExtFloodFill$MH,"ExtFloodFill");
    }
    public static int ExtFloodFill ( Addressable hdc,  int x,  int y,  int color,  int type) {
        var mh$ = ExtFloodFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$275.FillRgn$MH,"FillRgn");
    }
    public static int FillRgn ( Addressable hdc,  Addressable hrgn,  Addressable hbr) {
        var mh$ = FillRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, hbr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FloodFill$MH() {
        return RuntimeHelper.requireNonNull(constants$275.FloodFill$MH,"FloodFill");
    }
    public static int FloodFill ( Addressable hdc,  int x,  int y,  int color) {
        var mh$ = FloodFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FrameRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$275.FrameRgn$MH,"FrameRgn");
    }
    public static int FrameRgn ( Addressable hdc,  Addressable hrgn,  Addressable hbr,  int w,  int h) {
        var mh$ = FrameRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, hbr, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetROP2$MH() {
        return RuntimeHelper.requireNonNull(constants$275.GetROP2$MH,"GetROP2");
    }
    public static int GetROP2 ( Addressable hdc) {
        var mh$ = GetROP2$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAspectRatioFilterEx$MH() {
        return RuntimeHelper.requireNonNull(constants$276.GetAspectRatioFilterEx$MH,"GetAspectRatioFilterEx");
    }
    public static int GetAspectRatioFilterEx ( Addressable hdc,  Addressable lpsize) {
        var mh$ = GetAspectRatioFilterEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBkColor$MH() {
        return RuntimeHelper.requireNonNull(constants$276.GetBkColor$MH,"GetBkColor");
    }
    public static int GetBkColor ( Addressable hdc) {
        var mh$ = GetBkColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCBrushColor$MH() {
        return RuntimeHelper.requireNonNull(constants$276.GetDCBrushColor$MH,"GetDCBrushColor");
    }
    public static int GetDCBrushColor ( Addressable hdc) {
        var mh$ = GetDCBrushColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCPenColor$MH() {
        return RuntimeHelper.requireNonNull(constants$276.GetDCPenColor$MH,"GetDCPenColor");
    }
    public static int GetDCPenColor ( Addressable hdc) {
        var mh$ = GetDCPenColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBkMode$MH() {
        return RuntimeHelper.requireNonNull(constants$276.GetBkMode$MH,"GetBkMode");
    }
    public static int GetBkMode ( Addressable hdc) {
        var mh$ = GetBkMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBitmapBits$MH() {
        return RuntimeHelper.requireNonNull(constants$276.GetBitmapBits$MH,"GetBitmapBits");
    }
    public static int GetBitmapBits ( Addressable hbit,  int cb,  Addressable lpvBits) {
        var mh$ = GetBitmapBits$MH();
        try {
            return (int)mh$.invokeExact(hbit, cb, lpvBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBitmapDimensionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$277.GetBitmapDimensionEx$MH,"GetBitmapDimensionEx");
    }
    public static int GetBitmapDimensionEx ( Addressable hbit,  Addressable lpsize) {
        var mh$ = GetBitmapDimensionEx$MH();
        try {
            return (int)mh$.invokeExact(hbit, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBoundsRect$MH() {
        return RuntimeHelper.requireNonNull(constants$277.GetBoundsRect$MH,"GetBoundsRect");
    }
    public static int GetBoundsRect ( Addressable hdc,  Addressable lprect,  int flags) {
        var mh$ = GetBoundsRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$277.GetBrushOrgEx$MH,"GetBrushOrgEx");
    }
    public static int GetBrushOrgEx ( Addressable hdc,  Addressable lppt) {
        var mh$ = GetBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthA$MH() {
        return RuntimeHelper.requireNonNull(constants$277.GetCharWidthA$MH,"GetCharWidthA");
    }
    public static int GetCharWidthA ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidthA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthW$MH() {
        return RuntimeHelper.requireNonNull(constants$277.GetCharWidthW$MH,"GetCharWidthW");
    }
    public static int GetCharWidthW ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidthW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidth32A$MH() {
        return RuntimeHelper.requireNonNull(constants$277.GetCharWidth32A$MH,"GetCharWidth32A");
    }
    public static int GetCharWidth32A ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidth32A$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidth32W$MH() {
        return RuntimeHelper.requireNonNull(constants$278.GetCharWidth32W$MH,"GetCharWidth32W");
    }
    public static int GetCharWidth32W ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidth32W$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthFloatA$MH() {
        return RuntimeHelper.requireNonNull(constants$278.GetCharWidthFloatA$MH,"GetCharWidthFloatA");
    }
    public static int GetCharWidthFloatA ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidthFloatA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthFloatW$MH() {
        return RuntimeHelper.requireNonNull(constants$278.GetCharWidthFloatW$MH,"GetCharWidthFloatW");
    }
    public static int GetCharWidthFloatW ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidthFloatW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsA$MH() {
        return RuntimeHelper.requireNonNull(constants$278.GetCharABCWidthsA$MH,"GetCharABCWidthsA");
    }
    public static int GetCharABCWidthsA ( Addressable hdc,  int wFirst,  int wLast,  Addressable lpABC) {
        var mh$ = GetCharABCWidthsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, wFirst, wLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsW$MH() {
        return RuntimeHelper.requireNonNull(constants$278.GetCharABCWidthsW$MH,"GetCharABCWidthsW");
    }
    public static int GetCharABCWidthsW ( Addressable hdc,  int wFirst,  int wLast,  Addressable lpABC) {
        var mh$ = GetCharABCWidthsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, wFirst, wLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsFloatA$MH() {
        return RuntimeHelper.requireNonNull(constants$278.GetCharABCWidthsFloatA$MH,"GetCharABCWidthsFloatA");
    }
    public static int GetCharABCWidthsFloatA ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpABC) {
        var mh$ = GetCharABCWidthsFloatA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsFloatW$MH() {
        return RuntimeHelper.requireNonNull(constants$279.GetCharABCWidthsFloatW$MH,"GetCharABCWidthsFloatW");
    }
    public static int GetCharABCWidthsFloatW ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpABC) {
        var mh$ = GetCharABCWidthsFloatW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipBox$MH() {
        return RuntimeHelper.requireNonNull(constants$279.GetClipBox$MH,"GetClipBox");
    }
    public static int GetClipBox ( Addressable hdc,  Addressable lprect) {
        var mh$ = GetClipBox$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$279.GetClipRgn$MH,"GetClipRgn");
    }
    public static int GetClipRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = GetClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$279.GetMetaRgn$MH,"GetMetaRgn");
    }
    public static int GetMetaRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = GetMetaRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentObject$MH() {
        return RuntimeHelper.requireNonNull(constants$279.GetCurrentObject$MH,"GetCurrentObject");
    }
    public static MemoryAddress GetCurrentObject ( Addressable hdc,  int type) {
        var mh$ = GetCurrentObject$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentPositionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$279.GetCurrentPositionEx$MH,"GetCurrentPositionEx");
    }
    public static int GetCurrentPositionEx ( Addressable hdc,  Addressable lppt) {
        var mh$ = GetCurrentPositionEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDeviceCaps$MH() {
        return RuntimeHelper.requireNonNull(constants$280.GetDeviceCaps$MH,"GetDeviceCaps");
    }
    public static int GetDeviceCaps ( Addressable hdc,  int index) {
        var mh$ = GetDeviceCaps$MH();
        try {
            return (int)mh$.invokeExact(hdc, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$280.GetDIBits$MH,"GetDIBits");
    }
    public static int GetDIBits ( Addressable hdc,  Addressable hbm,  int start,  int cLines,  Addressable lpvBits,  Addressable lpbmi,  int usage) {
        var mh$ = GetDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbm, start, cLines, lpvBits, lpbmi, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFontData$MH() {
        return RuntimeHelper.requireNonNull(constants$280.GetFontData$MH,"GetFontData");
    }
    public static int GetFontData ( Addressable hdc,  int dwTable,  int dwOffset,  Addressable pvBuffer,  int cjBuffer) {
        var mh$ = GetFontData$MH();
        try {
            return (int)mh$.invokeExact(hdc, dwTable, dwOffset, pvBuffer, cjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphOutlineA$MH() {
        return RuntimeHelper.requireNonNull(constants$280.GetGlyphOutlineA$MH,"GetGlyphOutlineA");
    }
    public static int GetGlyphOutlineA ( Addressable hdc,  int uChar,  int fuFormat,  Addressable lpgm,  int cjBuffer,  Addressable pvBuffer,  Addressable lpmat2) {
        var mh$ = GetGlyphOutlineA$MH();
        try {
            return (int)mh$.invokeExact(hdc, uChar, fuFormat, lpgm, cjBuffer, pvBuffer, lpmat2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphOutlineW$MH() {
        return RuntimeHelper.requireNonNull(constants$280.GetGlyphOutlineW$MH,"GetGlyphOutlineW");
    }
    public static int GetGlyphOutlineW ( Addressable hdc,  int uChar,  int fuFormat,  Addressable lpgm,  int cjBuffer,  Addressable pvBuffer,  Addressable lpmat2) {
        var mh$ = GetGlyphOutlineW$MH();
        try {
            return (int)mh$.invokeExact(hdc, uChar, fuFormat, lpgm, cjBuffer, pvBuffer, lpmat2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGraphicsMode$MH() {
        return RuntimeHelper.requireNonNull(constants$280.GetGraphicsMode$MH,"GetGraphicsMode");
    }
    public static int GetGraphicsMode ( Addressable hdc) {
        var mh$ = GetGraphicsMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMapMode$MH() {
        return RuntimeHelper.requireNonNull(constants$281.GetMapMode$MH,"GetMapMode");
    }
    public static int GetMapMode ( Addressable hdc) {
        var mh$ = GetMapMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileBitsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$281.GetMetaFileBitsEx$MH,"GetMetaFileBitsEx");
    }
    public static int GetMetaFileBitsEx ( Addressable hMF,  int cbBuffer,  Addressable lpData) {
        var mh$ = GetMetaFileBitsEx$MH();
        try {
            return (int)mh$.invokeExact(hMF, cbBuffer, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$281.GetMetaFileA$MH,"GetMetaFileA");
    }
    public static MemoryAddress GetMetaFileA ( Addressable lpName) {
        var mh$ = GetMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$281.GetMetaFileW$MH,"GetMetaFileW");
    }
    public static MemoryAddress GetMetaFileW ( Addressable lpName) {
        var mh$ = GetMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNearestColor$MH() {
        return RuntimeHelper.requireNonNull(constants$281.GetNearestColor$MH,"GetNearestColor");
    }
    public static int GetNearestColor ( Addressable hdc,  int color) {
        var mh$ = GetNearestColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNearestPaletteIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$281.GetNearestPaletteIndex$MH,"GetNearestPaletteIndex");
    }
    public static int GetNearestPaletteIndex ( Addressable h,  int color) {
        var mh$ = GetNearestPaletteIndex$MH();
        try {
            return (int)mh$.invokeExact(h, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectType$MH() {
        return RuntimeHelper.requireNonNull(constants$282.GetObjectType$MH,"GetObjectType");
    }
    public static int GetObjectType ( Addressable h) {
        var mh$ = GetObjectType$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOutlineTextMetricsA$MH() {
        return RuntimeHelper.requireNonNull(constants$282.GetOutlineTextMetricsA$MH,"GetOutlineTextMetricsA");
    }
    public static int GetOutlineTextMetricsA ( Addressable hdc,  int cjCopy,  Addressable potm) {
        var mh$ = GetOutlineTextMetricsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, cjCopy, potm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOutlineTextMetricsW$MH() {
        return RuntimeHelper.requireNonNull(constants$282.GetOutlineTextMetricsW$MH,"GetOutlineTextMetricsW");
    }
    public static int GetOutlineTextMetricsW ( Addressable hdc,  int cjCopy,  Addressable potm) {
        var mh$ = GetOutlineTextMetricsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, cjCopy, potm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$282.GetPaletteEntries$MH,"GetPaletteEntries");
    }
    public static int GetPaletteEntries ( Addressable hpal,  int iStart,  int cEntries,  Addressable pPalEntries) {
        var mh$ = GetPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hpal, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$282.GetPixel$MH,"GetPixel");
    }
    public static int GetPixel ( Addressable hdc,  int x,  int y) {
        var mh$ = GetPixel$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$282.GetPixelFormat$MH,"GetPixelFormat");
    }
    public static int GetPixelFormat ( Addressable hdc) {
        var mh$ = GetPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPolyFillMode$MH() {
        return RuntimeHelper.requireNonNull(constants$283.GetPolyFillMode$MH,"GetPolyFillMode");
    }
    public static int GetPolyFillMode ( Addressable hdc) {
        var mh$ = GetPolyFillMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRasterizerCaps$MH() {
        return RuntimeHelper.requireNonNull(constants$283.GetRasterizerCaps$MH,"GetRasterizerCaps");
    }
    public static int GetRasterizerCaps ( Addressable lpraststat,  int cjBytes) {
        var mh$ = GetRasterizerCaps$MH();
        try {
            return (int)mh$.invokeExact(lpraststat, cjBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRandomRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$283.GetRandomRgn$MH,"GetRandomRgn");
    }
    public static int GetRandomRgn ( Addressable hdc,  Addressable hrgn,  int i) {
        var mh$ = GetRandomRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRegionData$MH() {
        return RuntimeHelper.requireNonNull(constants$283.GetRegionData$MH,"GetRegionData");
    }
    public static int GetRegionData ( Addressable hrgn,  int nCount,  Addressable lpRgnData) {
        var mh$ = GetRegionData$MH();
        try {
            return (int)mh$.invokeExact(hrgn, nCount, lpRgnData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRgnBox$MH() {
        return RuntimeHelper.requireNonNull(constants$283.GetRgnBox$MH,"GetRgnBox");
    }
    public static int GetRgnBox ( Addressable hrgn,  Addressable lprc) {
        var mh$ = GetRgnBox$MH();
        try {
            return (int)mh$.invokeExact(hrgn, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStockObject$MH() {
        return RuntimeHelper.requireNonNull(constants$283.GetStockObject$MH,"GetStockObject");
    }
    public static MemoryAddress GetStockObject ( int i) {
        var mh$ = GetStockObject$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStretchBltMode$MH() {
        return RuntimeHelper.requireNonNull(constants$284.GetStretchBltMode$MH,"GetStretchBltMode");
    }
    public static int GetStretchBltMode ( Addressable hdc) {
        var mh$ = GetStretchBltMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$284.GetSystemPaletteEntries$MH,"GetSystemPaletteEntries");
    }
    public static int GetSystemPaletteEntries ( Addressable hdc,  int iStart,  int cEntries,  Addressable pPalEntries) {
        var mh$ = GetSystemPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPaletteUse$MH() {
        return RuntimeHelper.requireNonNull(constants$284.GetSystemPaletteUse$MH,"GetSystemPaletteUse");
    }
    public static int GetSystemPaletteUse ( Addressable hdc) {
        var mh$ = GetSystemPaletteUse$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharacterExtra$MH() {
        return RuntimeHelper.requireNonNull(constants$284.GetTextCharacterExtra$MH,"GetTextCharacterExtra");
    }
    public static int GetTextCharacterExtra ( Addressable hdc) {
        var mh$ = GetTextCharacterExtra$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextAlign$MH() {
        return RuntimeHelper.requireNonNull(constants$284.GetTextAlign$MH,"GetTextAlign");
    }
    public static int GetTextAlign ( Addressable hdc) {
        var mh$ = GetTextAlign$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextColor$MH() {
        return RuntimeHelper.requireNonNull(constants$284.GetTextColor$MH,"GetTextColor");
    }
    public static int GetTextColor ( Addressable hdc) {
        var mh$ = GetTextColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$285.GetTextExtentPointA$MH,"GetTextExtentPointA");
    }
    public static int GetTextExtentPointA ( Addressable hdc,  Addressable lpString,  int c,  Addressable lpsz) {
        var mh$ = GetTextExtentPointA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$285.GetTextExtentPointW$MH,"GetTextExtentPointW");
    }
    public static int GetTextExtentPointW ( Addressable hdc,  Addressable lpString,  int c,  Addressable lpsz) {
        var mh$ = GetTextExtentPointW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPoint32A$MH() {
        return RuntimeHelper.requireNonNull(constants$285.GetTextExtentPoint32A$MH,"GetTextExtentPoint32A");
    }
    public static int GetTextExtentPoint32A ( Addressable hdc,  Addressable lpString,  int c,  Addressable psizl) {
        var mh$ = GetTextExtentPoint32A$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, psizl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPoint32W$MH() {
        return RuntimeHelper.requireNonNull(constants$285.GetTextExtentPoint32W$MH,"GetTextExtentPoint32W");
    }
    public static int GetTextExtentPoint32W ( Addressable hdc,  Addressable lpString,  int c,  Addressable psizl) {
        var mh$ = GetTextExtentPoint32W$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, psizl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$285.GetTextExtentExPointA$MH,"GetTextExtentExPointA");
    }
    public static int GetTextExtentExPointA ( Addressable hdc,  Addressable lpszString,  int cchString,  int nMaxExtent,  Addressable lpnFit,  Addressable lpnDx,  Addressable lpSize) {
        var mh$ = GetTextExtentExPointA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpszString, cchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$285.GetTextExtentExPointW$MH,"GetTextExtentExPointW");
    }
    public static int GetTextExtentExPointW ( Addressable hdc,  Addressable lpszString,  int cchString,  int nMaxExtent,  Addressable lpnFit,  Addressable lpnDx,  Addressable lpSize) {
        var mh$ = GetTextExtentExPointW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpszString, cchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharset$MH() {
        return RuntimeHelper.requireNonNull(constants$286.GetTextCharset$MH,"GetTextCharset");
    }
    public static int GetTextCharset ( Addressable hdc) {
        var mh$ = GetTextCharset$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharsetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$286.GetTextCharsetInfo$MH,"GetTextCharsetInfo");
    }
    public static int GetTextCharsetInfo ( Addressable hdc,  Addressable lpSig,  int dwFlags) {
        var mh$ = GetTextCharsetInfo$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpSig, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateCharsetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$286.TranslateCharsetInfo$MH,"TranslateCharsetInfo");
    }
    public static int TranslateCharsetInfo ( Addressable lpSrc,  Addressable lpCs,  int dwFlags) {
        var mh$ = TranslateCharsetInfo$MH();
        try {
            return (int)mh$.invokeExact(lpSrc, lpCs, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFontLanguageInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$286.GetFontLanguageInfo$MH,"GetFontLanguageInfo");
    }
    public static int GetFontLanguageInfo ( Addressable hdc) {
        var mh$ = GetFontLanguageInfo$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharacterPlacementA$MH() {
        return RuntimeHelper.requireNonNull(constants$286.GetCharacterPlacementA$MH,"GetCharacterPlacementA");
    }
    public static int GetCharacterPlacementA ( Addressable hdc,  Addressable lpString,  int nCount,  int nMexExtent,  Addressable lpResults,  int dwFlags) {
        var mh$ = GetCharacterPlacementA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, nCount, nMexExtent, lpResults, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharacterPlacementW$MH() {
        return RuntimeHelper.requireNonNull(constants$286.GetCharacterPlacementW$MH,"GetCharacterPlacementW");
    }
    public static int GetCharacterPlacementW ( Addressable hdc,  Addressable lpString,  int nCount,  int nMexExtent,  Addressable lpResults,  int dwFlags) {
        var mh$ = GetCharacterPlacementW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, nCount, nMexExtent, lpResults, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWCRANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWCRANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGLYPHSET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGLYPHSET = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetFontUnicodeRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$287.GetFontUnicodeRanges$MH,"GetFontUnicodeRanges");
    }
    public static int GetFontUnicodeRanges ( Addressable hdc,  Addressable lpgs) {
        var mh$ = GetFontUnicodeRanges$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpgs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphIndicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$287.GetGlyphIndicesA$MH,"GetGlyphIndicesA");
    }
    public static int GetGlyphIndicesA ( Addressable hdc,  Addressable lpstr,  int c,  Addressable pgi,  int fl) {
        var mh$ = GetGlyphIndicesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpstr, c, pgi, fl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphIndicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$287.GetGlyphIndicesW$MH,"GetGlyphIndicesW");
    }
    public static int GetGlyphIndicesW ( Addressable hdc,  Addressable lpstr,  int c,  Addressable pgi,  int fl) {
        var mh$ = GetGlyphIndicesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpstr, c, pgi, fl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointI$MH() {
        return RuntimeHelper.requireNonNull(constants$287.GetTextExtentPointI$MH,"GetTextExtentPointI");
    }
    public static int GetTextExtentPointI ( Addressable hdc,  Addressable pgiIn,  int cgi,  Addressable psize) {
        var mh$ = GetTextExtentPointI$MH();
        try {
            return (int)mh$.invokeExact(hdc, pgiIn, cgi, psize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointI$MH() {
        return RuntimeHelper.requireNonNull(constants$287.GetTextExtentExPointI$MH,"GetTextExtentExPointI");
    }
    public static int GetTextExtentExPointI ( Addressable hdc,  Addressable lpwszString,  int cwchString,  int nMaxExtent,  Addressable lpnFit,  Addressable lpnDx,  Addressable lpSize) {
        var mh$ = GetTextExtentExPointI$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpwszString, cwchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthI$MH() {
        return RuntimeHelper.requireNonNull(constants$287.GetCharWidthI$MH,"GetCharWidthI");
    }
    public static int GetCharWidthI ( Addressable hdc,  int giFirst,  int cgi,  Addressable pgi,  Addressable piWidths) {
        var mh$ = GetCharWidthI$MH();
        try {
            return (int)mh$.invokeExact(hdc, giFirst, cgi, pgi, piWidths);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsI$MH() {
        return RuntimeHelper.requireNonNull(constants$288.GetCharABCWidthsI$MH,"GetCharABCWidthsI");
    }
    public static int GetCharABCWidthsI ( Addressable hdc,  int giFirst,  int cgi,  Addressable pgi,  Addressable pabc) {
        var mh$ = GetCharABCWidthsI$MH();
        try {
            return (int)mh$.invokeExact(hdc, giFirst, cgi, pgi, pabc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDESIGNVECTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDESIGNVECTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AddFontResourceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$288.AddFontResourceExA$MH,"AddFontResourceExA");
    }
    public static int AddFontResourceExA ( Addressable name,  int fl,  Addressable res) {
        var mh$ = AddFontResourceExA$MH();
        try {
            return (int)mh$.invokeExact(name, fl, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$288.AddFontResourceExW$MH,"AddFontResourceExW");
    }
    public static int AddFontResourceExW ( Addressable name,  int fl,  Addressable res) {
        var mh$ = AddFontResourceExW$MH();
        try {
            return (int)mh$.invokeExact(name, fl, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$288.RemoveFontResourceExA$MH,"RemoveFontResourceExA");
    }
    public static int RemoveFontResourceExA ( Addressable name,  int fl,  Addressable pdv) {
        var mh$ = RemoveFontResourceExA$MH();
        try {
            return (int)mh$.invokeExact(name, fl, pdv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$288.RemoveFontResourceExW$MH,"RemoveFontResourceExW");
    }
    public static int RemoveFontResourceExW ( Addressable name,  int fl,  Addressable pdv) {
        var mh$ = RemoveFontResourceExW$MH();
        try {
            return (int)mh$.invokeExact(name, fl, pdv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontMemResourceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$288.AddFontMemResourceEx$MH,"AddFontMemResourceEx");
    }
    public static MemoryAddress AddFontMemResourceEx ( Addressable pFileView,  int cjSize,  Addressable pvResrved,  Addressable pNumFonts) {
        var mh$ = AddFontMemResourceEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pFileView, cjSize, pvResrved, pNumFonts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontMemResourceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$289.RemoveFontMemResourceEx$MH,"RemoveFontMemResourceEx");
    }
    public static int RemoveFontMemResourceEx ( Addressable h) {
        var mh$ = RemoveFontMemResourceEx$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PAXISINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXISINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXISINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXISINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXISINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXISINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLISTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLISTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLISTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLISTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDVA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDVA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDVW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDVW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDV = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateFontIndirectExA$MH() {
        return RuntimeHelper.requireNonNull(constants$289.CreateFontIndirectExA$MH,"CreateFontIndirectExA");
    }
    public static MemoryAddress CreateFontIndirectExA ( Addressable x0) {
        var mh$ = CreateFontIndirectExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectExW$MH() {
        return RuntimeHelper.requireNonNull(constants$289.CreateFontIndirectExW$MH,"CreateFontIndirectExW");
    }
    public static MemoryAddress CreateFontIndirectExW ( Addressable x0) {
        var mh$ = CreateFontIndirectExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PENUMTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$289.GetViewportExtEx$MH,"GetViewportExtEx");
    }
    public static int GetViewportExtEx ( Addressable hdc,  Addressable lpsize) {
        var mh$ = GetViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$289.GetViewportOrgEx$MH,"GetViewportOrgEx");
    }
    public static int GetViewportOrgEx ( Addressable hdc,  Addressable lppoint) {
        var mh$ = GetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$289.GetWindowExtEx$MH,"GetWindowExtEx");
    }
    public static int GetWindowExtEx ( Addressable hdc,  Addressable lpsize) {
        var mh$ = GetWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$290.GetWindowOrgEx$MH,"GetWindowOrgEx");
    }
    public static int GetWindowOrgEx ( Addressable hdc,  Addressable lppoint) {
        var mh$ = GetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IntersectClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$290.IntersectClipRect$MH,"IntersectClipRect");
    }
    public static int IntersectClipRect ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = IntersectClipRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvertRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$290.InvertRgn$MH,"InvertRgn");
    }
    public static int InvertRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = InvertRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LineDDA$MH() {
        return RuntimeHelper.requireNonNull(constants$290.LineDDA$MH,"LineDDA");
    }
    public static int LineDDA ( int xStart,  int yStart,  int xEnd,  int yEnd,  Addressable lpProc,  long data) {
        var mh$ = LineDDA$MH();
        try {
            return (int)mh$.invokeExact(xStart, yStart, xEnd, yEnd, lpProc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LineTo$MH() {
        return RuntimeHelper.requireNonNull(constants$290.LineTo$MH,"LineTo");
    }
    public static int LineTo ( Addressable hdc,  int x,  int y) {
        var mh$ = LineTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MaskBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$290.MaskBlt$MH,"MaskBlt");
    }
    public static int MaskBlt ( Addressable hdcDest,  int xDest,  int yDest,  int width,  int height,  Addressable hdcSrc,  int xSrc,  int ySrc,  Addressable hbmMask,  int xMask,  int yMask,  int rop) {
        var mh$ = MaskBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xDest, yDest, width, height, hdcSrc, xSrc, ySrc, hbmMask, xMask, yMask, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlgBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$291.PlgBlt$MH,"PlgBlt");
    }
    public static int PlgBlt ( Addressable hdcDest,  Addressable lpPoint,  Addressable hdcSrc,  int xSrc,  int ySrc,  int width,  int height,  Addressable hbmMask,  int xMask,  int yMask) {
        var mh$ = PlgBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, lpPoint, hdcSrc, xSrc, ySrc, width, height, hbmMask, xMask, yMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$291.OffsetClipRgn$MH,"OffsetClipRgn");
    }
    public static int OffsetClipRgn ( Addressable hdc,  int x,  int y) {
        var mh$ = OffsetClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$291.OffsetRgn$MH,"OffsetRgn");
    }
    public static int OffsetRgn ( Addressable hrgn,  int x,  int y) {
        var mh$ = OffsetRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PatBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$291.PatBlt$MH,"PatBlt");
    }
    public static int PatBlt ( Addressable hdc,  int x,  int y,  int w,  int h,  int rop) {
        var mh$ = PatBlt$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, w, h, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Pie$MH() {
        return RuntimeHelper.requireNonNull(constants$291.Pie$MH,"Pie");
    }
    public static int Pie ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int xr1,  int yr1,  int xr2,  int yr2) {
        var mh$ = Pie$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$291.PlayMetaFile$MH,"PlayMetaFile");
    }
    public static int PlayMetaFile ( Addressable hdc,  Addressable hmf) {
        var mh$ = PlayMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PaintRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$292.PaintRgn$MH,"PaintRgn");
    }
    public static int PaintRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = PaintRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$292.PolyPolygon$MH,"PolyPolygon");
    }
    public static int PolyPolygon ( Addressable hdc,  Addressable apt,  Addressable asz,  int csz) {
        var mh$ = PolyPolygon$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, asz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$292.PtInRegion$MH,"PtInRegion");
    }
    public static int PtInRegion ( Addressable hrgn,  int x,  int y) {
        var mh$ = PtInRegion$MH();
        try {
            return (int)mh$.invokeExact(hrgn, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$292.PtVisible$MH,"PtVisible");
    }
    public static int PtVisible ( Addressable hdc,  int x,  int y) {
        var mh$ = PtVisible$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RectInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$292.RectInRegion$MH,"RectInRegion");
    }
    public static int RectInRegion ( Addressable hrgn,  Addressable lprect) {
        var mh$ = RectInRegion$MH();
        try {
            return (int)mh$.invokeExact(hrgn, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RectVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$292.RectVisible$MH,"RectVisible");
    }
    public static int RectVisible ( Addressable hdc,  Addressable lprect) {
        var mh$ = RectVisible$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Rectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$293.Rectangle$MH,"Rectangle");
    }
    public static int Rectangle ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = Rectangle$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreDC$MH() {
        return RuntimeHelper.requireNonNull(constants$293.RestoreDC$MH,"RestoreDC");
    }
    public static int RestoreDC ( Addressable hdc,  int nSavedDC) {
        var mh$ = RestoreDC$MH();
        try {
            return (int)mh$.invokeExact(hdc, nSavedDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetDCA$MH() {
        return RuntimeHelper.requireNonNull(constants$293.ResetDCA$MH,"ResetDCA");
    }
    public static MemoryAddress ResetDCA ( Addressable hdc,  Addressable lpdm) {
        var mh$ = ResetDCA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetDCW$MH() {
        return RuntimeHelper.requireNonNull(constants$293.ResetDCW$MH,"ResetDCW");
    }
    public static MemoryAddress ResetDCW ( Addressable hdc,  Addressable lpdm) {
        var mh$ = ResetDCW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealizePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$293.RealizePalette$MH,"RealizePalette");
    }
    public static int RealizePalette ( Addressable hdc) {
        var mh$ = RealizePalette$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$293.RemoveFontResourceA$MH,"RemoveFontResourceA");
    }
    public static int RemoveFontResourceA ( Addressable lpFileName) {
        var mh$ = RemoveFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$294.RemoveFontResourceW$MH,"RemoveFontResourceW");
    }
    public static int RemoveFontResourceW ( Addressable lpFileName) {
        var mh$ = RemoveFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RoundRect$MH() {
        return RuntimeHelper.requireNonNull(constants$294.RoundRect$MH,"RoundRect");
    }
    public static int RoundRect ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int width,  int height) {
        var mh$ = RoundRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResizePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$294.ResizePalette$MH,"ResizePalette");
    }
    public static int ResizePalette ( Addressable hpal,  int n) {
        var mh$ = ResizePalette$MH();
        try {
            return (int)mh$.invokeExact(hpal, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SaveDC$MH() {
        return RuntimeHelper.requireNonNull(constants$294.SaveDC$MH,"SaveDC");
    }
    public static int SaveDC ( Addressable hdc) {
        var mh$ = SaveDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$294.SelectClipRgn$MH,"SelectClipRgn");
    }
    public static int SelectClipRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = SelectClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtSelectClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$294.ExtSelectClipRgn$MH,"ExtSelectClipRgn");
    }
    public static int ExtSelectClipRgn ( Addressable hdc,  Addressable hrgn,  int mode) {
        var mh$ = ExtSelectClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMetaRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$295.SetMetaRgn$MH,"SetMetaRgn");
    }
    public static int SetMetaRgn ( Addressable hdc) {
        var mh$ = SetMetaRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectObject$MH() {
        return RuntimeHelper.requireNonNull(constants$295.SelectObject$MH,"SelectObject");
    }
    public static MemoryAddress SelectObject ( Addressable hdc,  Addressable h) {
        var mh$ = SelectObject$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$295.SelectPalette$MH,"SelectPalette");
    }
    public static MemoryAddress SelectPalette ( Addressable hdc,  Addressable hPal,  int bForceBkgd) {
        var mh$ = SelectPalette$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, hPal, bForceBkgd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBkColor$MH() {
        return RuntimeHelper.requireNonNull(constants$295.SetBkColor$MH,"SetBkColor");
    }
    public static int SetBkColor ( Addressable hdc,  int color) {
        var mh$ = SetBkColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDCBrushColor$MH() {
        return RuntimeHelper.requireNonNull(constants$295.SetDCBrushColor$MH,"SetDCBrushColor");
    }
    public static int SetDCBrushColor ( Addressable hdc,  int color) {
        var mh$ = SetDCBrushColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDCPenColor$MH() {
        return RuntimeHelper.requireNonNull(constants$295.SetDCPenColor$MH,"SetDCPenColor");
    }
    public static int SetDCPenColor ( Addressable hdc,  int color) {
        var mh$ = SetDCPenColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBkMode$MH() {
        return RuntimeHelper.requireNonNull(constants$296.SetBkMode$MH,"SetBkMode");
    }
    public static int SetBkMode ( Addressable hdc,  int mode) {
        var mh$ = SetBkMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBitmapBits$MH() {
        return RuntimeHelper.requireNonNull(constants$296.SetBitmapBits$MH,"SetBitmapBits");
    }
    public static int SetBitmapBits ( Addressable hbm,  int cb,  Addressable pvBits) {
        var mh$ = SetBitmapBits$MH();
        try {
            return (int)mh$.invokeExact(hbm, cb, pvBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBoundsRect$MH() {
        return RuntimeHelper.requireNonNull(constants$296.SetBoundsRect$MH,"SetBoundsRect");
    }
    public static int SetBoundsRect ( Addressable hdc,  Addressable lprect,  int flags) {
        var mh$ = SetBoundsRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$296.SetDIBits$MH,"SetDIBits");
    }
    public static int SetDIBits ( Addressable hdc,  Addressable hbm,  int start,  int cLines,  Addressable lpBits,  Addressable lpbmi,  int ColorUse) {
        var mh$ = SetDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbm, start, cLines, lpBits, lpbmi, ColorUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBitsToDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$296.SetDIBitsToDevice$MH,"SetDIBitsToDevice");
    }
    public static int SetDIBitsToDevice ( Addressable hdc,  int xDest,  int yDest,  int w,  int h,  int xSrc,  int ySrc,  int StartScan,  int cLines,  Addressable lpvBits,  Addressable lpbmi,  int ColorUse) {
        var mh$ = SetDIBitsToDevice$MH();
        try {
            return (int)mh$.invokeExact(hdc, xDest, yDest, w, h, xSrc, ySrc, StartScan, cLines, lpvBits, lpbmi, ColorUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMapperFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$296.SetMapperFlags$MH,"SetMapperFlags");
    }
    public static int SetMapperFlags ( Addressable hdc,  int flags) {
        var mh$ = SetMapperFlags$MH();
        try {
            return (int)mh$.invokeExact(hdc, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetGraphicsMode$MH() {
        return RuntimeHelper.requireNonNull(constants$297.SetGraphicsMode$MH,"SetGraphicsMode");
    }
    public static int SetGraphicsMode ( Addressable hdc,  int iMode) {
        var mh$ = SetGraphicsMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMapMode$MH() {
        return RuntimeHelper.requireNonNull(constants$297.SetMapMode$MH,"SetMapMode");
    }
    public static int SetMapMode ( Addressable hdc,  int iMode) {
        var mh$ = SetMapMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$297.SetLayout$MH,"SetLayout");
    }
    public static int SetLayout ( Addressable hdc,  int l) {
        var mh$ = SetLayout$MH();
        try {
            return (int)mh$.invokeExact(hdc, l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$297.GetLayout$MH,"GetLayout");
    }
    public static int GetLayout ( Addressable hdc) {
        var mh$ = GetLayout$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMetaFileBitsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$297.SetMetaFileBitsEx$MH,"SetMetaFileBitsEx");
    }
    public static MemoryAddress SetMetaFileBitsEx ( int cbBuffer,  Addressable lpData) {
        var mh$ = SetMetaFileBitsEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cbBuffer, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$297.SetPaletteEntries$MH,"SetPaletteEntries");
    }
    public static int SetPaletteEntries ( Addressable hpal,  int iStart,  int cEntries,  Addressable pPalEntries) {
        var mh$ = SetPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hpal, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$298.SetPixel$MH,"SetPixel");
    }
    public static int SetPixel ( Addressable hdc,  int x,  int y,  int color) {
        var mh$ = SetPixel$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelV$MH() {
        return RuntimeHelper.requireNonNull(constants$298.SetPixelV$MH,"SetPixelV");
    }
    public static int SetPixelV ( Addressable hdc,  int x,  int y,  int color) {
        var mh$ = SetPixelV$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$298.SetPixelFormat$MH,"SetPixelFormat");
    }
    public static int SetPixelFormat ( Addressable hdc,  int format,  Addressable ppfd) {
        var mh$ = SetPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, format, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPolyFillMode$MH() {
        return RuntimeHelper.requireNonNull(constants$298.SetPolyFillMode$MH,"SetPolyFillMode");
    }
    public static int SetPolyFillMode ( Addressable hdc,  int mode) {
        var mh$ = SetPolyFillMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StretchBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$298.StretchBlt$MH,"StretchBlt");
    }
    public static int StretchBlt ( Addressable hdcDest,  int xDest,  int yDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xSrc,  int ySrc,  int wSrc,  int hSrc,  int rop) {
        var mh$ = StretchBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xDest, yDest, wDest, hDest, hdcSrc, xSrc, ySrc, wSrc, hSrc, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$298.SetRectRgn$MH,"SetRectRgn");
    }
    public static int SetRectRgn ( Addressable hrgn,  int left,  int top,  int right,  int bottom) {
        var mh$ = SetRectRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StretchDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$299.StretchDIBits$MH,"StretchDIBits");
    }
    public static int StretchDIBits ( Addressable hdc,  int xDest,  int yDest,  int DestWidth,  int DestHeight,  int xSrc,  int ySrc,  int SrcWidth,  int SrcHeight,  Addressable lpBits,  Addressable lpbmi,  int iUsage,  int rop) {
        var mh$ = StretchDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, xDest, yDest, DestWidth, DestHeight, xSrc, ySrc, SrcWidth, SrcHeight, lpBits, lpbmi, iUsage, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetROP2$MH() {
        return RuntimeHelper.requireNonNull(constants$299.SetROP2$MH,"SetROP2");
    }
    public static int SetROP2 ( Addressable hdc,  int rop2) {
        var mh$ = SetROP2$MH();
        try {
            return (int)mh$.invokeExact(hdc, rop2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStretchBltMode$MH() {
        return RuntimeHelper.requireNonNull(constants$299.SetStretchBltMode$MH,"SetStretchBltMode");
    }
    public static int SetStretchBltMode ( Addressable hdc,  int mode) {
        var mh$ = SetStretchBltMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemPaletteUse$MH() {
        return RuntimeHelper.requireNonNull(constants$299.SetSystemPaletteUse$MH,"SetSystemPaletteUse");
    }
    public static int SetSystemPaletteUse ( Addressable hdc,  int use) {
        var mh$ = SetSystemPaletteUse$MH();
        try {
            return (int)mh$.invokeExact(hdc, use);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextCharacterExtra$MH() {
        return RuntimeHelper.requireNonNull(constants$299.SetTextCharacterExtra$MH,"SetTextCharacterExtra");
    }
    public static int SetTextCharacterExtra ( Addressable hdc,  int extra) {
        var mh$ = SetTextCharacterExtra$MH();
        try {
            return (int)mh$.invokeExact(hdc, extra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextColor$MH() {
        return RuntimeHelper.requireNonNull(constants$299.SetTextColor$MH,"SetTextColor");
    }
    public static int SetTextColor ( Addressable hdc,  int color) {
        var mh$ = SetTextColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextAlign$MH() {
        return RuntimeHelper.requireNonNull(constants$300.SetTextAlign$MH,"SetTextAlign");
    }
    public static int SetTextAlign ( Addressable hdc,  int align) {
        var mh$ = SetTextAlign$MH();
        try {
            return (int)mh$.invokeExact(hdc, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextJustification$MH() {
        return RuntimeHelper.requireNonNull(constants$300.SetTextJustification$MH,"SetTextJustification");
    }
    public static int SetTextJustification ( Addressable hdc,  int extra,  int count) {
        var mh$ = SetTextJustification$MH();
        try {
            return (int)mh$.invokeExact(hdc, extra, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateColors$MH() {
        return RuntimeHelper.requireNonNull(constants$300.UpdateColors$MH,"UpdateColors");
    }
    public static int UpdateColors ( Addressable hdc) {
        var mh$ = UpdateColors$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTRIVERTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTRIVERTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGRADIENT_TRIANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGRADIENT_TRIANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGRADIENT_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGRADIENT_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBLENDFUNCTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$300.AlphaBlend$MH,"AlphaBlend");
    }
    public static int AlphaBlend ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  MemorySegment ftn) {
        var mh$ = AlphaBlend$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransparentBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$300.TransparentBlt$MH,"TransparentBlt");
    }
    public static int TransparentBlt ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  int crTransparent) {
        var mh$ = TransparentBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GradientFill$MH() {
        return RuntimeHelper.requireNonNull(constants$300.GradientFill$MH,"GradientFill");
    }
    public static int GradientFill ( Addressable hdc,  Addressable pVertex,  int nVertex,  Addressable pMesh,  int nMesh,  int ulMode) {
        var mh$ = GradientFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, pVertex, nVertex, pMesh, nMesh, ulMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiAlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GdiAlphaBlend$MH,"GdiAlphaBlend");
    }
    public static int GdiAlphaBlend ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  MemorySegment ftn) {
        var mh$ = GdiAlphaBlend$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiTransparentBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GdiTransparentBlt$MH,"GdiTransparentBlt");
    }
    public static int GdiTransparentBlt ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  int crTransparent) {
        var mh$ = GdiTransparentBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiGradientFill$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GdiGradientFill$MH,"GdiGradientFill");
    }
    public static int GdiGradientFill ( Addressable hdc,  Addressable pVertex,  int nVertex,  Addressable pMesh,  int nCount,  int ulMode) {
        var mh$ = GdiGradientFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, pVertex, nVertex, pMesh, nCount, ulMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMetaFileRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$301.PlayMetaFileRecord$MH,"PlayMetaFileRecord");
    }
    public static int PlayMetaFileRecord ( Addressable hdc,  Addressable lpHandleTable,  Addressable lpMR,  int noObjs) {
        var mh$ = PlayMetaFileRecord$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpHandleTable, lpMR, noObjs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$302.EnumMetaFile$MH,"EnumMetaFile");
    }
    public static int EnumMetaFile ( Addressable hdc,  Addressable hmf,  Addressable proc,  long param) {
        var mh$ = EnumMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$302.CloseEnhMetaFile$MH,"CloseEnhMetaFile");
    }
    public static MemoryAddress CloseEnhMetaFile ( Addressable hdc) {
        var mh$ = CloseEnhMetaFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$302.CopyEnhMetaFileA$MH,"CopyEnhMetaFileA");
    }
    public static MemoryAddress CopyEnhMetaFileA ( Addressable hEnh,  Addressable lpFileName) {
        var mh$ = CopyEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hEnh, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$302.CopyEnhMetaFileW$MH,"CopyEnhMetaFileW");
    }
    public static MemoryAddress CopyEnhMetaFileW ( Addressable hEnh,  Addressable lpFileName) {
        var mh$ = CopyEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hEnh, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$303.CreateEnhMetaFileA$MH,"CreateEnhMetaFileA");
    }
    public static MemoryAddress CreateEnhMetaFileA ( Addressable hdc,  Addressable lpFilename,  Addressable lprc,  Addressable lpDesc) {
        var mh$ = CreateEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpFilename, lprc, lpDesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$303.CreateEnhMetaFileW$MH,"CreateEnhMetaFileW");
    }
    public static MemoryAddress CreateEnhMetaFileW ( Addressable hdc,  Addressable lpFilename,  Addressable lprc,  Addressable lpDesc) {
        var mh$ = CreateEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpFilename, lprc, lpDesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$303.DeleteEnhMetaFile$MH,"DeleteEnhMetaFile");
    }
    public static int DeleteEnhMetaFile ( Addressable hmf) {
        var mh$ = DeleteEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$303.EnumEnhMetaFile$MH,"EnumEnhMetaFile");
    }
    public static int EnumEnhMetaFile ( Addressable hdc,  Addressable hmf,  Addressable proc,  Addressable param,  Addressable lpRect) {
        var mh$ = EnumEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, proc, param, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$303.GetEnhMetaFileA$MH,"GetEnhMetaFileA");
    }
    public static MemoryAddress GetEnhMetaFileA ( Addressable lpName) {
        var mh$ = GetEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$303.GetEnhMetaFileW$MH,"GetEnhMetaFileW");
    }
    public static MemoryAddress GetEnhMetaFileW ( Addressable lpName) {
        var mh$ = GetEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$304.GetEnhMetaFileBits$MH,"GetEnhMetaFileBits");
    }
    public static int GetEnhMetaFileBits ( Addressable hEMF,  int nSize,  Addressable lpData) {
        var mh$ = GetEnhMetaFileBits$MH();
        try {
            return (int)mh$.invokeExact(hEMF, nSize, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$304.GetEnhMetaFileDescriptionA$MH,"GetEnhMetaFileDescriptionA");
    }
    public static int GetEnhMetaFileDescriptionA ( Addressable hemf,  int cchBuffer,  Addressable lpDescription) {
        var mh$ = GetEnhMetaFileDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(hemf, cchBuffer, lpDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$304.GetEnhMetaFileDescriptionW$MH,"GetEnhMetaFileDescriptionW");
    }
    public static int GetEnhMetaFileDescriptionW ( Addressable hemf,  int cchBuffer,  Addressable lpDescription) {
        var mh$ = GetEnhMetaFileDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(hemf, cchBuffer, lpDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$304.GetEnhMetaFileHeader$MH,"GetEnhMetaFileHeader");
    }
    public static int GetEnhMetaFileHeader ( Addressable hemf,  int nSize,  Addressable lpEnhMetaHeader) {
        var mh$ = GetEnhMetaFileHeader$MH();
        try {
            return (int)mh$.invokeExact(hemf, nSize, lpEnhMetaHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFilePaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$304.GetEnhMetaFilePaletteEntries$MH,"GetEnhMetaFilePaletteEntries");
    }
    public static int GetEnhMetaFilePaletteEntries ( Addressable hemf,  int nNumEntries,  Addressable lpPaletteEntries) {
        var mh$ = GetEnhMetaFilePaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hemf, nNumEntries, lpPaletteEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFilePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$304.GetEnhMetaFilePixelFormat$MH,"GetEnhMetaFilePixelFormat");
    }
    public static int GetEnhMetaFilePixelFormat ( Addressable hemf,  int cbBuffer,  Addressable ppfd) {
        var mh$ = GetEnhMetaFilePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hemf, cbBuffer, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWinMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$305.GetWinMetaFileBits$MH,"GetWinMetaFileBits");
    }
    public static int GetWinMetaFileBits ( Addressable hemf,  int cbData16,  Addressable pData16,  int iMapMode,  Addressable hdcRef) {
        var mh$ = GetWinMetaFileBits$MH();
        try {
            return (int)mh$.invokeExact(hemf, cbData16, pData16, iMapMode, hdcRef);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$305.PlayEnhMetaFile$MH,"PlayEnhMetaFile");
    }
    public static int PlayEnhMetaFile ( Addressable hdc,  Addressable hmf,  Addressable lprect) {
        var mh$ = PlayEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayEnhMetaFileRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$305.PlayEnhMetaFileRecord$MH,"PlayEnhMetaFileRecord");
    }
    public static int PlayEnhMetaFileRecord ( Addressable hdc,  Addressable pht,  Addressable pmr,  int cht) {
        var mh$ = PlayEnhMetaFileRecord$MH();
        try {
            return (int)mh$.invokeExact(hdc, pht, pmr, cht);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnhMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$305.SetEnhMetaFileBits$MH,"SetEnhMetaFileBits");
    }
    public static MemoryAddress SetEnhMetaFileBits ( int nSize,  Addressable pb) {
        var mh$ = SetEnhMetaFileBits$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nSize, pb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWinMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$305.SetWinMetaFileBits$MH,"SetWinMetaFileBits");
    }
    public static MemoryAddress SetWinMetaFileBits ( int nSize,  Addressable lpMeta16Data,  Addressable hdcRef,  Addressable lpMFP) {
        var mh$ = SetWinMetaFileBits$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nSize, lpMeta16Data, hdcRef, lpMFP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiComment$MH() {
        return RuntimeHelper.requireNonNull(constants$305.GdiComment$MH,"GdiComment");
    }
    public static int GdiComment ( Addressable hdc,  int nSize,  Addressable lpData) {
        var mh$ = GdiComment$MH();
        try {
            return (int)mh$.invokeExact(hdc, nSize, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextMetricsA$MH() {
        return RuntimeHelper.requireNonNull(constants$306.GetTextMetricsA$MH,"GetTextMetricsA");
    }
    public static int GetTextMetricsA ( Addressable hdc,  Addressable lptm) {
        var mh$ = GetTextMetricsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lptm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextMetricsW$MH() {
        return RuntimeHelper.requireNonNull(constants$306.GetTextMetricsW$MH,"GetTextMetricsW");
    }
    public static int GetTextMetricsW ( Addressable hdc,  Addressable lptm) {
        var mh$ = GetTextMetricsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lptm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDIBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDIBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AngleArc$MH() {
        return RuntimeHelper.requireNonNull(constants$306.AngleArc$MH,"AngleArc");
    }
    public static int AngleArc ( Addressable hdc,  int x,  int y,  int r,  float StartAngle,  float SweepAngle) {
        var mh$ = AngleArc$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, r, StartAngle, SweepAngle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyPolyline$MH() {
        return RuntimeHelper.requireNonNull(constants$306.PolyPolyline$MH,"PolyPolyline");
    }
    public static int PolyPolyline ( Addressable hdc,  Addressable apt,  Addressable asz,  int csz) {
        var mh$ = PolyPolyline$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, asz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$306.GetWorldTransform$MH,"GetWorldTransform");
    }
    public static int GetWorldTransform ( Addressable hdc,  Addressable lpxf) {
        var mh$ = GetWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$306.SetWorldTransform$MH,"SetWorldTransform");
    }
    public static int SetWorldTransform ( Addressable hdc,  Addressable lpxf) {
        var mh$ = SetWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$307.ModifyWorldTransform$MH,"ModifyWorldTransform");
    }
    public static int ModifyWorldTransform ( Addressable hdc,  Addressable lpxf,  int mode) {
        var mh$ = ModifyWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CombineTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$307.CombineTransform$MH,"CombineTransform");
    }
    public static int CombineTransform ( Addressable lpxfOut,  Addressable lpxf1,  Addressable lpxf2) {
        var mh$ = CombineTransform$MH();
        try {
            return (int)mh$.invokeExact(lpxfOut, lpxf1, lpxf2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBSection$MH() {
        return RuntimeHelper.requireNonNull(constants$307.CreateDIBSection$MH,"CreateDIBSection");
    }
    public static MemoryAddress CreateDIBSection ( Addressable hdc,  Addressable pbmi,  int usage,  Addressable ppvBits,  Addressable hSection,  int offset) {
        var mh$ = CreateDIBSection$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, pbmi, usage, ppvBits, hSection, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDIBColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$307.GetDIBColorTable$MH,"GetDIBColorTable");
    }
    public static int GetDIBColorTable ( Addressable hdc,  int iStart,  int cEntries,  Addressable prgbq) {
        var mh$ = GetDIBColorTable$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, prgbq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$307.SetDIBColorTable$MH,"SetDIBColorTable");
    }
    public static int SetDIBColorTable ( Addressable hdc,  int iStart,  int cEntries,  Addressable prgbq) {
        var mh$ = SetDIBColorTable$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, prgbq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetColorAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$307.SetColorAdjustment$MH,"SetColorAdjustment");
    }
    public static int SetColorAdjustment ( Addressable hdc,  Addressable lpca) {
        var mh$ = SetColorAdjustment$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColorAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$308.GetColorAdjustment$MH,"GetColorAdjustment");
    }
    public static int GetColorAdjustment ( Addressable hdc,  Addressable lpca) {
        var mh$ = GetColorAdjustment$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHalftonePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$308.CreateHalftonePalette$MH,"CreateHalftonePalette");
    }
    public static MemoryAddress CreateHalftonePalette ( Addressable hdc) {
        var mh$ = CreateHalftonePalette$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDOCINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOCINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOCINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle StartDocA$MH() {
        return RuntimeHelper.requireNonNull(constants$308.StartDocA$MH,"StartDocA");
    }
    public static int StartDocA ( Addressable hdc,  Addressable lpdi) {
        var mh$ = StartDocA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpdi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartDocW$MH() {
        return RuntimeHelper.requireNonNull(constants$308.StartDocW$MH,"StartDocW");
    }
    public static int StartDocW ( Addressable hdc,  Addressable lpdi) {
        var mh$ = StartDocW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpdi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDoc$MH() {
        return RuntimeHelper.requireNonNull(constants$309.EndDoc$MH,"EndDoc");
    }
    public static int EndDoc ( Addressable hdc) {
        var mh$ = EndDoc$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartPage$MH() {
        return RuntimeHelper.requireNonNull(constants$309.StartPage$MH,"StartPage");
    }
    public static int StartPage ( Addressable hdc) {
        var mh$ = StartPage$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPage$MH() {
        return RuntimeHelper.requireNonNull(constants$309.EndPage$MH,"EndPage");
    }
    public static int EndPage ( Addressable hdc) {
        var mh$ = EndPage$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortDoc$MH() {
        return RuntimeHelper.requireNonNull(constants$309.AbortDoc$MH,"AbortDoc");
    }
    public static int AbortDoc ( Addressable hdc) {
        var mh$ = AbortDoc$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAbortProc$MH() {
        return RuntimeHelper.requireNonNull(constants$309.SetAbortProc$MH,"SetAbortProc");
    }
    public static int SetAbortProc ( Addressable hdc,  Addressable proc) {
        var mh$ = SetAbortProc$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortPath$MH() {
        return RuntimeHelper.requireNonNull(constants$309.AbortPath$MH,"AbortPath");
    }
    public static int AbortPath ( Addressable hdc) {
        var mh$ = AbortPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ArcTo$MH() {
        return RuntimeHelper.requireNonNull(constants$310.ArcTo$MH,"ArcTo");
    }
    public static int ArcTo ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int xr1,  int yr1,  int xr2,  int yr2) {
        var mh$ = ArcTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginPath$MH() {
        return RuntimeHelper.requireNonNull(constants$310.BeginPath$MH,"BeginPath");
    }
    public static int BeginPath ( Addressable hdc) {
        var mh$ = BeginPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseFigure$MH() {
        return RuntimeHelper.requireNonNull(constants$310.CloseFigure$MH,"CloseFigure");
    }
    public static int CloseFigure ( Addressable hdc) {
        var mh$ = CloseFigure$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPath$MH() {
        return RuntimeHelper.requireNonNull(constants$310.EndPath$MH,"EndPath");
    }
    public static int EndPath ( Addressable hdc) {
        var mh$ = EndPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillPath$MH() {
        return RuntimeHelper.requireNonNull(constants$310.FillPath$MH,"FillPath");
    }
    public static int FillPath ( Addressable hdc) {
        var mh$ = FillPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlattenPath$MH() {
        return RuntimeHelper.requireNonNull(constants$310.FlattenPath$MH,"FlattenPath");
    }
    public static int FlattenPath ( Addressable hdc) {
        var mh$ = FlattenPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPath$MH() {
        return RuntimeHelper.requireNonNull(constants$311.GetPath$MH,"GetPath");
    }
    public static int GetPath ( Addressable hdc,  Addressable apt,  Addressable aj,  int cpt) {
        var mh$ = GetPath$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, aj, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PathToRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$311.PathToRegion$MH,"PathToRegion");
    }
    public static MemoryAddress PathToRegion ( Addressable hdc) {
        var mh$ = PathToRegion$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$311.PolyDraw$MH,"PolyDraw");
    }
    public static int PolyDraw ( Addressable hdc,  Addressable apt,  Addressable aj,  int cpt) {
        var mh$ = PolyDraw$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, aj, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectClipPath$MH() {
        return RuntimeHelper.requireNonNull(constants$311.SelectClipPath$MH,"SelectClipPath");
    }
    public static int SelectClipPath ( Addressable hdc,  int mode) {
        var mh$ = SelectClipPath$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetArcDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$311.SetArcDirection$MH,"SetArcDirection");
    }
    public static int SetArcDirection ( Addressable hdc,  int dir) {
        var mh$ = SetArcDirection$MH();
        try {
            return (int)mh$.invokeExact(hdc, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMiterLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$311.SetMiterLimit$MH,"SetMiterLimit");
    }
    public static int SetMiterLimit ( Addressable hdc,  float limit,  Addressable old) {
        var mh$ = SetMiterLimit$MH();
        try {
            return (int)mh$.invokeExact(hdc, limit, old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StrokeAndFillPath$MH() {
        return RuntimeHelper.requireNonNull(constants$312.StrokeAndFillPath$MH,"StrokeAndFillPath");
    }
    public static int StrokeAndFillPath ( Addressable hdc) {
        var mh$ = StrokeAndFillPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StrokePath$MH() {
        return RuntimeHelper.requireNonNull(constants$312.StrokePath$MH,"StrokePath");
    }
    public static int StrokePath ( Addressable hdc) {
        var mh$ = StrokePath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WidenPath$MH() {
        return RuntimeHelper.requireNonNull(constants$312.WidenPath$MH,"WidenPath");
    }
    public static int WidenPath ( Addressable hdc) {
        var mh$ = WidenPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtCreatePen$MH() {
        return RuntimeHelper.requireNonNull(constants$312.ExtCreatePen$MH,"ExtCreatePen");
    }
    public static MemoryAddress ExtCreatePen ( int iPenStyle,  int cWidth,  Addressable plbrush,  int cStyle,  Addressable pstyle) {
        var mh$ = ExtCreatePen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iPenStyle, cWidth, plbrush, cStyle, pstyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMiterLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$312.GetMiterLimit$MH,"GetMiterLimit");
    }
    public static int GetMiterLimit ( Addressable hdc,  Addressable plimit) {
        var mh$ = GetMiterLimit$MH();
        try {
            return (int)mh$.invokeExact(hdc, plimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetArcDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$312.GetArcDirection$MH,"GetArcDirection");
    }
    public static int GetArcDirection ( Addressable hdc) {
        var mh$ = GetArcDirection$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectA$MH() {
        return RuntimeHelper.requireNonNull(constants$313.GetObjectA$MH,"GetObjectA");
    }
    public static int GetObjectA ( Addressable h,  int c,  Addressable pv) {
        var mh$ = GetObjectA$MH();
        try {
            return (int)mh$.invokeExact(h, c, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectW$MH() {
        return RuntimeHelper.requireNonNull(constants$313.GetObjectW$MH,"GetObjectW");
    }
    public static int GetObjectW ( Addressable h,  int c,  Addressable pv) {
        var mh$ = GetObjectW$MH();
        try {
            return (int)mh$.invokeExact(h, c, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveToEx$MH() {
        return RuntimeHelper.requireNonNull(constants$313.MoveToEx$MH,"MoveToEx");
    }
    public static int MoveToEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = MoveToEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$313.TextOutA$MH,"TextOutA");
    }
    public static int TextOutA ( Addressable hdc,  int x,  int y,  Addressable lpString,  int c) {
        var mh$ = TextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$313.TextOutW$MH,"TextOutW");
    }
    public static int TextOutW ( Addressable hdc,  int x,  int y,  Addressable lpString,  int c) {
        var mh$ = TextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$313.ExtTextOutA$MH,"ExtTextOutA");
    }
    public static int ExtTextOutA ( Addressable hdc,  int x,  int y,  int options,  Addressable lprect,  Addressable lpString,  int c,  Addressable lpDx) {
        var mh$ = ExtTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, options, lprect, lpString, c, lpDx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$314.ExtTextOutW$MH,"ExtTextOutW");
    }
    public static int ExtTextOutW ( Addressable hdc,  int x,  int y,  int options,  Addressable lprect,  Addressable lpString,  int c,  Addressable lpDx) {
        var mh$ = ExtTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, options, lprect, lpString, c, lpDx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$314.PolyTextOutA$MH,"PolyTextOutA");
    }
    public static int PolyTextOutA ( Addressable hdc,  Addressable ppt,  int nstrings) {
        var mh$ = PolyTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppt, nstrings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$314.PolyTextOutW$MH,"PolyTextOutW");
    }
    public static int PolyTextOutW ( Addressable hdc,  Addressable ppt,  int nstrings) {
        var mh$ = PolyTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppt, nstrings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePolygonRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$314.CreatePolygonRgn$MH,"CreatePolygonRgn");
    }
    public static MemoryAddress CreatePolygonRgn ( Addressable pptl,  int cPoint,  int iMode) {
        var mh$ = CreatePolygonRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pptl, cPoint, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DPtoLP$MH() {
        return RuntimeHelper.requireNonNull(constants$314.DPtoLP$MH,"DPtoLP");
    }
    public static int DPtoLP ( Addressable hdc,  Addressable lppt,  int c) {
        var mh$ = DPtoLP$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LPtoDP$MH() {
        return RuntimeHelper.requireNonNull(constants$314.LPtoDP$MH,"LPtoDP");
    }
    public static int LPtoDP ( Addressable hdc,  Addressable lppt,  int c) {
        var mh$ = LPtoDP$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Polygon$MH() {
        return RuntimeHelper.requireNonNull(constants$315.Polygon$MH,"Polygon");
    }
    public static int Polygon ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = Polygon$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Polyline$MH() {
        return RuntimeHelper.requireNonNull(constants$315.Polyline$MH,"Polyline");
    }
    public static int Polyline ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = Polyline$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyBezier$MH() {
        return RuntimeHelper.requireNonNull(constants$315.PolyBezier$MH,"PolyBezier");
    }
    public static int PolyBezier ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolyBezier$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyBezierTo$MH() {
        return RuntimeHelper.requireNonNull(constants$315.PolyBezierTo$MH,"PolyBezierTo");
    }
    public static int PolyBezierTo ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolyBezierTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolylineTo$MH() {
        return RuntimeHelper.requireNonNull(constants$315.PolylineTo$MH,"PolylineTo");
    }
    public static int PolylineTo ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolylineTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$315.SetViewportExtEx$MH,"SetViewportExtEx");
    }
    public static int SetViewportExtEx ( Addressable hdc,  int x,  int y,  Addressable lpsz) {
        var mh$ = SetViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$316.SetViewportOrgEx$MH,"SetViewportOrgEx");
    }
    public static int SetViewportOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$316.SetWindowExtEx$MH,"SetWindowExtEx");
    }
    public static int SetWindowExtEx ( Addressable hdc,  int x,  int y,  Addressable lpsz) {
        var mh$ = SetWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$316.SetWindowOrgEx$MH,"SetWindowOrgEx");
    }
    public static int SetWindowOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$316.OffsetViewportOrgEx$MH,"OffsetViewportOrgEx");
    }
    public static int OffsetViewportOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = OffsetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$316.OffsetWindowOrgEx$MH,"OffsetWindowOrgEx");
    }
    public static int OffsetWindowOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = OffsetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScaleViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$316.ScaleViewportExtEx$MH,"ScaleViewportExtEx");
    }
    public static int ScaleViewportExtEx ( Addressable hdc,  int xn,  int dx,  int yn,  int yd,  Addressable lpsz) {
        var mh$ = ScaleViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xn, dx, yn, yd, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScaleWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$317.ScaleWindowExtEx$MH,"ScaleWindowExtEx");
    }
    public static int ScaleWindowExtEx ( Addressable hdc,  int xn,  int xd,  int yn,  int yd,  Addressable lpsz) {
        var mh$ = ScaleWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xn, xd, yn, yd, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBitmapDimensionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$317.SetBitmapDimensionEx$MH,"SetBitmapDimensionEx");
    }
    public static int SetBitmapDimensionEx ( Addressable hbm,  int w,  int h,  Addressable lpsz) {
        var mh$ = SetBitmapDimensionEx$MH();
        try {
            return (int)mh$.invokeExact(hbm, w, h, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$317.SetBrushOrgEx$MH,"SetBrushOrgEx");
    }
    public static int SetBrushOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextFaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$317.GetTextFaceA$MH,"GetTextFaceA");
    }
    public static int GetTextFaceA ( Addressable hdc,  int c,  Addressable lpName) {
        var mh$ = GetTextFaceA$MH();
        try {
            return (int)mh$.invokeExact(hdc, c, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextFaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$317.GetTextFaceW$MH,"GetTextFaceW");
    }
    public static int GetTextFaceW ( Addressable hdc,  int c,  Addressable lpName) {
        var mh$ = GetTextFaceW$MH();
        try {
            return (int)mh$.invokeExact(hdc, c, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPKERNINGPAIR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetKerningPairsA$MH() {
        return RuntimeHelper.requireNonNull(constants$317.GetKerningPairsA$MH,"GetKerningPairsA");
    }
    public static int GetKerningPairsA ( Addressable hdc,  int nPairs,  Addressable lpKernPair) {
        var mh$ = GetKerningPairsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, nPairs, lpKernPair);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKerningPairsW$MH() {
        return RuntimeHelper.requireNonNull(constants$318.GetKerningPairsW$MH,"GetKerningPairsW");
    }
    public static int GetKerningPairsW ( Addressable hdc,  int nPairs,  Addressable lpKernPair) {
        var mh$ = GetKerningPairsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, nPairs, lpKernPair);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$318.GetDCOrgEx$MH,"GetDCOrgEx");
    }
    public static int GetDCOrgEx ( Addressable hdc,  Addressable lppt) {
        var mh$ = GetDCOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FixBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$318.FixBrushOrgEx$MH,"FixBrushOrgEx");
    }
    public static int FixBrushOrgEx ( Addressable hdc,  int x,  int y,  Addressable ptl) {
        var mh$ = FixBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, ptl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnrealizeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$318.UnrealizeObject$MH,"UnrealizeObject");
    }
    public static int UnrealizeObject ( Addressable h) {
        var mh$ = UnrealizeObject$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$318.GdiFlush$MH,"GdiFlush");
    }
    public static int GdiFlush () {
        var mh$ = GdiFlush$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiSetBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$318.GdiSetBatchLimit$MH,"GdiSetBatchLimit");
    }
    public static int GdiSetBatchLimit ( int dw) {
        var mh$ = GdiSetBatchLimit$MH();
        try {
            return (int)mh$.invokeExact(dw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiGetBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$319.GdiGetBatchLimit$MH,"GdiGetBatchLimit");
    }
    public static int GdiGetBatchLimit () {
        var mh$ = GdiGetBatchLimit$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMMode$MH() {
        return RuntimeHelper.requireNonNull(constants$319.SetICMMode$MH,"SetICMMode");
    }
    public static int SetICMMode ( Addressable hdc,  int mode) {
        var mh$ = SetICMMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckColorsInGamut$MH() {
        return RuntimeHelper.requireNonNull(constants$320.CheckColorsInGamut$MH,"CheckColorsInGamut");
    }
    public static int CheckColorsInGamut ( Addressable hdc,  Addressable lpRGBTriple,  Addressable dlpBuffer,  int nCount) {
        var mh$ = CheckColorsInGamut$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRGBTriple, dlpBuffer, nCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$320.GetColorSpace$MH,"GetColorSpace");
    }
    public static MemoryAddress GetColorSpace ( Addressable hdc) {
        var mh$ = GetColorSpace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogColorSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$320.GetLogColorSpaceA$MH,"GetLogColorSpaceA");
    }
    public static int GetLogColorSpaceA ( Addressable hColorSpace,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetLogColorSpaceA$MH();
        try {
            return (int)mh$.invokeExact(hColorSpace, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogColorSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$320.GetLogColorSpaceW$MH,"GetLogColorSpaceW");
    }
    public static int GetLogColorSpaceW ( Addressable hColorSpace,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetLogColorSpaceW$MH();
        try {
            return (int)mh$.invokeExact(hColorSpace, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateColorSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$320.CreateColorSpaceA$MH,"CreateColorSpaceA");
    }
    public static MemoryAddress CreateColorSpaceA ( Addressable lplcs) {
        var mh$ = CreateColorSpaceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateColorSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$320.CreateColorSpaceW$MH,"CreateColorSpaceW");
    }
    public static MemoryAddress CreateColorSpaceW ( Addressable lplcs) {
        var mh$ = CreateColorSpaceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$321.SetColorSpace$MH,"SetColorSpace");
    }
    public static MemoryAddress SetColorSpace ( Addressable hdc,  Addressable hcs) {
        var mh$ = SetColorSpace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, hcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$321.DeleteColorSpace$MH,"DeleteColorSpace");
    }
    public static int DeleteColorSpace ( Addressable hcs) {
        var mh$ = DeleteColorSpace$MH();
        try {
            return (int)mh$.invokeExact(hcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetICMProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$321.GetICMProfileA$MH,"GetICMProfileA");
    }
    public static int GetICMProfileA ( Addressable hdc,  Addressable pBufSize,  Addressable pszFilename) {
        var mh$ = GetICMProfileA$MH();
        try {
            return (int)mh$.invokeExact(hdc, pBufSize, pszFilename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetICMProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$321.GetICMProfileW$MH,"GetICMProfileW");
    }
    public static int GetICMProfileW ( Addressable hdc,  Addressable pBufSize,  Addressable pszFilename) {
        var mh$ = GetICMProfileW$MH();
        try {
            return (int)mh$.invokeExact(hdc, pBufSize, pszFilename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$321.SetICMProfileA$MH,"SetICMProfileA");
    }
    public static int SetICMProfileA ( Addressable hdc,  Addressable lpFileName) {
        var mh$ = SetICMProfileA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$321.SetICMProfileW$MH,"SetICMProfileW");
    }
    public static int SetICMProfileW ( Addressable hdc,  Addressable lpFileName) {
        var mh$ = SetICMProfileW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDeviceGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$322.GetDeviceGammaRamp$MH,"GetDeviceGammaRamp");
    }
    public static int GetDeviceGammaRamp ( Addressable hdc,  Addressable lpRamp) {
        var mh$ = GetDeviceGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDeviceGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$322.SetDeviceGammaRamp$MH,"SetDeviceGammaRamp");
    }
    public static int SetDeviceGammaRamp ( Addressable hdc,  Addressable lpRamp) {
        var mh$ = SetDeviceGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorMatchToTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$322.ColorMatchToTarget$MH,"ColorMatchToTarget");
    }
    public static int ColorMatchToTarget ( Addressable hdc,  Addressable hdcTarget,  int action) {
        var mh$ = ColorMatchToTarget$MH();
        try {
            return (int)mh$.invokeExact(hdc, hdcTarget, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumICMProfilesA$MH() {
        return RuntimeHelper.requireNonNull(constants$322.EnumICMProfilesA$MH,"EnumICMProfilesA");
    }
    public static int EnumICMProfilesA ( Addressable hdc,  Addressable proc,  long param) {
        var mh$ = EnumICMProfilesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumICMProfilesW$MH() {
        return RuntimeHelper.requireNonNull(constants$322.EnumICMProfilesW$MH,"EnumICMProfilesW");
    }
    public static int EnumICMProfilesW ( Addressable hdc,  Addressable proc,  long param) {
        var mh$ = EnumICMProfilesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateICMRegKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$322.UpdateICMRegKeyA$MH,"UpdateICMRegKeyA");
    }
    public static int UpdateICMRegKeyA ( int reserved,  Addressable lpszCMID,  Addressable lpszFileName,  int command) {
        var mh$ = UpdateICMRegKeyA$MH();
        try {
            return (int)mh$.invokeExact(reserved, lpszCMID, lpszFileName, command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateICMRegKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$323.UpdateICMRegKeyW$MH,"UpdateICMRegKeyW");
    }
    public static int UpdateICMRegKeyW ( int reserved,  Addressable lpszCMID,  Addressable lpszFileName,  int command) {
        var mh$ = UpdateICMRegKeyW$MH();
        try {
            return (int)mh$.invokeExact(reserved, lpszCMID, lpszFileName, command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorCorrectPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$323.ColorCorrectPalette$MH,"ColorCorrectPalette");
    }
    public static int ColorCorrectPalette ( Addressable hdc,  Addressable hPal,  int deFirst,  int num) {
        var mh$ = ColorCorrectPalette$MH();
        try {
            return (int)mh$.invokeExact(hdc, hPal, deFirst, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PEMR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRABORTPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRBEGINPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRENDPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCLOSEFIGURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFLATTENPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRWIDENPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMETARGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSAVEDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRREALIZEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTCLIPPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBKMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMAPMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETLAYOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPOLYFILLMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETROP2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETSTRETCHBLTMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETTEXTALIGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMITERLIMIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRESTOREDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETARCDIRECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMAPPERFLAGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBKCOLOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETTEXTCOLOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTOBJECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDELETEOBJECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRESIZEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPALETTEENTRIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGDICOMMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREOF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRLINETO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMOVETOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMROFFSETCLIPRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFILLPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTROKEANDFILLPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTROKEPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXCLUDECLIPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRINTERSECTCLIPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETVIEWPORTORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWINDOWORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBRUSHORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETVIEWPORTEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWINDOWEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSCALEVIEWPORTEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSCALEWINDOWEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWORLDTRANSFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMODIFYWORLDTRANSFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPIXELV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTFLOODFILL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRELLIPSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRECTANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRROUNDRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRARC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRARCTO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCHORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPIE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRANGLEARC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYGON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIERTO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINETO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINE16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIER16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYGON16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIERTO16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINETO16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYDRAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYDRAW16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYLINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYGON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYLINE16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYGON16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRINVERTRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPAINTRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFILLRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFRAMERGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTSELECTCLIPRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTTEXTOUTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTTEXTOUTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYTEXTOUTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYTEXTOUTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRBITBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTRETCHBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMASKBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPLGBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETDIBITSTODEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTRETCHDIBITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTCREATEFONTINDIRECTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTCREATEPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEBRUSHINDIRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEMONOBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEDIBPATTERNBRUSHPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGLSRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGLSBOUNDEDRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPIXELFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATECOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDELETECOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDRAWESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRNAMEDESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATECOLORSPACEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCOLORMATCHTOTARGET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCOLORCORRECTPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRALPHABLEND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGRADIENTFILL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRTRANSPARENTBLT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglCopyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$323.wglCopyContext$MH,"wglCopyContext");
    }
    public static int wglCopyContext ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = wglCopyContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$323.wglCreateContext$MH,"wglCreateContext");
    }
    public static MemoryAddress wglCreateContext ( Addressable x0) {
        var mh$ = wglCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglCreateLayerContext$MH() {
        return RuntimeHelper.requireNonNull(constants$323.wglCreateLayerContext$MH,"wglCreateLayerContext");
    }
    public static MemoryAddress wglCreateLayerContext ( Addressable x0,  int x1) {
        var mh$ = wglCreateLayerContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$323.wglDeleteContext$MH,"wglDeleteContext");
    }
    public static int wglDeleteContext ( Addressable x0) {
        var mh$ = wglDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$324.wglGetCurrentContext$MH,"wglGetCurrentContext");
    }
    public static MemoryAddress wglGetCurrentContext () {
        var mh$ = wglGetCurrentContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetCurrentDC$MH() {
        return RuntimeHelper.requireNonNull(constants$324.wglGetCurrentDC$MH,"wglGetCurrentDC");
    }
    public static MemoryAddress wglGetCurrentDC () {
        var mh$ = wglGetCurrentDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$324.wglGetProcAddress$MH,"wglGetProcAddress");
    }
    public static MemoryAddress wglGetProcAddress ( Addressable x0) {
        var mh$ = wglGetProcAddress$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglMakeCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$324.wglMakeCurrent$MH,"wglMakeCurrent");
    }
    public static int wglMakeCurrent ( Addressable x0,  Addressable x1) {
        var mh$ = wglMakeCurrent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglShareLists$MH() {
        return RuntimeHelper.requireNonNull(constants$324.wglShareLists$MH,"wglShareLists");
    }
    public static int wglShareLists ( Addressable x0,  Addressable x1) {
        var mh$ = wglShareLists$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontBitmapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$324.wglUseFontBitmapsA$MH,"wglUseFontBitmapsA");
    }
    public static int wglUseFontBitmapsA ( Addressable x0,  int x1,  int x2,  int x3) {
        var mh$ = wglUseFontBitmapsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontBitmapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$325.wglUseFontBitmapsW$MH,"wglUseFontBitmapsW");
    }
    public static int wglUseFontBitmapsW ( Addressable x0,  int x1,  int x2,  int x3) {
        var mh$ = wglUseFontBitmapsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$325.SwapBuffers$MH,"SwapBuffers");
    }
    public static int SwapBuffers ( Addressable x0) {
        var mh$ = SwapBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPOINTFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGLYPHMETRICSFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGLYPHMETRICSFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglUseFontOutlinesA$MH() {
        return RuntimeHelper.requireNonNull(constants$325.wglUseFontOutlinesA$MH,"wglUseFontOutlinesA");
    }
    public static int wglUseFontOutlinesA ( Addressable x0,  int x1,  int x2,  int x3,  float x4,  float x5,  int x6,  Addressable x7) {
        var mh$ = wglUseFontOutlinesA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontOutlinesW$MH() {
        return RuntimeHelper.requireNonNull(constants$325.wglUseFontOutlinesW$MH,"wglUseFontOutlinesW");
    }
    public static int wglUseFontOutlinesW ( Addressable x0,  int x1,  int x2,  int x3,  float x4,  float x5,  int x6,  Addressable x7) {
        var mh$ = wglUseFontOutlinesW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PLAYERPLANEDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLAYERPLANEDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglDescribeLayerPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$325.wglDescribeLayerPlane$MH,"wglDescribeLayerPlane");
    }
    public static int wglDescribeLayerPlane ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglDescribeLayerPlane$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglSetLayerPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$325.wglSetLayerPaletteEntries$MH,"wglSetLayerPaletteEntries");
    }
    public static int wglSetLayerPaletteEntries ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglSetLayerPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetLayerPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$326.wglGetLayerPaletteEntries$MH,"wglGetLayerPaletteEntries");
    }
    public static int wglGetLayerPaletteEntries ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglGetLayerPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglRealizeLayerPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$326.wglRealizeLayerPalette$MH,"wglRealizeLayerPalette");
    }
    public static int wglRealizeLayerPalette ( Addressable x0,  int x1,  int x2) {
        var mh$ = wglRealizeLayerPalette$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglSwapLayerBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$326.wglSwapLayerBuffers$MH,"wglSwapLayerBuffers");
    }
    public static int wglSwapLayerBuffers ( Addressable x0,  int x1) {
        var mh$ = wglSwapLayerBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWGLSWAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWGLSWAP = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglSwapMultipleBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$326.wglSwapMultipleBuffers$MH,"wglSwapMultipleBuffers");
    }
    public static int wglSwapMultipleBuffers ( int x0,  Addressable x1) {
        var mh$ = wglSwapMultipleBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HDWP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wvsprintfA$MH() {
        return RuntimeHelper.requireNonNull(constants$335.wvsprintfA$MH,"wvsprintfA");
    }
    public static int wvsprintfA ( Addressable x0,  Addressable x1,  Addressable arglist) {
        var mh$ = wvsprintfA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wvsprintfW$MH() {
        return RuntimeHelper.requireNonNull(constants$335.wvsprintfW$MH,"wvsprintfW");
    }
    public static int wvsprintfW ( Addressable x0,  Addressable x1,  Addressable arglist) {
        var mh$ = wvsprintfW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsprintfA$MH() {
        return RuntimeHelper.requireNonNull(constants$335.wsprintfA$MH,"wsprintfA");
    }
    public static int wsprintfA ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = wsprintfA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsprintfW$MH() {
        return RuntimeHelper.requireNonNull(constants$335.wsprintfW$MH,"wsprintfW");
    }
    public static int wsprintfW ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = wsprintfW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCBT_CREATEWNDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBT_CREATEWNDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBT_CREATEWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBTACTIVATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWTSSESSION_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHELLHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPKBDLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKBDLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMSLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSEHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEHOOKSTRUCTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSEHOOKSTRUCTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHARDWAREHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHARDWAREHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadKeyboardLayoutA$MH() {
        return RuntimeHelper.requireNonNull(constants$335.LoadKeyboardLayoutA$MH,"LoadKeyboardLayoutA");
    }
    public static MemoryAddress LoadKeyboardLayoutA ( Addressable pwszKLID,  int Flags) {
        var mh$ = LoadKeyboardLayoutA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszKLID, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadKeyboardLayoutW$MH() {
        return RuntimeHelper.requireNonNull(constants$335.LoadKeyboardLayoutW$MH,"LoadKeyboardLayoutW");
    }
    public static MemoryAddress LoadKeyboardLayoutW ( Addressable pwszKLID,  int Flags) {
        var mh$ = LoadKeyboardLayoutW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszKLID, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ActivateKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$336.ActivateKeyboardLayout$MH,"ActivateKeyboardLayout");
    }
    public static MemoryAddress ActivateKeyboardLayout ( Addressable hkl,  int Flags) {
        var mh$ = ActivateKeyboardLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hkl, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToUnicodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$336.ToUnicodeEx$MH,"ToUnicodeEx");
    }
    public static int ToUnicodeEx ( int wVirtKey,  int wScanCode,  Addressable lpKeyState,  Addressable pwszBuff,  int cchBuff,  int wFlags,  Addressable dwhkl) {
        var mh$ = ToUnicodeEx$MH();
        try {
            return (int)mh$.invokeExact(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$336.UnloadKeyboardLayout$MH,"UnloadKeyboardLayout");
    }
    public static int UnloadKeyboardLayout ( Addressable hkl) {
        var mh$ = UnloadKeyboardLayout$MH();
        try {
            return (int)mh$.invokeExact(hkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$336.GetKeyboardLayoutNameA$MH,"GetKeyboardLayoutNameA");
    }
    public static int GetKeyboardLayoutNameA ( Addressable pwszKLID) {
        var mh$ = GetKeyboardLayoutNameA$MH();
        try {
            return (int)mh$.invokeExact(pwszKLID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$336.GetKeyboardLayoutNameW$MH,"GetKeyboardLayoutNameW");
    }
    public static int GetKeyboardLayoutNameW ( Addressable pwszKLID) {
        var mh$ = GetKeyboardLayoutNameW$MH();
        try {
            return (int)mh$.invokeExact(pwszKLID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutList$MH() {
        return RuntimeHelper.requireNonNull(constants$336.GetKeyboardLayoutList$MH,"GetKeyboardLayoutList");
    }
    public static int GetKeyboardLayoutList ( int nBuff,  Addressable lpList) {
        var mh$ = GetKeyboardLayoutList$MH();
        try {
            return (int)mh$.invokeExact(nBuff, lpList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$337.GetKeyboardLayout$MH,"GetKeyboardLayout");
    }
    public static MemoryAddress GetKeyboardLayout ( int idThread) {
        var mh$ = GetKeyboardLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMOUSEMOVEPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEMOVEPOINT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMouseMovePointsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$337.GetMouseMovePointsEx$MH,"GetMouseMovePointsEx");
    }
    public static int GetMouseMovePointsEx ( int cbSize,  Addressable lppt,  Addressable lpptBuf,  int nBufPoints,  int resolution) {
        var mh$ = GetMouseMovePointsEx$MH();
        try {
            return (int)mh$.invokeExact(cbSize, lppt, lpptBuf, nBufPoints, resolution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopA$MH() {
        return RuntimeHelper.requireNonNull(constants$337.CreateDesktopA$MH,"CreateDesktopA");
    }
    public static MemoryAddress CreateDesktopA ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateDesktopA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopW$MH() {
        return RuntimeHelper.requireNonNull(constants$337.CreateDesktopW$MH,"CreateDesktopW");
    }
    public static MemoryAddress CreateDesktopW ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateDesktopW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopExA$MH() {
        return RuntimeHelper.requireNonNull(constants$337.CreateDesktopExA$MH,"CreateDesktopExA");
    }
    public static MemoryAddress CreateDesktopExA ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa,  int ulHeapSize,  Addressable pvoid) {
        var mh$ = CreateDesktopExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopExW$MH() {
        return RuntimeHelper.requireNonNull(constants$337.CreateDesktopExW$MH,"CreateDesktopExW");
    }
    public static MemoryAddress CreateDesktopExW ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa,  int ulHeapSize,  Addressable pvoid) {
        var mh$ = CreateDesktopExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDesktopA$MH() {
        return RuntimeHelper.requireNonNull(constants$338.OpenDesktopA$MH,"OpenDesktopA");
    }
    public static MemoryAddress OpenDesktopA ( Addressable lpszDesktop,  int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenDesktopA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDesktopW$MH() {
        return RuntimeHelper.requireNonNull(constants$338.OpenDesktopW$MH,"OpenDesktopW");
    }
    public static MemoryAddress OpenDesktopW ( Addressable lpszDesktop,  int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenDesktopW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenInputDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$338.OpenInputDesktop$MH,"OpenInputDesktop");
    }
    public static MemoryAddress OpenInputDesktop ( int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenInputDesktop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopsA$MH() {
        return RuntimeHelper.requireNonNull(constants$338.EnumDesktopsA$MH,"EnumDesktopsA");
    }
    public static int EnumDesktopsA ( Addressable hwinsta,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumDesktopsA$MH();
        try {
            return (int)mh$.invokeExact(hwinsta, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopsW$MH() {
        return RuntimeHelper.requireNonNull(constants$338.EnumDesktopsW$MH,"EnumDesktopsW");
    }
    public static int EnumDesktopsW ( Addressable hwinsta,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumDesktopsW$MH();
        try {
            return (int)mh$.invokeExact(hwinsta, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$338.EnumDesktopWindows$MH,"EnumDesktopWindows");
    }
    public static int EnumDesktopWindows ( Addressable hDesktop,  Addressable lpfn,  long lParam) {
        var mh$ = EnumDesktopWindows$MH();
        try {
            return (int)mh$.invokeExact(hDesktop, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$339.SwitchDesktop$MH,"SwitchDesktop");
    }
    public static int SwitchDesktop ( Addressable hDesktop) {
        var mh$ = SwitchDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$339.SetThreadDesktop$MH,"SetThreadDesktop");
    }
    public static int SetThreadDesktop ( Addressable hDesktop) {
        var mh$ = SetThreadDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$339.CloseDesktop$MH,"CloseDesktop");
    }
    public static int CloseDesktop ( Addressable hDesktop) {
        var mh$ = CloseDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$339.GetThreadDesktop$MH,"GetThreadDesktop");
    }
    public static MemoryAddress GetThreadDesktop ( int dwThreadId) {
        var mh$ = GetThreadDesktop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowStationA$MH() {
        return RuntimeHelper.requireNonNull(constants$339.CreateWindowStationA$MH,"CreateWindowStationA");
    }
    public static MemoryAddress CreateWindowStationA ( Addressable lpwinsta,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateWindowStationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpwinsta, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowStationW$MH() {
        return RuntimeHelper.requireNonNull(constants$339.CreateWindowStationW$MH,"CreateWindowStationW");
    }
    public static MemoryAddress CreateWindowStationW ( Addressable lpwinsta,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateWindowStationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpwinsta, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWindowStationA$MH() {
        return RuntimeHelper.requireNonNull(constants$340.OpenWindowStationA$MH,"OpenWindowStationA");
    }
    public static MemoryAddress OpenWindowStationA ( Addressable lpszWinSta,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenWindowStationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszWinSta, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWindowStationW$MH() {
        return RuntimeHelper.requireNonNull(constants$340.OpenWindowStationW$MH,"OpenWindowStationW");
    }
    public static MemoryAddress OpenWindowStationW ( Addressable lpszWinSta,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenWindowStationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszWinSta, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindowStationsA$MH() {
        return RuntimeHelper.requireNonNull(constants$340.EnumWindowStationsA$MH,"EnumWindowStationsA");
    }
    public static int EnumWindowStationsA ( Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumWindowStationsA$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindowStationsW$MH() {
        return RuntimeHelper.requireNonNull(constants$340.EnumWindowStationsW$MH,"EnumWindowStationsW");
    }
    public static int EnumWindowStationsW ( Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumWindowStationsW$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$340.CloseWindowStation$MH,"CloseWindowStation");
    }
    public static int CloseWindowStation ( Addressable hWinSta) {
        var mh$ = CloseWindowStation$MH();
        try {
            return (int)mh$.invokeExact(hWinSta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$340.SetProcessWindowStation$MH,"SetProcessWindowStation");
    }
    public static int SetProcessWindowStation ( Addressable hWinSta) {
        var mh$ = SetProcessWindowStation$MH();
        try {
            return (int)mh$.invokeExact(hWinSta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$341.GetProcessWindowStation$MH,"GetProcessWindowStation");
    }
    public static MemoryAddress GetProcessWindowStation () {
        var mh$ = GetProcessWindowStation$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$341.SetUserObjectSecurity$MH,"SetUserObjectSecurity");
    }
    public static int SetUserObjectSecurity ( Addressable hObj,  Addressable pSIRequested,  Addressable pSID) {
        var mh$ = SetUserObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hObj, pSIRequested, pSID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$341.GetUserObjectSecurity$MH,"GetUserObjectSecurity");
    }
    public static int GetUserObjectSecurity ( Addressable hObj,  Addressable pSIRequested,  Addressable pSID,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hObj, pSIRequested, pSID, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUSEROBJECTFLAGS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetUserObjectInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$341.GetUserObjectInformationA$MH,"GetUserObjectInformationA");
    }
    public static int GetUserObjectInformationA ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectInformationA$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserObjectInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$341.GetUserObjectInformationW$MH,"GetUserObjectInformationW");
    }
    public static int GetUserObjectInformationW ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectInformationW$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$341.SetUserObjectInformationA$MH,"SetUserObjectInformationA");
    }
    public static int SetUserObjectInformationA ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength) {
        var mh$ = SetUserObjectInformationA$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$342.SetUserObjectInformationW$MH,"SetUserObjectInformationW");
    }
    public static int SetUserObjectInformationW ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength) {
        var mh$ = SetUserObjectInformationW$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle IsHungAppWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$342.IsHungAppWindow$MH,"IsHungAppWindow");
    }
    public static int IsHungAppWindow ( Addressable hwnd) {
        var mh$ = IsHungAppWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableProcessWindowsGhosting$MH() {
        return RuntimeHelper.requireNonNull(constants$342.DisableProcessWindowsGhosting$MH,"DisableProcessWindowsGhosting");
    }
    public static void DisableProcessWindowsGhosting () {
        var mh$ = DisableProcessWindowsGhosting$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMINMAXINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMINMAXINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOPYDATASTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMDINEXTMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMDINEXTMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWERBROADCAST_SETTING = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterWindowMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$342.RegisterWindowMessageA$MH,"RegisterWindowMessageA");
    }
    public static int RegisterWindowMessageA ( Addressable lpString) {
        var mh$ = RegisterWindowMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterWindowMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$342.RegisterWindowMessageW$MH,"RegisterWindowMessageW");
    }
    public static int RegisterWindowMessageW ( Addressable lpString) {
        var mh$ = RegisterWindowMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPWINDOWPOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOWPOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNCCALCSIZE_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTRACKMOUSEEVENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TrackMouseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$342.TrackMouseEvent$MH,"TrackMouseEvent");
    }
    public static int TrackMouseEvent ( Addressable lpEventTrack) {
        var mh$ = TrackMouseEvent$MH();
        try {
            return (int)mh$.invokeExact(lpEventTrack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEdge$MH() {
        return RuntimeHelper.requireNonNull(constants$343.DrawEdge$MH,"DrawEdge");
    }
    public static int DrawEdge ( Addressable hdc,  Addressable qrc,  int edge,  int grfFlags) {
        var mh$ = DrawEdge$MH();
        try {
            return (int)mh$.invokeExact(hdc, qrc, edge, grfFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawFrameControl$MH() {
        return RuntimeHelper.requireNonNull(constants$343.DrawFrameControl$MH,"DrawFrameControl");
    }
    public static int DrawFrameControl ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = DrawFrameControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCaption$MH() {
        return RuntimeHelper.requireNonNull(constants$343.DrawCaption$MH,"DrawCaption");
    }
    public static int DrawCaption ( Addressable hwnd,  Addressable hdc,  Addressable lprect,  int flags) {
        var mh$ = DrawCaption$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawAnimatedRects$MH() {
        return RuntimeHelper.requireNonNull(constants$343.DrawAnimatedRects$MH,"DrawAnimatedRects");
    }
    public static int DrawAnimatedRects ( Addressable hwnd,  int idAni,  Addressable lprcFrom,  Addressable lprcTo) {
        var mh$ = DrawAnimatedRects$MH();
        try {
            return (int)mh$.invokeExact(hwnd, idAni, lprcFrom, lprcTo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOWPLACEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWINDOWPLACEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNMHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEASUREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMEASUREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRAWITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRAWITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDELETEITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDELETEITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOMPAREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOMPAREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$343.GetMessageA$MH,"GetMessageA");
    }
    public static int GetMessageA ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax) {
        var mh$ = GetMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$343.GetMessageW$MH,"GetMessageW");
    }
    public static int GetMessageW ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax) {
        var mh$ = GetMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$344.TranslateMessage$MH,"TranslateMessage");
    }
    public static int TranslateMessage ( Addressable lpMsg) {
        var mh$ = TranslateMessage$MH();
        try {
            return (int)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispatchMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$344.DispatchMessageA$MH,"DispatchMessageA");
    }
    public static long DispatchMessageA ( Addressable lpMsg) {
        var mh$ = DispatchMessageA$MH();
        try {
            return (long)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispatchMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$344.DispatchMessageW$MH,"DispatchMessageW");
    }
    public static long DispatchMessageW ( Addressable lpMsg) {
        var mh$ = DispatchMessageW$MH();
        try {
            return (long)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$344.SetMessageQueue$MH,"SetMessageQueue");
    }
    public static int SetMessageQueue ( int cMessagesMax) {
        var mh$ = SetMessageQueue$MH();
        try {
            return (int)mh$.invokeExact(cMessagesMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$344.PeekMessageA$MH,"PeekMessageA");
    }
    public static int PeekMessageA ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax,  int wRemoveMsg) {
        var mh$ = PeekMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$344.PeekMessageW$MH,"PeekMessageW");
    }
    public static int PeekMessageW ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax,  int wRemoveMsg) {
        var mh$ = PeekMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$345.RegisterHotKey$MH,"RegisterHotKey");
    }
    public static int RegisterHotKey ( Addressable hWnd,  int id,  int fsModifiers,  int vk) {
        var mh$ = RegisterHotKey$MH();
        try {
            return (int)mh$.invokeExact(hWnd, id, fsModifiers, vk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$345.UnregisterHotKey$MH,"UnregisterHotKey");
    }
    public static int UnregisterHotKey ( Addressable hWnd,  int id) {
        var mh$ = UnregisterHotKey$MH();
        try {
            return (int)mh$.invokeExact(hWnd, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitWindowsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$345.ExitWindowsEx$MH,"ExitWindowsEx");
    }
    public static int ExitWindowsEx ( int uFlags,  int dwReason) {
        var mh$ = ExitWindowsEx$MH();
        try {
            return (int)mh$.invokeExact(uFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapMouseButton$MH() {
        return RuntimeHelper.requireNonNull(constants$345.SwapMouseButton$MH,"SwapMouseButton");
    }
    public static int SwapMouseButton ( int fSwap) {
        var mh$ = SwapMouseButton$MH();
        try {
            return (int)mh$.invokeExact(fSwap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessagePos$MH() {
        return RuntimeHelper.requireNonNull(constants$345.GetMessagePos$MH,"GetMessagePos");
    }
    public static int GetMessagePos () {
        var mh$ = GetMessagePos$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageTime$MH() {
        return RuntimeHelper.requireNonNull(constants$345.GetMessageTime$MH,"GetMessageTime");
    }
    public static int GetMessageTime () {
        var mh$ = GetMessageTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageExtraInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$346.GetMessageExtraInfo$MH,"GetMessageExtraInfo");
    }
    public static long GetMessageExtraInfo () {
        var mh$ = GetMessageExtraInfo$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUnpredictedMessagePos$MH() {
        return RuntimeHelper.requireNonNull(constants$346.GetUnpredictedMessagePos$MH,"GetUnpredictedMessagePos");
    }
    public static int GetUnpredictedMessagePos () {
        var mh$ = GetUnpredictedMessagePos$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64Message$MH() {
        return RuntimeHelper.requireNonNull(constants$346.IsWow64Message$MH,"IsWow64Message");
    }
    public static int IsWow64Message () {
        var mh$ = IsWow64Message$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageExtraInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$346.SetMessageExtraInfo$MH,"SetMessageExtraInfo");
    }
    public static long SetMessageExtraInfo ( long lParam) {
        var mh$ = SetMessageExtraInfo$MH();
        try {
            return (long)mh$.invokeExact(lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$346.SendMessageA$MH,"SendMessageA");
    }
    public static long SendMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendMessageA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$346.SendMessageW$MH,"SendMessageW");
    }
    public static long SendMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendMessageW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageTimeoutA$MH() {
        return RuntimeHelper.requireNonNull(constants$347.SendMessageTimeoutA$MH,"SendMessageTimeoutA");
    }
    public static long SendMessageTimeoutA ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  int fuFlags,  int uTimeout,  Addressable lpdwResult) {
        var mh$ = SendMessageTimeoutA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageTimeoutW$MH() {
        return RuntimeHelper.requireNonNull(constants$347.SendMessageTimeoutW$MH,"SendMessageTimeoutW");
    }
    public static long SendMessageTimeoutW ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  int fuFlags,  int uTimeout,  Addressable lpdwResult) {
        var mh$ = SendMessageTimeoutW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendNotifyMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$347.SendNotifyMessageA$MH,"SendNotifyMessageA");
    }
    public static int SendNotifyMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendNotifyMessageA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendNotifyMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$347.SendNotifyMessageW$MH,"SendNotifyMessageW");
    }
    public static int SendNotifyMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendNotifyMessageW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageCallbackA$MH() {
        return RuntimeHelper.requireNonNull(constants$347.SendMessageCallbackA$MH,"SendMessageCallbackA");
    }
    public static int SendMessageCallbackA ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  Addressable lpResultCallBack,  long dwData) {
        var mh$ = SendMessageCallbackA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam, lpResultCallBack, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageCallbackW$MH() {
        return RuntimeHelper.requireNonNull(constants$347.SendMessageCallbackW$MH,"SendMessageCallbackW");
    }
    public static int SendMessageCallbackW ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  Addressable lpResultCallBack,  long dwData) {
        var mh$ = SendMessageCallbackW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam, lpResultCallBack, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBSMINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle BroadcastSystemMessageExA$MH() {
        return RuntimeHelper.requireNonNull(constants$348.BroadcastSystemMessageExA$MH,"BroadcastSystemMessageExA");
    }
    public static int BroadcastSystemMessageExA ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam,  Addressable pbsmInfo) {
        var mh$ = BroadcastSystemMessageExA$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam, pbsmInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageExW$MH() {
        return RuntimeHelper.requireNonNull(constants$348.BroadcastSystemMessageExW$MH,"BroadcastSystemMessageExW");
    }
    public static int BroadcastSystemMessageExW ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam,  Addressable pbsmInfo) {
        var mh$ = BroadcastSystemMessageExW$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam, pbsmInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$348.BroadcastSystemMessageA$MH,"BroadcastSystemMessageA");
    }
    public static int BroadcastSystemMessageA ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam) {
        var mh$ = BroadcastSystemMessageA$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$348.BroadcastSystemMessageW$MH,"BroadcastSystemMessageW");
    }
    public static int BroadcastSystemMessageW ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam) {
        var mh$ = BroadcastSystemMessageW$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HDEVNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHDEVNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterDeviceNotificationA$MH() {
        return RuntimeHelper.requireNonNull(constants$348.RegisterDeviceNotificationA$MH,"RegisterDeviceNotificationA");
    }
    public static MemoryAddress RegisterDeviceNotificationA ( Addressable hRecipient,  Addressable NotificationFilter,  int Flags) {
        var mh$ = RegisterDeviceNotificationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, NotificationFilter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterDeviceNotificationW$MH() {
        return RuntimeHelper.requireNonNull(constants$348.RegisterDeviceNotificationW$MH,"RegisterDeviceNotificationW");
    }
    public static MemoryAddress RegisterDeviceNotificationW ( Addressable hRecipient,  Addressable NotificationFilter,  int Flags) {
        var mh$ = RegisterDeviceNotificationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, NotificationFilter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterDeviceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$349.UnregisterDeviceNotification$MH,"UnregisterDeviceNotification");
    }
    public static int UnregisterDeviceNotification ( Addressable Handle) {
        var mh$ = UnregisterDeviceNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HPOWERNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHPOWERNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterPowerSettingNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$349.RegisterPowerSettingNotification$MH,"RegisterPowerSettingNotification");
    }
    public static MemoryAddress RegisterPowerSettingNotification ( Addressable hRecipient,  Addressable PowerSettingGuid,  int Flags) {
        var mh$ = RegisterPowerSettingNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, PowerSettingGuid, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPowerSettingNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$349.UnregisterPowerSettingNotification$MH,"UnregisterPowerSettingNotification");
    }
    public static int UnregisterPowerSettingNotification ( Addressable Handle) {
        var mh$ = UnregisterPowerSettingNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$349.RegisterSuspendResumeNotification$MH,"RegisterSuspendResumeNotification");
    }
    public static MemoryAddress RegisterSuspendResumeNotification ( Addressable hRecipient,  int Flags) {
        var mh$ = RegisterSuspendResumeNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$349.UnregisterSuspendResumeNotification$MH,"UnregisterSuspendResumeNotification");
    }
    public static int UnregisterSuspendResumeNotification ( Addressable Handle) {
        var mh$ = UnregisterSuspendResumeNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$349.PostMessageA$MH,"PostMessageA");
    }
    public static int PostMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostMessageA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$350.PostMessageW$MH,"PostMessageW");
    }
    public static int PostMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostMessageW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostThreadMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$350.PostThreadMessageA$MH,"PostThreadMessageA");
    }
    public static int PostThreadMessageA ( int idThread,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostThreadMessageA$MH();
        try {
            return (int)mh$.invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostThreadMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$350.PostThreadMessageW$MH,"PostThreadMessageW");
    }
    public static int PostThreadMessageW ( int idThread,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostThreadMessageW$MH();
        try {
            return (int)mh$.invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachThreadInput$MH() {
        return RuntimeHelper.requireNonNull(constants$350.AttachThreadInput$MH,"AttachThreadInput");
    }
    public static int AttachThreadInput ( int idAttach,  int idAttachTo,  int fAttach) {
        var mh$ = AttachThreadInput$MH();
        try {
            return (int)mh$.invokeExact(idAttach, idAttachTo, fAttach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplyMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$350.ReplyMessage$MH,"ReplyMessage");
    }
    public static int ReplyMessage ( long lResult) {
        var mh$ = ReplyMessage$MH();
        try {
            return (int)mh$.invokeExact(lResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$350.WaitMessage$MH,"WaitMessage");
    }
    public static int WaitMessage () {
        var mh$ = WaitMessage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForInputIdle$MH() {
        return RuntimeHelper.requireNonNull(constants$351.WaitForInputIdle$MH,"WaitForInputIdle");
    }
    public static int WaitForInputIdle ( Addressable hProcess,  int dwMilliseconds) {
        var mh$ = WaitForInputIdle$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefWindowProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$351.DefWindowProcA$MH,"DefWindowProcA");
    }
    public static long DefWindowProcA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefWindowProcA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefWindowProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$351.DefWindowProcW$MH,"DefWindowProcW");
    }
    public static long DefWindowProcW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefWindowProcW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostQuitMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$351.PostQuitMessage$MH,"PostQuitMessage");
    }
    public static void PostQuitMessage ( int nExitCode) {
        var mh$ = PostQuitMessage$MH();
        try {
            mh$.invokeExact(nExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallWindowProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$351.CallWindowProcA$MH,"CallWindowProcA");
    }
    public static long CallWindowProcA ( Addressable lpPrevWndFunc,  Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = CallWindowProcA$MH();
        try {
            return (long)mh$.invokeExact(lpPrevWndFunc, hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallWindowProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$351.CallWindowProcW$MH,"CallWindowProcW");
    }
    public static long CallWindowProcW ( Addressable lpPrevWndFunc,  Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = CallWindowProcW$MH();
        try {
            return (long)mh$.invokeExact(lpPrevWndFunc, hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InSendMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$352.InSendMessage$MH,"InSendMessage");
    }
    public static int InSendMessage () {
        var mh$ = InSendMessage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InSendMessageEx$MH() {
        return RuntimeHelper.requireNonNull(constants$352.InSendMessageEx$MH,"InSendMessageEx");
    }
    public static int InSendMessageEx ( Addressable lpReserved) {
        var mh$ = InSendMessageEx$MH();
        try {
            return (int)mh$.invokeExact(lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDoubleClickTime$MH() {
        return RuntimeHelper.requireNonNull(constants$352.GetDoubleClickTime$MH,"GetDoubleClickTime");
    }
    public static int GetDoubleClickTime () {
        var mh$ = GetDoubleClickTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDoubleClickTime$MH() {
        return RuntimeHelper.requireNonNull(constants$352.SetDoubleClickTime$MH,"SetDoubleClickTime");
    }
    public static int SetDoubleClickTime ( int x0) {
        var mh$ = SetDoubleClickTime$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$352.RegisterClassA$MH,"RegisterClassA");
    }
    public static short RegisterClassA ( Addressable lpWndClass) {
        var mh$ = RegisterClassA$MH();
        try {
            return (short)mh$.invokeExact(lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$352.RegisterClassW$MH,"RegisterClassW");
    }
    public static short RegisterClassW ( Addressable lpWndClass) {
        var mh$ = RegisterClassW$MH();
        try {
            return (short)mh$.invokeExact(lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$353.UnregisterClassA$MH,"UnregisterClassA");
    }
    public static int UnregisterClassA ( Addressable lpClassName,  Addressable hInstance) {
        var mh$ = UnregisterClassA$MH();
        try {
            return (int)mh$.invokeExact(lpClassName, hInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$353.UnregisterClassW$MH,"UnregisterClassW");
    }
    public static int UnregisterClassW ( Addressable lpClassName,  Addressable hInstance) {
        var mh$ = UnregisterClassW$MH();
        try {
            return (int)mh$.invokeExact(lpClassName, hInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$353.GetClassInfoA$MH,"GetClassInfoA");
    }
    public static int GetClassInfoA ( Addressable hInstance,  Addressable lpClassName,  Addressable lpWndClass) {
        var mh$ = GetClassInfoA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpClassName, lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$353.GetClassInfoW$MH,"GetClassInfoW");
    }
    public static int GetClassInfoW ( Addressable hInstance,  Addressable lpClassName,  Addressable lpWndClass) {
        var mh$ = GetClassInfoW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpClassName, lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassExA$MH() {
        return RuntimeHelper.requireNonNull(constants$353.RegisterClassExA$MH,"RegisterClassExA");
    }
    public static short RegisterClassExA ( Addressable x0) {
        var mh$ = RegisterClassExA$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassExW$MH() {
        return RuntimeHelper.requireNonNull(constants$353.RegisterClassExW$MH,"RegisterClassExW");
    }
    public static short RegisterClassExW ( Addressable x0) {
        var mh$ = RegisterClassExW$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$354.GetClassInfoExA$MH,"GetClassInfoExA");
    }
    public static int GetClassInfoExA ( Addressable hInstance,  Addressable lpszClass,  Addressable lpwcx) {
        var mh$ = GetClassInfoExA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpszClass, lpwcx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$354.GetClassInfoExW$MH,"GetClassInfoExW");
    }
    public static int GetClassInfoExW ( Addressable hInstance,  Addressable lpszClass,  Addressable lpwcx) {
        var mh$ = GetClassInfoExW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpszClass, lpwcx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowExA$MH() {
        return RuntimeHelper.requireNonNull(constants$354.CreateWindowExA$MH,"CreateWindowExA");
    }
    public static MemoryAddress CreateWindowExA ( int dwExStyle,  Addressable lpClassName,  Addressable lpWindowName,  int dwStyle,  int X,  int Y,  int nWidth,  int nHeight,  Addressable hWndParent,  Addressable hMenu,  Addressable hInstance,  Addressable lpParam) {
        var mh$ = CreateWindowExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowExW$MH() {
        return RuntimeHelper.requireNonNull(constants$354.CreateWindowExW$MH,"CreateWindowExW");
    }
    public static MemoryAddress CreateWindowExW ( int dwExStyle,  Addressable lpClassName,  Addressable lpWindowName,  int dwStyle,  int X,  int Y,  int nWidth,  int nHeight,  Addressable hWndParent,  Addressable hMenu,  Addressable hInstance,  Addressable lpParam) {
        var mh$ = CreateWindowExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$355.IsWindow$MH,"IsWindow");
    }
    public static int IsWindow ( Addressable hWnd) {
        var mh$ = IsWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$355.IsMenu$MH,"IsMenu");
    }
    public static int IsMenu ( Addressable hMenu) {
        var mh$ = IsMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsChild$MH() {
        return RuntimeHelper.requireNonNull(constants$355.IsChild$MH,"IsChild");
    }
    public static int IsChild ( Addressable hWndParent,  Addressable hWnd) {
        var mh$ = IsChild$MH();
        try {
            return (int)mh$.invokeExact(hWndParent, hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$355.DestroyWindow$MH,"DestroyWindow");
    }
    public static int DestroyWindow ( Addressable hWnd) {
        var mh$ = DestroyWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$355.ShowWindow$MH,"ShowWindow");
    }
    public static int ShowWindow ( Addressable hWnd,  int nCmdShow) {
        var mh$ = ShowWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnimateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$355.AnimateWindow$MH,"AnimateWindow");
    }
    public static int AnimateWindow ( Addressable hWnd,  int dwTime,  int dwFlags) {
        var mh$ = AnimateWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dwTime, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateLayeredWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$356.UpdateLayeredWindow$MH,"UpdateLayeredWindow");
    }
    public static int UpdateLayeredWindow ( Addressable hWnd,  Addressable hdcDst,  Addressable pptDst,  Addressable psize,  Addressable hdcSrc,  Addressable pptSrc,  int crKey,  Addressable pblend,  int dwFlags) {
        var mh$ = UpdateLayeredWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hdcDst, pptDst, psize, hdcSrc, pptSrc, crKey, pblend, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUPDATELAYEREDWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle UpdateLayeredWindowIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$356.UpdateLayeredWindowIndirect$MH,"UpdateLayeredWindowIndirect");
    }
    public static int UpdateLayeredWindowIndirect ( Addressable hWnd,  Addressable pULWInfo) {
        var mh$ = UpdateLayeredWindowIndirect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pULWInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLayeredWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$356.GetLayeredWindowAttributes$MH,"GetLayeredWindowAttributes");
    }
    public static int GetLayeredWindowAttributes ( Addressable hwnd,  Addressable pcrKey,  Addressable pbAlpha,  Addressable pdwFlags) {
        var mh$ = GetLayeredWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pcrKey, pbAlpha, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$356.PrintWindow$MH,"PrintWindow");
    }
    public static int PrintWindow ( Addressable hwnd,  Addressable hdcBlt,  int nFlags) {
        var mh$ = PrintWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hdcBlt, nFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLayeredWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$356.SetLayeredWindowAttributes$MH,"SetLayeredWindowAttributes");
    }
    public static int SetLayeredWindowAttributes ( Addressable hwnd,  int crKey,  byte bAlpha,  int dwFlags) {
        var mh$ = SetLayeredWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(hwnd, crKey, bAlpha, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowWindowAsync$MH() {
        return RuntimeHelper.requireNonNull(constants$356.ShowWindowAsync$MH,"ShowWindowAsync");
    }
    public static int ShowWindowAsync ( Addressable hWnd,  int nCmdShow) {
        var mh$ = ShowWindowAsync$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlashWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$357.FlashWindow$MH,"FlashWindow");
    }
    public static int FlashWindow ( Addressable hWnd,  int bInvert) {
        var mh$ = FlashWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, bInvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PFLASHWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FlashWindowEx$MH() {
        return RuntimeHelper.requireNonNull(constants$357.FlashWindowEx$MH,"FlashWindowEx");
    }
    public static int FlashWindowEx ( Addressable pfwi) {
        var mh$ = FlashWindowEx$MH();
        try {
            return (int)mh$.invokeExact(pfwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowOwnedPopups$MH() {
        return RuntimeHelper.requireNonNull(constants$357.ShowOwnedPopups$MH,"ShowOwnedPopups");
    }
    public static int ShowOwnedPopups ( Addressable hWnd,  int fShow) {
        var mh$ = ShowOwnedPopups$MH();
        try {
            return (int)mh$.invokeExact(hWnd, fShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$357.OpenIcon$MH,"OpenIcon");
    }
    public static int OpenIcon ( Addressable hWnd) {
        var mh$ = OpenIcon$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$357.CloseWindow$MH,"CloseWindow");
    }
    public static int CloseWindow ( Addressable hWnd) {
        var mh$ = CloseWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$357.MoveWindow$MH,"MoveWindow");
    }
    public static int MoveWindow ( Addressable hWnd,  int X,  int Y,  int nWidth,  int nHeight,  int bRepaint) {
        var mh$ = MoveWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, X, Y, nWidth, nHeight, bRepaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$358.SetWindowPos$MH,"SetWindowPos");
    }
    public static int SetWindowPos ( Addressable hWnd,  Addressable hWndInsertAfter,  int X,  int Y,  int cx,  int cy,  int uFlags) {
        var mh$ = SetWindowPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hWndInsertAfter, X, Y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowPlacement$MH() {
        return RuntimeHelper.requireNonNull(constants$358.GetWindowPlacement$MH,"GetWindowPlacement");
    }
    public static int GetWindowPlacement ( Addressable hWnd,  Addressable lpwndpl) {
        var mh$ = GetWindowPlacement$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpwndpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPlacement$MH() {
        return RuntimeHelper.requireNonNull(constants$358.SetWindowPlacement$MH,"SetWindowPlacement");
    }
    public static int SetWindowPlacement ( Addressable hWnd,  Addressable lpwndpl) {
        var mh$ = SetWindowPlacement$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpwndpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDisplayAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$358.GetWindowDisplayAffinity$MH,"GetWindowDisplayAffinity");
    }
    public static int GetWindowDisplayAffinity ( Addressable hWnd,  Addressable pdwAffinity) {
        var mh$ = GetWindowDisplayAffinity$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pdwAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowDisplayAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$358.SetWindowDisplayAffinity$MH,"SetWindowDisplayAffinity");
    }
    public static int SetWindowDisplayAffinity ( Addressable hWnd,  int dwAffinity) {
        var mh$ = SetWindowDisplayAffinity$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dwAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginDeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$358.BeginDeferWindowPos$MH,"BeginDeferWindowPos");
    }
    public static MemoryAddress BeginDeferWindowPos ( int nNumWindows) {
        var mh$ = BeginDeferWindowPos$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nNumWindows);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$359.DeferWindowPos$MH,"DeferWindowPos");
    }
    public static MemoryAddress DeferWindowPos ( Addressable hWinPosInfo,  Addressable hWnd,  Addressable hWndInsertAfter,  int x,  int y,  int cx,  int cy,  int uFlags) {
        var mh$ = DeferWindowPos$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWinPosInfo, hWnd, hWndInsertAfter, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$359.EndDeferWindowPos$MH,"EndDeferWindowPos");
    }
    public static int EndDeferWindowPos ( Addressable hWinPosInfo) {
        var mh$ = EndDeferWindowPos$MH();
        try {
            return (int)mh$.invokeExact(hWinPosInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$359.IsWindowVisible$MH,"IsWindowVisible");
    }
    public static int IsWindowVisible ( Addressable hWnd) {
        var mh$ = IsWindowVisible$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsIconic$MH() {
        return RuntimeHelper.requireNonNull(constants$359.IsIconic$MH,"IsIconic");
    }
    public static int IsIconic ( Addressable hWnd) {
        var mh$ = IsIconic$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnyPopup$MH() {
        return RuntimeHelper.requireNonNull(constants$359.AnyPopup$MH,"AnyPopup");
    }
    public static int AnyPopup () {
        var mh$ = AnyPopup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BringWindowToTop$MH() {
        return RuntimeHelper.requireNonNull(constants$359.BringWindowToTop$MH,"BringWindowToTop");
    }
    public static int BringWindowToTop ( Addressable hWnd) {
        var mh$ = BringWindowToTop$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsZoomed$MH() {
        return RuntimeHelper.requireNonNull(constants$360.IsZoomed$MH,"IsZoomed");
    }
    public static int IsZoomed ( Addressable hWnd) {
        var mh$ = IsZoomed$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDLGTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateDialogParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$360.CreateDialogParamA$MH,"CreateDialogParamA");
    }
    public static MemoryAddress CreateDialogParamA ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogParamA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$360.CreateDialogParamW$MH,"CreateDialogParamW");
    }
    public static MemoryAddress CreateDialogParamW ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogParamW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogIndirectParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$360.CreateDialogIndirectParamA$MH,"CreateDialogIndirectParamA");
    }
    public static MemoryAddress CreateDialogIndirectParamA ( Addressable hInstance,  Addressable lpTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogIndirectParamA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogIndirectParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$360.CreateDialogIndirectParamW$MH,"CreateDialogIndirectParamW");
    }
    public static MemoryAddress CreateDialogIndirectParamW ( Addressable hInstance,  Addressable lpTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogIndirectParamW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$360.DialogBoxParamA$MH,"DialogBoxParamA");
    }
    public static long DialogBoxParamA ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxParamA$MH();
        try {
            return (long)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$361.DialogBoxParamW$MH,"DialogBoxParamW");
    }
    public static long DialogBoxParamW ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxParamW$MH();
        try {
            return (long)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxIndirectParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$361.DialogBoxIndirectParamA$MH,"DialogBoxIndirectParamA");
    }
    public static long DialogBoxIndirectParamA ( Addressable hInstance,  Addressable hDialogTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxIndirectParamA$MH();
        try {
            return (long)mh$.invokeExact(hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxIndirectParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$361.DialogBoxIndirectParamW$MH,"DialogBoxIndirectParamW");
    }
    public static long DialogBoxIndirectParamW ( Addressable hInstance,  Addressable hDialogTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxIndirectParamW$MH();
        try {
            return (long)mh$.invokeExact(hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$361.EndDialog$MH,"EndDialog");
    }
    public static int EndDialog ( Addressable hDlg,  long nResult) {
        var mh$ = EndDialog$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItem$MH() {
        return RuntimeHelper.requireNonNull(constants$361.GetDlgItem$MH,"GetDlgItem");
    }
    public static MemoryAddress GetDlgItem ( Addressable hDlg,  int nIDDlgItem) {
        var mh$ = GetDlgItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, nIDDlgItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemInt$MH() {
        return RuntimeHelper.requireNonNull(constants$361.SetDlgItemInt$MH,"SetDlgItemInt");
    }
    public static int SetDlgItemInt ( Addressable hDlg,  int nIDDlgItem,  int uValue,  int bSigned) {
        var mh$ = SetDlgItemInt$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, uValue, bSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemInt$MH() {
        return RuntimeHelper.requireNonNull(constants$362.GetDlgItemInt$MH,"GetDlgItemInt");
    }
    public static int GetDlgItemInt ( Addressable hDlg,  int nIDDlgItem,  Addressable lpTranslated,  int bSigned) {
        var mh$ = GetDlgItemInt$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpTranslated, bSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$362.SetDlgItemTextA$MH,"SetDlgItemTextA");
    }
    public static int SetDlgItemTextA ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString) {
        var mh$ = SetDlgItemTextA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$362.SetDlgItemTextW$MH,"SetDlgItemTextW");
    }
    public static int SetDlgItemTextW ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString) {
        var mh$ = SetDlgItemTextW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$362.GetDlgItemTextA$MH,"GetDlgItemTextA");
    }
    public static int GetDlgItemTextA ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString,  int cchMax) {
        var mh$ = GetDlgItemTextA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString, cchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$362.GetDlgItemTextW$MH,"GetDlgItemTextW");
    }
    public static int GetDlgItemTextW ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString,  int cchMax) {
        var mh$ = GetDlgItemTextW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString, cchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckDlgButton$MH() {
        return RuntimeHelper.requireNonNull(constants$362.CheckDlgButton$MH,"CheckDlgButton");
    }
    public static int CheckDlgButton ( Addressable hDlg,  int nIDButton,  int uCheck) {
        var mh$ = CheckDlgButton$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDButton, uCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckRadioButton$MH() {
        return RuntimeHelper.requireNonNull(constants$363.CheckRadioButton$MH,"CheckRadioButton");
    }
    public static int CheckRadioButton ( Addressable hDlg,  int nIDFirstButton,  int nIDLastButton,  int nIDCheckButton) {
        var mh$ = CheckRadioButton$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDFirstButton, nIDLastButton, nIDCheckButton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDlgButtonChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$363.IsDlgButtonChecked$MH,"IsDlgButtonChecked");
    }
    public static int IsDlgButtonChecked ( Addressable hDlg,  int nIDButton) {
        var mh$ = IsDlgButtonChecked$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDButton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDlgItemMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$363.SendDlgItemMessageA$MH,"SendDlgItemMessageA");
    }
    public static long SendDlgItemMessageA ( Addressable hDlg,  int nIDDlgItem,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendDlgItemMessageA$MH();
        try {
            return (long)mh$.invokeExact(hDlg, nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDlgItemMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$363.SendDlgItemMessageW$MH,"SendDlgItemMessageW");
    }
    public static long SendDlgItemMessageW ( Addressable hDlg,  int nIDDlgItem,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendDlgItemMessageW$MH();
        try {
            return (long)mh$.invokeExact(hDlg, nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextDlgGroupItem$MH() {
        return RuntimeHelper.requireNonNull(constants$363.GetNextDlgGroupItem$MH,"GetNextDlgGroupItem");
    }
    public static MemoryAddress GetNextDlgGroupItem ( Addressable hDlg,  Addressable hCtl,  int bPrevious) {
        var mh$ = GetNextDlgGroupItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, hCtl, bPrevious);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextDlgTabItem$MH() {
        return RuntimeHelper.requireNonNull(constants$363.GetNextDlgTabItem$MH,"GetNextDlgTabItem");
    }
    public static MemoryAddress GetNextDlgTabItem ( Addressable hDlg,  Addressable hCtl,  int bPrevious) {
        var mh$ = GetNextDlgTabItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, hCtl, bPrevious);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgCtrlID$MH() {
        return RuntimeHelper.requireNonNull(constants$364.GetDlgCtrlID$MH,"GetDlgCtrlID");
    }
    public static int GetDlgCtrlID ( Addressable hWnd) {
        var mh$ = GetDlgCtrlID$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogBaseUnits$MH() {
        return RuntimeHelper.requireNonNull(constants$364.GetDialogBaseUnits$MH,"GetDialogBaseUnits");
    }
    public static int GetDialogBaseUnits () {
        var mh$ = GetDialogBaseUnits$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDlgProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$364.DefDlgProcA$MH,"DefDlgProcA");
    }
    public static long DefDlgProcA ( Addressable hDlg,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefDlgProcA$MH();
        try {
            return (long)mh$.invokeExact(hDlg, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDlgProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$364.DefDlgProcW$MH,"DefDlgProcW");
    }
    public static long DefDlgProcW ( Addressable hDlg,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefDlgProcW$MH();
        try {
            return (long)mh$.invokeExact(hDlg, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


