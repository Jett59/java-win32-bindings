// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagEMRRESTOREDC {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("iType"),
            Constants$root.C_LONG$LAYOUT.withName("nSize")
        ).withName("emr"),
        Constants$root.C_LONG$LAYOUT.withName("iRelative")
    ).withName("tagEMRRESTOREDC");
    public static MemoryLayout $LAYOUT() {
        return tagEMRRESTOREDC.$struct$LAYOUT;
    }
    public static MemorySegment emr$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle iRelative$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iRelative"));
    public static VarHandle iRelative$VH() {
        return tagEMRRESTOREDC.iRelative$VH;
    }
    public static int iRelative$get(MemorySegment seg) {
        return (int)tagEMRRESTOREDC.iRelative$VH.get(seg);
    }
    public static void iRelative$set( MemorySegment seg, int x) {
        tagEMRRESTOREDC.iRelative$VH.set(seg, x);
    }
    public static int iRelative$get(MemorySegment seg, long index) {
        return (int)tagEMRRESTOREDC.iRelative$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iRelative$set(MemorySegment seg, long index, int x) {
        tagEMRRESTOREDC.iRelative$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


