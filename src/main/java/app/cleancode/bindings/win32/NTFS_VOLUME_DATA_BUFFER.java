// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class NTFS_VOLUME_DATA_BUFFER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("VolumeSerialNumber"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("NumberSectors"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("TotalClusters"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("FreeClusters"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("TotalReserved"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerSector"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerCluster"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerFileRecordSegment"),
        Constants$root.C_LONG$LAYOUT.withName("ClustersPerFileRecordSegment"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("MftValidDataLength"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("MftStartLcn"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("Mft2StartLcn"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("MftZoneStart"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("MftZoneEnd")
    );
    public static MemoryLayout $LAYOUT() {
        return NTFS_VOLUME_DATA_BUFFER.$struct$LAYOUT;
    }
    public static MemorySegment VolumeSerialNumber$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment NumberSectors$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment TotalClusters$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment FreeClusters$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment TotalReserved$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    static final VarHandle BytesPerSector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerSector"));
    public static VarHandle BytesPerSector$VH() {
        return NTFS_VOLUME_DATA_BUFFER.BytesPerSector$VH;
    }
    public static int BytesPerSector$get(MemorySegment seg) {
        return (int)NTFS_VOLUME_DATA_BUFFER.BytesPerSector$VH.get(seg);
    }
    public static void BytesPerSector$set( MemorySegment seg, int x) {
        NTFS_VOLUME_DATA_BUFFER.BytesPerSector$VH.set(seg, x);
    }
    public static int BytesPerSector$get(MemorySegment seg, long index) {
        return (int)NTFS_VOLUME_DATA_BUFFER.BytesPerSector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerSector$set(MemorySegment seg, long index, int x) {
        NTFS_VOLUME_DATA_BUFFER.BytesPerSector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerCluster$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerCluster"));
    public static VarHandle BytesPerCluster$VH() {
        return NTFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH;
    }
    public static int BytesPerCluster$get(MemorySegment seg) {
        return (int)NTFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH.get(seg);
    }
    public static void BytesPerCluster$set( MemorySegment seg, int x) {
        NTFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH.set(seg, x);
    }
    public static int BytesPerCluster$get(MemorySegment seg, long index) {
        return (int)NTFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerCluster$set(MemorySegment seg, long index, int x) {
        NTFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerFileRecordSegment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerFileRecordSegment"));
    public static VarHandle BytesPerFileRecordSegment$VH() {
        return NTFS_VOLUME_DATA_BUFFER.BytesPerFileRecordSegment$VH;
    }
    public static int BytesPerFileRecordSegment$get(MemorySegment seg) {
        return (int)NTFS_VOLUME_DATA_BUFFER.BytesPerFileRecordSegment$VH.get(seg);
    }
    public static void BytesPerFileRecordSegment$set( MemorySegment seg, int x) {
        NTFS_VOLUME_DATA_BUFFER.BytesPerFileRecordSegment$VH.set(seg, x);
    }
    public static int BytesPerFileRecordSegment$get(MemorySegment seg, long index) {
        return (int)NTFS_VOLUME_DATA_BUFFER.BytesPerFileRecordSegment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerFileRecordSegment$set(MemorySegment seg, long index, int x) {
        NTFS_VOLUME_DATA_BUFFER.BytesPerFileRecordSegment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ClustersPerFileRecordSegment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ClustersPerFileRecordSegment"));
    public static VarHandle ClustersPerFileRecordSegment$VH() {
        return NTFS_VOLUME_DATA_BUFFER.ClustersPerFileRecordSegment$VH;
    }
    public static int ClustersPerFileRecordSegment$get(MemorySegment seg) {
        return (int)NTFS_VOLUME_DATA_BUFFER.ClustersPerFileRecordSegment$VH.get(seg);
    }
    public static void ClustersPerFileRecordSegment$set( MemorySegment seg, int x) {
        NTFS_VOLUME_DATA_BUFFER.ClustersPerFileRecordSegment$VH.set(seg, x);
    }
    public static int ClustersPerFileRecordSegment$get(MemorySegment seg, long index) {
        return (int)NTFS_VOLUME_DATA_BUFFER.ClustersPerFileRecordSegment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClustersPerFileRecordSegment$set(MemorySegment seg, long index, int x) {
        NTFS_VOLUME_DATA_BUFFER.ClustersPerFileRecordSegment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment MftValidDataLength$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static MemorySegment MftStartLcn$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }
    public static MemorySegment Mft2StartLcn$slice(MemorySegment seg) {
        return seg.asSlice(72, 8);
    }
    public static MemorySegment MftZoneStart$slice(MemorySegment seg) {
        return seg.asSlice(80, 8);
    }
    public static MemorySegment MftZoneEnd$slice(MemorySegment seg) {
        return seg.asSlice(88, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


