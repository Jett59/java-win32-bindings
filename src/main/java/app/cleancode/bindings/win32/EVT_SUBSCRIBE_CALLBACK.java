// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface EVT_SUBSCRIBE_CALLBACK {

    int apply(int Action, java.lang.foreign.MemoryAddress UserContext, java.lang.foreign.MemoryAddress Event);
    static MemorySegment allocate(EVT_SUBSCRIBE_CALLBACK fi, MemorySession session) {
        return RuntimeHelper.upcallStub(EVT_SUBSCRIBE_CALLBACK.class, fi, constants$721.EVT_SUBSCRIBE_CALLBACK$FUNC, session);
    }
    static EVT_SUBSCRIBE_CALLBACK ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _Action, java.lang.foreign.MemoryAddress _UserContext, java.lang.foreign.MemoryAddress _Event) -> {
            try {
                return (int)constants$721.EVT_SUBSCRIBE_CALLBACK$MH.invokeExact((Addressable)symbol, _Action, (java.lang.foreign.Addressable)_UserContext, (java.lang.foreign.Addressable)_Event);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


