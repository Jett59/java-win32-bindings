// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$109 {

    static final FunctionDescriptor CreateWaitableTimerExW$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CreateWaitableTimerExW$MH = RuntimeHelper.downcallHandle(
        "CreateWaitableTimerExW",
        constants$109.CreateWaitableTimerExW$FUNC
    );
    static final FunctionDescriptor EnterSynchronizationBarrier$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle EnterSynchronizationBarrier$MH = RuntimeHelper.downcallHandle(
        "EnterSynchronizationBarrier",
        constants$109.EnterSynchronizationBarrier$FUNC
    );
    static final FunctionDescriptor InitializeSynchronizationBarrier$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle InitializeSynchronizationBarrier$MH = RuntimeHelper.downcallHandle(
        "InitializeSynchronizationBarrier",
        constants$109.InitializeSynchronizationBarrier$FUNC
    );
    static final FunctionDescriptor DeleteSynchronizationBarrier$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeleteSynchronizationBarrier$MH = RuntimeHelper.downcallHandle(
        "DeleteSynchronizationBarrier",
        constants$109.DeleteSynchronizationBarrier$FUNC
    );
    static final FunctionDescriptor Sleep$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Sleep$MH = RuntimeHelper.downcallHandle(
        "Sleep",
        constants$109.Sleep$FUNC
    );
    static final FunctionDescriptor WaitOnAddress$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle WaitOnAddress$MH = RuntimeHelper.downcallHandle(
        "WaitOnAddress",
        constants$109.WaitOnAddress$FUNC
    );
}


