// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class WINDOWS_10 extends WINDOWS_9 {

    public static MethodHandle _interlockedbittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._interlockedbittestandreset64$MH,"_interlockedbittestandreset64");
    }
    public static byte _interlockedbittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = _interlockedbittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_clflush$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_clflush$MH,"_mm_clflush");
    }
    public static void _mm_clflush ( Addressable Address) {
        var mh$ = _mm_clflush$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_lfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_lfence$MH,"_mm_lfence");
    }
    public static void _mm_lfence () {
        var mh$ = _mm_lfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_mfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_mfence$MH,"_mm_mfence");
    }
    public static void _mm_mfence () {
        var mh$ = _mm_mfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_sfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_sfence$MH,"_mm_sfence");
    }
    public static void _mm_sfence () {
        var mh$ = _mm_sfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_pause$MH,"_mm_pause");
    }
    public static void _mm_pause () {
        var mh$ = _mm_pause$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_prefetch$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_prefetch$MH,"_mm_prefetch");
    }
    public static void _mm_prefetch ( Addressable a,  int sel) {
        var mh$ = _mm_prefetch$MH();
        try {
            mh$.invokeExact(a, sel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _m_prefetchw$MH() {
        return RuntimeHelper.requireNonNull(constants$5._m_prefetchw$MH,"_m_prefetchw");
    }
    public static void _m_prefetchw ( Addressable Source) {
        var mh$ = _m_prefetchw$MH();
        try {
            mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_getcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$5._mm_getcsr$MH,"_mm_getcsr");
    }
    public static int _mm_getcsr () {
        var mh$ = _mm_getcsr$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_setcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$5._mm_setcsr$MH,"_mm_setcsr");
    }
    public static void _mm_setcsr ( int MxCsr) {
        var mh$ = _mm_setcsr$MH();
        try {
            mh$.invokeExact(MxCsr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mul128$MH() {
        return RuntimeHelper.requireNonNull(constants$5._mul128$MH,"_mul128");
    }
    public static long _mul128 ( long Multiplier,  long Multiplicand,  Addressable HighProduct) {
        var mh$ = _mul128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _umul128$MH() {
        return RuntimeHelper.requireNonNull(constants$5._umul128$MH,"_umul128");
    }
    public static long _umul128 ( long Multiplier,  long Multiplicand,  Addressable HighProduct) {
        var mh$ = _umul128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultiplyExtract128$MH() {
        return RuntimeHelper.requireNonNull(constants$5.MultiplyExtract128$MH,"MultiplyExtract128");
    }
    public static long MultiplyExtract128 ( long Multiplier,  long Multiplicand,  byte Shift) {
        var mh$ = MultiplyExtract128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsignedMultiplyExtract128$MH() {
        return RuntimeHelper.requireNonNull(constants$6.UnsignedMultiplyExtract128$MH,"UnsignedMultiplyExtract128");
    }
    public static long UnsignedMultiplyExtract128 ( long Multiplier,  long Multiplicand,  byte Shift) {
        var mh$ = UnsignedMultiplyExtract128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PXMM_SAVE_AREA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRUNTIME_FUNCTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNWIND_HISTORY_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNWIND_HISTORY_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPATCHER_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKNONVOLATILE_CONTEXT_POINTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_ARM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_ARM64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLDT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ReadAcquire8$MH() {
        return RuntimeHelper.requireNonNull(constants$8.ReadAcquire8$MH,"ReadAcquire8");
    }
    public static byte ReadAcquire8 ( Addressable Source) {
        var mh$ = ReadAcquire8$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence8$MH() {
        return RuntimeHelper.requireNonNull(constants$8.ReadNoFence8$MH,"ReadNoFence8");
    }
    public static byte ReadNoFence8 ( Addressable Source) {
        var mh$ = ReadNoFence8$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease8$MH() {
        return RuntimeHelper.requireNonNull(constants$8.WriteRelease8$MH,"WriteRelease8");
    }
    public static void WriteRelease8 ( Addressable Destination,  byte Value) {
        var mh$ = WriteRelease8$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence8$MH() {
        return RuntimeHelper.requireNonNull(constants$8.WriteNoFence8$MH,"WriteNoFence8");
    }
    public static void WriteNoFence8 ( Addressable Destination,  byte Value) {
        var mh$ = WriteNoFence8$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire16$MH() {
        return RuntimeHelper.requireNonNull(constants$8.ReadAcquire16$MH,"ReadAcquire16");
    }
    public static short ReadAcquire16 ( Addressable Source) {
        var mh$ = ReadAcquire16$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence16$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ReadNoFence16$MH,"ReadNoFence16");
    }
    public static short ReadNoFence16 ( Addressable Source) {
        var mh$ = ReadNoFence16$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease16$MH() {
        return RuntimeHelper.requireNonNull(constants$9.WriteRelease16$MH,"WriteRelease16");
    }
    public static void WriteRelease16 ( Addressable Destination,  short Value) {
        var mh$ = WriteRelease16$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence16$MH() {
        return RuntimeHelper.requireNonNull(constants$9.WriteNoFence16$MH,"WriteNoFence16");
    }
    public static void WriteNoFence16 ( Addressable Destination,  short Value) {
        var mh$ = WriteNoFence16$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ReadAcquire$MH,"ReadAcquire");
    }
    public static int ReadAcquire ( Addressable Source) {
        var mh$ = ReadAcquire$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ReadNoFence$MH,"ReadNoFence");
    }
    public static int ReadNoFence ( Addressable Source) {
        var mh$ = ReadNoFence$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$9.WriteRelease$MH,"WriteRelease");
    }
    public static void WriteRelease ( Addressable Destination,  int Value) {
        var mh$ = WriteRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$10.WriteNoFence$MH,"WriteNoFence");
    }
    public static void WriteNoFence ( Addressable Destination,  int Value) {
        var mh$ = WriteNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire64$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ReadAcquire64$MH,"ReadAcquire64");
    }
    public static long ReadAcquire64 ( Addressable Source) {
        var mh$ = ReadAcquire64$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence64$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ReadNoFence64$MH,"ReadNoFence64");
    }
    public static long ReadNoFence64 ( Addressable Source) {
        var mh$ = ReadNoFence64$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease64$MH() {
        return RuntimeHelper.requireNonNull(constants$10.WriteRelease64$MH,"WriteRelease64");
    }
    public static void WriteRelease64 ( Addressable Destination,  long Value) {
        var mh$ = WriteRelease64$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence64$MH() {
        return RuntimeHelper.requireNonNull(constants$10.WriteNoFence64$MH,"WriteNoFence64");
    }
    public static void WriteNoFence64 ( Addressable Destination,  long Value) {
        var mh$ = WriteNoFence64$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw8$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ReadRaw8$MH,"ReadRaw8");
    }
    public static byte ReadRaw8 ( Addressable Source) {
        var mh$ = ReadRaw8$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw8$MH() {
        return RuntimeHelper.requireNonNull(constants$11.WriteRaw8$MH,"WriteRaw8");
    }
    public static void WriteRaw8 ( Addressable Destination,  byte Value) {
        var mh$ = WriteRaw8$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw16$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ReadRaw16$MH,"ReadRaw16");
    }
    public static short ReadRaw16 ( Addressable Source) {
        var mh$ = ReadRaw16$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw16$MH() {
        return RuntimeHelper.requireNonNull(constants$11.WriteRaw16$MH,"WriteRaw16");
    }
    public static void WriteRaw16 ( Addressable Destination,  short Value) {
        var mh$ = WriteRaw16$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ReadRaw$MH,"ReadRaw");
    }
    public static int ReadRaw ( Addressable Source) {
        var mh$ = ReadRaw$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$11.WriteRaw$MH,"WriteRaw");
    }
    public static void WriteRaw ( Addressable Destination,  int Value) {
        var mh$ = WriteRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw64$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ReadRaw64$MH,"ReadRaw64");
    }
    public static long ReadRaw64 ( Addressable Source) {
        var mh$ = ReadRaw64$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw64$MH() {
        return RuntimeHelper.requireNonNull(constants$12.WriteRaw64$MH,"WriteRaw64");
    }
    public static void WriteRaw64 ( Addressable Destination,  long Value) {
        var mh$ = WriteRaw64$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadUCharAcquire$MH,"ReadUCharAcquire");
    }
    public static byte ReadUCharAcquire ( Addressable Source) {
        var mh$ = ReadUCharAcquire$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadUCharNoFence$MH,"ReadUCharNoFence");
    }
    public static byte ReadUCharNoFence ( Addressable Source) {
        var mh$ = ReadUCharNoFence$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadBooleanAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadBooleanAcquire$MH,"ReadBooleanAcquire");
    }
    public static byte ReadBooleanAcquire ( Addressable Source) {
        var mh$ = ReadBooleanAcquire$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadBooleanNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadBooleanNoFence$MH,"ReadBooleanNoFence");
    }
    public static byte ReadBooleanNoFence ( Addressable Source) {
        var mh$ = ReadBooleanNoFence$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadUCharRaw$MH,"ReadUCharRaw");
    }
    public static byte ReadUCharRaw ( Addressable Source) {
        var mh$ = ReadUCharRaw$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteUCharRelease$MH,"WriteUCharRelease");
    }
    public static void WriteUCharRelease ( Addressable Destination,  byte Value) {
        var mh$ = WriteUCharRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteUCharNoFence$MH,"WriteUCharNoFence");
    }
    public static void WriteUCharNoFence ( Addressable Destination,  byte Value) {
        var mh$ = WriteUCharNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteBooleanRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteBooleanRelease$MH,"WriteBooleanRelease");
    }
    public static void WriteBooleanRelease ( Addressable Destination,  byte Value) {
        var mh$ = WriteBooleanRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteBooleanNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteBooleanNoFence$MH,"WriteBooleanNoFence");
    }
    public static void WriteBooleanNoFence ( Addressable Destination,  byte Value) {
        var mh$ = WriteBooleanNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteUCharRaw$MH,"WriteUCharRaw");
    }
    public static void WriteUCharRaw ( Addressable Destination,  byte Value) {
        var mh$ = WriteUCharRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ReadUShortAcquire$MH,"ReadUShortAcquire");
    }
    public static short ReadUShortAcquire ( Addressable Source) {
        var mh$ = ReadUShortAcquire$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ReadUShortNoFence$MH,"ReadUShortNoFence");
    }
    public static short ReadUShortNoFence ( Addressable Source) {
        var mh$ = ReadUShortNoFence$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ReadUShortRaw$MH,"ReadUShortRaw");
    }
    public static short ReadUShortRaw ( Addressable Source) {
        var mh$ = ReadUShortRaw$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$14.WriteUShortRelease$MH,"WriteUShortRelease");
    }
    public static void WriteUShortRelease ( Addressable Destination,  short Value) {
        var mh$ = WriteUShortRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$14.WriteUShortNoFence$MH,"WriteUShortNoFence");
    }
    public static void WriteUShortNoFence ( Addressable Destination,  short Value) {
        var mh$ = WriteUShortNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$14.WriteUShortRaw$MH,"WriteUShortRaw");
    }
    public static void WriteUShortRaw ( Addressable Destination,  short Value) {
        var mh$ = WriteUShortRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ReadULongAcquire$MH,"ReadULongAcquire");
    }
    public static int ReadULongAcquire ( Addressable Source) {
        var mh$ = ReadULongAcquire$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ReadULongNoFence$MH,"ReadULongNoFence");
    }
    public static int ReadULongNoFence ( Addressable Source) {
        var mh$ = ReadULongNoFence$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ReadULongRaw$MH,"ReadULongRaw");
    }
    public static int ReadULongRaw ( Addressable Source) {
        var mh$ = ReadULongRaw$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$15.WriteULongRelease$MH,"WriteULongRelease");
    }
    public static void WriteULongRelease ( Addressable Destination,  int Value) {
        var mh$ = WriteULongRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$15.WriteULongNoFence$MH,"WriteULongNoFence");
    }
    public static void WriteULongNoFence ( Addressable Destination,  int Value) {
        var mh$ = WriteULongNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$15.WriteULongRaw$MH,"WriteULongRaw");
    }
    public static void WriteULongRaw ( Addressable Destination,  int Value) {
        var mh$ = WriteULongRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64Acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ReadULong64Acquire$MH,"ReadULong64Acquire");
    }
    public static long ReadULong64Acquire ( Addressable Source) {
        var mh$ = ReadULong64Acquire$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64NoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ReadULong64NoFence$MH,"ReadULong64NoFence");
    }
    public static long ReadULong64NoFence ( Addressable Source) {
        var mh$ = ReadULong64NoFence$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64Raw$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ReadULong64Raw$MH,"ReadULong64Raw");
    }
    public static long ReadULong64Raw ( Addressable Source) {
        var mh$ = ReadULong64Raw$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64Release$MH() {
        return RuntimeHelper.requireNonNull(constants$16.WriteULong64Release$MH,"WriteULong64Release");
    }
    public static void WriteULong64Release ( Addressable Destination,  long Value) {
        var mh$ = WriteULong64Release$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64NoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$16.WriteULong64NoFence$MH,"WriteULong64NoFence");
    }
    public static void WriteULong64NoFence ( Addressable Destination,  long Value) {
        var mh$ = WriteULong64NoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64Raw$MH() {
        return RuntimeHelper.requireNonNull(constants$16.WriteULong64Raw$MH,"WriteULong64Raw");
    }
    public static void WriteULong64Raw ( Addressable Destination,  long Value) {
        var mh$ = WriteULong64Raw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ReadPointerAcquire$MH,"ReadPointerAcquire");
    }
    public static MemoryAddress ReadPointerAcquire ( Addressable Source) {
        var mh$ = ReadPointerAcquire$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ReadPointerNoFence$MH,"ReadPointerNoFence");
    }
    public static MemoryAddress ReadPointerNoFence ( Addressable Source) {
        var mh$ = ReadPointerNoFence$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ReadPointerRaw$MH,"ReadPointerRaw");
    }
    public static MemoryAddress ReadPointerRaw ( Addressable Source) {
        var mh$ = ReadPointerRaw$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$17.WritePointerRelease$MH,"WritePointerRelease");
    }
    public static void WritePointerRelease ( Addressable Destination,  Addressable Value) {
        var mh$ = WritePointerRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$17.WritePointerNoFence$MH,"WritePointerNoFence");
    }
    public static void WritePointerNoFence ( Addressable Destination,  Addressable Value) {
        var mh$ = WritePointerNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$17.WritePointerRaw$MH,"WritePointerRaw");
    }
    public static void WritePointerRaw ( Addressable Destination,  Addressable Value) {
        var mh$ = WritePointerRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWOW64_FLOATING_SAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_LDT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_DESCRIPTOR_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_POINTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIMS_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_MASK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_MAPPING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID_AND_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID_AND_ATTRIBUTES_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_IDENTIFIER_AUTHORITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SID = Constants$root.C_POINTER$LAYOUT;
    public static int SidTypeUser() {
        return (int)1L;
    }
    public static int SidTypeGroup() {
        return (int)2L;
    }
    public static int SidTypeDomain() {
        return (int)3L;
    }
    public static int SidTypeAlias() {
        return (int)4L;
    }
    public static int SidTypeWellKnownGroup() {
        return (int)5L;
    }
    public static int SidTypeDeletedAccount() {
        return (int)6L;
    }
    public static int SidTypeInvalid() {
        return (int)7L;
    }
    public static int SidTypeUnknown() {
        return (int)8L;
    }
    public static int SidTypeComputer() {
        return (int)9L;
    }
    public static int SidTypeLabel() {
        return (int)10L;
    }
    public static int SidTypeLogonSession() {
        return (int)11L;
    }
    public static OfAddress PSID_NAME_USE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_HASH_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES_HASH = Constants$root.C_POINTER$LAYOUT;
    public static int WinNullSid() {
        return (int)0L;
    }
    public static int WinWorldSid() {
        return (int)1L;
    }
    public static int WinLocalSid() {
        return (int)2L;
    }
    public static int WinCreatorOwnerSid() {
        return (int)3L;
    }
    public static int WinCreatorGroupSid() {
        return (int)4L;
    }
    public static int WinCreatorOwnerServerSid() {
        return (int)5L;
    }
    public static int WinCreatorGroupServerSid() {
        return (int)6L;
    }
    public static int WinNtAuthoritySid() {
        return (int)7L;
    }
    public static int WinDialupSid() {
        return (int)8L;
    }
    public static int WinNetworkSid() {
        return (int)9L;
    }
    public static int WinBatchSid() {
        return (int)10L;
    }
    public static int WinInteractiveSid() {
        return (int)11L;
    }
    public static int WinServiceSid() {
        return (int)12L;
    }
    public static int WinAnonymousSid() {
        return (int)13L;
    }
    public static int WinProxySid() {
        return (int)14L;
    }
    public static int WinEnterpriseControllersSid() {
        return (int)15L;
    }
    public static int WinSelfSid() {
        return (int)16L;
    }
    public static int WinAuthenticatedUserSid() {
        return (int)17L;
    }
    public static int WinRestrictedCodeSid() {
        return (int)18L;
    }
    public static int WinTerminalServerSid() {
        return (int)19L;
    }
    public static int WinRemoteLogonIdSid() {
        return (int)20L;
    }
    public static int WinLogonIdsSid() {
        return (int)21L;
    }
    public static int WinLocalSystemSid() {
        return (int)22L;
    }
    public static int WinLocalServiceSid() {
        return (int)23L;
    }
    public static int WinNetworkServiceSid() {
        return (int)24L;
    }
    public static int WinBuiltinDomainSid() {
        return (int)25L;
    }
    public static int WinBuiltinAdministratorsSid() {
        return (int)26L;
    }
    public static int WinBuiltinUsersSid() {
        return (int)27L;
    }
    public static int WinBuiltinGuestsSid() {
        return (int)28L;
    }
    public static int WinBuiltinPowerUsersSid() {
        return (int)29L;
    }
    public static int WinBuiltinAccountOperatorsSid() {
        return (int)30L;
    }
    public static int WinBuiltinSystemOperatorsSid() {
        return (int)31L;
    }
    public static int WinBuiltinPrintOperatorsSid() {
        return (int)32L;
    }
    public static int WinBuiltinBackupOperatorsSid() {
        return (int)33L;
    }
    public static int WinBuiltinReplicatorSid() {
        return (int)34L;
    }
    public static int WinBuiltinPreWindows2000CompatibleAccessSid() {
        return (int)35L;
    }
    public static int WinBuiltinRemoteDesktopUsersSid() {
        return (int)36L;
    }
    public static int WinBuiltinNetworkConfigurationOperatorsSid() {
        return (int)37L;
    }
    public static int WinAccountAdministratorSid() {
        return (int)38L;
    }
    public static int WinAccountGuestSid() {
        return (int)39L;
    }
    public static int WinAccountKrbtgtSid() {
        return (int)40L;
    }
    public static int WinAccountDomainAdminsSid() {
        return (int)41L;
    }
    public static int WinAccountDomainUsersSid() {
        return (int)42L;
    }
    public static int WinAccountDomainGuestsSid() {
        return (int)43L;
    }
    public static int WinAccountComputersSid() {
        return (int)44L;
    }
    public static int WinAccountControllersSid() {
        return (int)45L;
    }
    public static int WinAccountCertAdminsSid() {
        return (int)46L;
    }
    public static int WinAccountSchemaAdminsSid() {
        return (int)47L;
    }
    public static int WinAccountEnterpriseAdminsSid() {
        return (int)48L;
    }
    public static int WinAccountPolicyAdminsSid() {
        return (int)49L;
    }
    public static int WinAccountRasAndIasServersSid() {
        return (int)50L;
    }
    public static int WinNTLMAuthenticationSid() {
        return (int)51L;
    }
    public static int WinDigestAuthenticationSid() {
        return (int)52L;
    }
    public static int WinSChannelAuthenticationSid() {
        return (int)53L;
    }
    public static int WinThisOrganizationSid() {
        return (int)54L;
    }
    public static int WinOtherOrganizationSid() {
        return (int)55L;
    }
    public static int WinBuiltinIncomingForestTrustBuildersSid() {
        return (int)56L;
    }
    public static int WinBuiltinPerfMonitoringUsersSid() {
        return (int)57L;
    }
    public static int WinBuiltinPerfLoggingUsersSid() {
        return (int)58L;
    }
    public static int WinBuiltinAuthorizationAccessSid() {
        return (int)59L;
    }
    public static int WinBuiltinTerminalServerLicenseServersSid() {
        return (int)60L;
    }
    public static int WinBuiltinDCOMUsersSid() {
        return (int)61L;
    }
    public static int WinBuiltinIUsersSid() {
        return (int)62L;
    }
    public static int WinIUserSid() {
        return (int)63L;
    }
    public static int WinBuiltinCryptoOperatorsSid() {
        return (int)64L;
    }
    public static int WinUntrustedLabelSid() {
        return (int)65L;
    }
    public static int WinLowLabelSid() {
        return (int)66L;
    }
    public static int WinMediumLabelSid() {
        return (int)67L;
    }
    public static int WinHighLabelSid() {
        return (int)68L;
    }
    public static int WinSystemLabelSid() {
        return (int)69L;
    }
    public static int WinWriteRestrictedCodeSid() {
        return (int)70L;
    }
    public static int WinCreatorOwnerRightsSid() {
        return (int)71L;
    }
    public static int WinCacheablePrincipalsGroupSid() {
        return (int)72L;
    }
    public static int WinNonCacheablePrincipalsGroupSid() {
        return (int)73L;
    }
    public static int WinEnterpriseReadonlyControllersSid() {
        return (int)74L;
    }
    public static int WinAccountReadonlyControllersSid() {
        return (int)75L;
    }
    public static int WinBuiltinEventLogReadersGroup() {
        return (int)76L;
    }
    public static int WinNewEnterpriseReadonlyControllersSid() {
        return (int)77L;
    }
    public static int WinBuiltinCertSvcDComAccessGroup() {
        return (int)78L;
    }
    public static int WinMediumPlusLabelSid() {
        return (int)79L;
    }
    public static int WinLocalLogonSid() {
        return (int)80L;
    }
    public static int WinConsoleLogonSid() {
        return (int)81L;
    }
    public static int WinThisOrganizationCertificateSid() {
        return (int)82L;
    }
    public static int WinApplicationPackageAuthoritySid() {
        return (int)83L;
    }
    public static int WinBuiltinAnyPackageSid() {
        return (int)84L;
    }
    public static int WinCapabilityInternetClientSid() {
        return (int)85L;
    }
    public static int WinCapabilityInternetClientServerSid() {
        return (int)86L;
    }
    public static int WinCapabilityPrivateNetworkClientServerSid() {
        return (int)87L;
    }
    public static int WinCapabilityPicturesLibrarySid() {
        return (int)88L;
    }
    public static int WinCapabilityVideosLibrarySid() {
        return (int)89L;
    }
    public static int WinCapabilityMusicLibrarySid() {
        return (int)90L;
    }
    public static int WinCapabilityDocumentsLibrarySid() {
        return (int)91L;
    }
    public static int WinCapabilitySharedUserCertificatesSid() {
        return (int)92L;
    }
    public static int WinCapabilityEnterpriseAuthenticationSid() {
        return (int)93L;
    }
    public static int WinCapabilityRemovableStorageSid() {
        return (int)94L;
    }
    public static int WinBuiltinRDSRemoteAccessServersSid() {
        return (int)95L;
    }
    public static int WinBuiltinRDSEndpointServersSid() {
        return (int)96L;
    }
    public static int WinBuiltinRDSManagementServersSid() {
        return (int)97L;
    }
    public static int WinUserModeDriversSid() {
        return (int)98L;
    }
    public static int WinBuiltinHyperVAdminsSid() {
        return (int)99L;
    }
    public static int WinAccountCloneableControllersSid() {
        return (int)100L;
    }
    public static int WinBuiltinAccessControlAssistanceOperatorsSid() {
        return (int)101L;
    }
    public static int WinBuiltinRemoteManagementUsersSid() {
        return (int)102L;
    }
    public static int WinAuthenticationAuthorityAssertedSid() {
        return (int)103L;
    }
    public static int WinAuthenticationServiceAssertedSid() {
        return (int)104L;
    }
    public static int WinLocalAccountSid() {
        return (int)105L;
    }
    public static int WinLocalAccountAndAdministratorSid() {
        return (int)106L;
    }
    public static int WinAccountProtectedUsersSid() {
        return (int)107L;
    }
    public static int WinCapabilityAppointmentsSid() {
        return (int)108L;
    }
    public static int WinCapabilityContactsSid() {
        return (int)109L;
    }
    public static int WinAccountDefaultSystemManagedSid() {
        return (int)110L;
    }
    public static int WinBuiltinDefaultSystemManagedGroupSid() {
        return (int)111L;
    }
    public static int WinBuiltinStorageReplicaAdminsSid() {
        return (int)112L;
    }
    public static int WinAccountKeyAdminsSid() {
        return (int)113L;
    }
    public static int WinAccountEnterpriseKeyAdminsSid() {
        return (int)114L;
    }
    public static int WinAuthenticationKeyTrustSid() {
        return (int)115L;
    }
    public static int WinAuthenticationKeyPropertyMFASid() {
        return (int)116L;
    }
    public static int WinAuthenticationKeyPropertyAttestationSid() {
        return (int)117L;
    }
    public static int WinAuthenticationFreshKeyAuthSid() {
        return (int)118L;
    }
    public static int WinBuiltinDeviceOwnersSid() {
        return (int)119L;
    }
    public static OfAddress PACL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACE_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_RESOURCE_ATTRIBUTE_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_SCOPED_POLICY_ID_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_MANDATORY_LABEL_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_PROCESS_TRUST_LABEL_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ACCESS_FILTER_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static int AclRevisionInformation() {
        return (int)1L;
    }
    public static int AclSizeInformation() {
        return (int)2L;
    }
    public static OfAddress PACL_REVISION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACL_SIZE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_DESCRIPTOR_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISECURITY_DESCRIPTOR_RELATIVE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_OBJECT_AI_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POBJECT_TYPE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static int AuditEventObjectAccess() {
        return (int)0L;
    }
    public static int AuditEventDirectoryServiceAccess() {
        return (int)1L;
    }
    public static OfAddress PAUDIT_EVENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRIVILEGE_SET = Constants$root.C_POINTER$LAYOUT;
    public static int AccessReasonNone() {
        return (int)0L;
    }
    public static int AccessReasonAllowedAce() {
        return (int)65536L;
    }
    public static int AccessReasonDeniedAce() {
        return (int)131072L;
    }
    public static int AccessReasonAllowedParentAce() {
        return (int)196608L;
    }
    public static int AccessReasonDeniedParentAce() {
        return (int)262144L;
    }
    public static int AccessReasonNotGrantedByCape() {
        return (int)327680L;
    }
    public static int AccessReasonNotGrantedByParentCape() {
        return (int)393216L;
    }
    public static int AccessReasonNotGrantedToAppContainer() {
        return (int)458752L;
    }
    public static int AccessReasonMissingPrivilege() {
        return (int)1048576L;
    }
    public static int AccessReasonFromPrivilege() {
        return (int)2097152L;
    }
    public static int AccessReasonIntegrityLevel() {
        return (int)3145728L;
    }
    public static int AccessReasonOwnership() {
        return (int)4194304L;
    }
    public static int AccessReasonNullDacl() {
        return (int)5242880L;
    }
    public static int AccessReasonEmptyDacl() {
        return (int)6291456L;
    }
    public static int AccessReasonNoSD() {
        return (int)7340032L;
    }
    public static int AccessReasonNoGrant() {
        return (int)8388608L;
    }
    public static int AccessReasonTrustLabel() {
        return (int)9437184L;
    }
    public static int AccessReasonFilterAce() {
        return (int)10485760L;
    }
    public static OfAddress PACCESS_REASONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_ACCESS_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_ACCESS_REPLY = Constants$root.C_POINTER$LAYOUT;
    public static int SecurityAnonymous() {
        return (int)0L;
    }
    public static int SecurityIdentification() {
        return (int)1L;
    }
    public static int SecurityImpersonation() {
        return (int)2L;
    }
    public static int SecurityDelegation() {
        return (int)3L;
    }
    public static OfAddress PSECURITY_IMPERSONATION_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int TokenPrimary() {
        return (int)1L;
    }
    public static int TokenImpersonation() {
        return (int)2L;
    }
    public static OfAddress PTOKEN_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int TokenElevationTypeDefault() {
        return (int)1L;
    }
    public static int TokenElevationTypeFull() {
        return (int)2L;
    }
    public static int TokenElevationTypeLimited() {
        return (int)3L;
    }
    public static OfAddress PTOKEN_ELEVATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int TokenUser() {
        return (int)1L;
    }
    public static int TokenGroups() {
        return (int)2L;
    }
    public static int TokenPrivileges() {
        return (int)3L;
    }
    public static int TokenOwner() {
        return (int)4L;
    }
    public static int TokenPrimaryGroup() {
        return (int)5L;
    }
    public static int TokenDefaultDacl() {
        return (int)6L;
    }
    public static int TokenSource() {
        return (int)7L;
    }
    public static int TokenType() {
        return (int)8L;
    }
    public static int TokenImpersonationLevel() {
        return (int)9L;
    }
    public static int TokenStatistics() {
        return (int)10L;
    }
    public static int TokenRestrictedSids() {
        return (int)11L;
    }
    public static int TokenSessionId() {
        return (int)12L;
    }
    public static int TokenGroupsAndPrivileges() {
        return (int)13L;
    }
    public static int TokenSessionReference() {
        return (int)14L;
    }
    public static int TokenSandBoxInert() {
        return (int)15L;
    }
    public static int TokenAuditPolicy() {
        return (int)16L;
    }
    public static int TokenOrigin() {
        return (int)17L;
    }
    public static int TokenElevationType() {
        return (int)18L;
    }
    public static int TokenLinkedToken() {
        return (int)19L;
    }
    public static int TokenElevation() {
        return (int)20L;
    }
    public static int TokenHasRestrictions() {
        return (int)21L;
    }
    public static int TokenAccessInformation() {
        return (int)22L;
    }
    public static int TokenVirtualizationAllowed() {
        return (int)23L;
    }
    public static int TokenVirtualizationEnabled() {
        return (int)24L;
    }
    public static int TokenIntegrityLevel() {
        return (int)25L;
    }
    public static int TokenUIAccess() {
        return (int)26L;
    }
    public static int TokenMandatoryPolicy() {
        return (int)27L;
    }
    public static int TokenLogonSid() {
        return (int)28L;
    }
    public static int TokenIsAppContainer() {
        return (int)29L;
    }
    public static int TokenCapabilities() {
        return (int)30L;
    }
    public static int TokenAppContainerSid() {
        return (int)31L;
    }
    public static int TokenAppContainerNumber() {
        return (int)32L;
    }
    public static int TokenUserClaimAttributes() {
        return (int)33L;
    }
    public static int TokenDeviceClaimAttributes() {
        return (int)34L;
    }
    public static int TokenRestrictedUserClaimAttributes() {
        return (int)35L;
    }
    public static int TokenRestrictedDeviceClaimAttributes() {
        return (int)36L;
    }
    public static int TokenDeviceGroups() {
        return (int)37L;
    }
    public static int TokenRestrictedDeviceGroups() {
        return (int)38L;
    }
    public static int TokenSecurityAttributes() {
        return (int)39L;
    }
    public static int TokenIsRestricted() {
        return (int)40L;
    }
    public static int TokenProcessTrustLevel() {
        return (int)41L;
    }
    public static int TokenPrivateNameSpace() {
        return (int)42L;
    }
    public static int TokenSingletonAttributes() {
        return (int)43L;
    }
    public static int TokenBnoIsolation() {
        return (int)44L;
    }
    public static int TokenChildProcessFlags() {
        return (int)45L;
    }
    public static int TokenIsLessPrivilegedAppContainer() {
        return (int)46L;
    }
    public static int TokenIsSandboxed() {
        return (int)47L;
    }
    public static int TokenOriginatingProcessTrustLevel() {
        return (int)48L;
    }
    public static int MaxTokenInfoClass() {
        return (int)49L;
    }
    public static OfAddress PTOKEN_INFORMATION_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_USER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_GROUPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_PRIVILEGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_OWNER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_PRIMARY_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_DEFAULT_DACL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_USER_CLAIMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_DEVICE_CLAIMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_GROUPS_AND_PRIVILEGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_LINKED_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ELEVATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_MANDATORY_LABEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_MANDATORY_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_ATTRIBUTES_OPAQUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ACCESS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_AUDIT_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_SOURCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ORIGIN = Constants$root.C_POINTER$LAYOUT;
    public static int MandatoryLevelUntrusted() {
        return (int)0L;
    }
    public static int MandatoryLevelLow() {
        return (int)1L;
    }
    public static int MandatoryLevelMedium() {
        return (int)2L;
    }
    public static int MandatoryLevelHigh() {
        return (int)3L;
    }
    public static int MandatoryLevelSystem() {
        return (int)4L;
    }
    public static int MandatoryLevelSecureProcess() {
        return (int)5L;
    }
    public static int MandatoryLevelCount() {
        return (int)6L;
    }
    public static OfAddress PMANDATORY_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_APPCONTAINER_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_SID_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_BNO_ISOLATION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_CONTEXT_TRACKING_MODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_QUALITY_OF_SERVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_IMPERSONATION_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SIGNING_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int SeImageSignatureNone() {
        return (int)0L;
    }
    public static int SeImageSignatureEmbedded() {
        return (int)1L;
    }
    public static int SeImageSignatureCache() {
        return (int)2L;
    }
    public static int SeImageSignatureCatalogCached() {
        return (int)3L;
    }
    public static int SeImageSignatureCatalogNotCached() {
        return (int)4L;
    }
    public static int SeImageSignatureCatalogHint() {
        return (int)5L;
    }
    public static int SeImageSignaturePackageCatalog() {
        return (int)6L;
    }
    public static OfAddress PSE_IMAGE_SIGNATURE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int SeLearningModeInvalidType() {
        return (int)0L;
    }
    public static int SeLearningModeSettings() {
        return (int)1L;
    }
    public static int SeLearningModeMax() {
        return (int)2L;
    }
    public static OfAddress PSECURITY_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSECURITY_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_SET_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_REGISTRATION_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUMS_CREATE_THREAD_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUOTA_LIMITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRATE_QUOTA_LIMIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUOTA_LIMITS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIO_COUNTERS = Constants$root.C_POINTER$LAYOUT;
    public static int PMCCounter() {
        return (int)0L;
    }
    public static int MaxHardwareCounterType() {
        return (int)1L;
    }
    public static OfAddress PHARDWARE_COUNTER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int ProcessDEPPolicy() {
        return (int)0L;
    }
    public static int ProcessASLRPolicy() {
        return (int)1L;
    }
    public static int ProcessDynamicCodePolicy() {
        return (int)2L;
    }
    public static int ProcessStrictHandleCheckPolicy() {
        return (int)3L;
    }
    public static int ProcessSystemCallDisablePolicy() {
        return (int)4L;
    }
    public static int ProcessMitigationOptionsMask() {
        return (int)5L;
    }
    public static int ProcessExtensionPointDisablePolicy() {
        return (int)6L;
    }
    public static int ProcessControlFlowGuardPolicy() {
        return (int)7L;
    }
    public static int ProcessSignaturePolicy() {
        return (int)8L;
    }
    public static int ProcessFontDisablePolicy() {
        return (int)9L;
    }
    public static int ProcessImageLoadPolicy() {
        return (int)10L;
    }
    public static int ProcessSystemCallFilterPolicy() {
        return (int)11L;
    }
    public static int ProcessPayloadRestrictionPolicy() {
        return (int)12L;
    }
    public static int ProcessChildProcessPolicy() {
        return (int)13L;
    }
    public static int ProcessSideChannelIsolationPolicy() {
        return (int)14L;
    }
    public static int ProcessUserShadowStackPolicy() {
        return (int)15L;
    }
    public static int MaxProcessMitigationPolicy() {
        return (int)16L;
    }
    public static OfAddress PPROCESS_MITIGATION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_ASLR_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_DEP_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_FONT_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_CHILD_PROCESS_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_PROCESS_ID_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_UI_RESTRICTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_SECURITY_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_JOBSET_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ToleranceLow() {
        return (int)1L;
    }
    public static int ToleranceMedium() {
        return (int)2L;
    }
    public static int ToleranceHigh() {
        return (int)3L;
    }
    public static OfAddress PJOBOBJECT_RATE_CONTROL_TOLERANCE = Constants$root.C_POINTER$LAYOUT;
    public static int ToleranceIntervalShort() {
        return (int)1L;
    }
    public static int ToleranceIntervalMedium() {
        return (int)2L;
    }
    public static int ToleranceIntervalLong() {
        return (int)3L;
    }
    public static OfAddress PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int JOB_OBJECT_NET_RATE_CONTROL_ENABLE() {
        return (int)1L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH() {
        return (int)2L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG() {
        return (int)4L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS() {
        return (int)7L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_ENABLE() {
        return (int)1L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME() {
        return (int)2L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL() {
        return (int)4L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP() {
        return (int)8L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS() {
        return (int)15L;
    }
    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE() {
        return (int)1L;
    }
    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE() {
        return (int)2L;
    }
    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS() {
        return (int)3L;
    }
    public static OfAddress PJOBOBJECT_IO_ATTRIBUTION_STATS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_IO_ATTRIBUTION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int JobObjectBasicAccountingInformation() {
        return (int)1L;
    }
    public static int JobObjectBasicLimitInformation() {
        return (int)2L;
    }
    public static int JobObjectBasicProcessIdList() {
        return (int)3L;
    }
    public static int JobObjectBasicUIRestrictions() {
        return (int)4L;
    }
    public static int JobObjectSecurityLimitInformation() {
        return (int)5L;
    }
    public static int JobObjectEndOfJobTimeInformation() {
        return (int)6L;
    }
    public static int JobObjectAssociateCompletionPortInformation() {
        return (int)7L;
    }
    public static int JobObjectBasicAndIoAccountingInformation() {
        return (int)8L;
    }
    public static int JobObjectExtendedLimitInformation() {
        return (int)9L;
    }
    public static int JobObjectJobSetInformation() {
        return (int)10L;
    }
    public static int JobObjectGroupInformation() {
        return (int)11L;
    }
    public static int JobObjectNotificationLimitInformation() {
        return (int)12L;
    }
    public static int JobObjectLimitViolationInformation() {
        return (int)13L;
    }
    public static int JobObjectGroupInformationEx() {
        return (int)14L;
    }
    public static int JobObjectCpuRateControlInformation() {
        return (int)15L;
    }
    public static int JobObjectCompletionFilter() {
        return (int)16L;
    }
    public static int JobObjectCompletionCounter() {
        return (int)17L;
    }
    public static int JobObjectReserved1Information() {
        return (int)18L;
    }
    public static int JobObjectReserved2Information() {
        return (int)19L;
    }
    public static int JobObjectReserved3Information() {
        return (int)20L;
    }
    public static int JobObjectReserved4Information() {
        return (int)21L;
    }
    public static int JobObjectReserved5Information() {
        return (int)22L;
    }
    public static int JobObjectReserved6Information() {
        return (int)23L;
    }
    public static int JobObjectReserved7Information() {
        return (int)24L;
    }
    public static int JobObjectReserved8Information() {
        return (int)25L;
    }
    public static int JobObjectReserved9Information() {
        return (int)26L;
    }
    public static int JobObjectReserved10Information() {
        return (int)27L;
    }
    public static int JobObjectReserved11Information() {
        return (int)28L;
    }
    public static int JobObjectReserved12Information() {
        return (int)29L;
    }
    public static int JobObjectReserved13Information() {
        return (int)30L;
    }
    public static int JobObjectReserved14Information() {
        return (int)31L;
    }
    public static int JobObjectNetRateControlInformation() {
        return (int)32L;
    }
    public static int JobObjectNotificationLimitInformation2() {
        return (int)33L;
    }
    public static int JobObjectLimitViolationInformation2() {
        return (int)34L;
    }
    public static int JobObjectCreateSilo() {
        return (int)35L;
    }
    public static int JobObjectSiloBasicInformation() {
        return (int)36L;
    }
    public static int JobObjectReserved15Information() {
        return (int)37L;
    }
    public static int JobObjectReserved16Information() {
        return (int)38L;
    }
    public static int JobObjectReserved17Information() {
        return (int)39L;
    }
    public static int JobObjectReserved18Information() {
        return (int)40L;
    }
    public static int JobObjectReserved19Information() {
        return (int)41L;
    }
    public static int JobObjectReserved20Information() {
        return (int)42L;
    }
    public static int JobObjectReserved21Information() {
        return (int)43L;
    }
    public static int JobObjectReserved22Information() {
        return (int)44L;
    }
    public static int JobObjectReserved23Information() {
        return (int)45L;
    }
    public static int JobObjectReserved24Information() {
        return (int)46L;
    }
    public static int JobObjectReserved25Information() {
        return (int)47L;
    }
    public static int MaxJobObjectInfoClass() {
        return (int)48L;
    }
    public static OfAddress PSILOOBJECT_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int SERVERSILO_INITING() {
        return (int)0L;
    }
    public static int SERVERSILO_STARTED() {
        return (int)1L;
    }
    public static int SERVERSILO_SHUTTING_DOWN() {
        return (int)2L;
    }
    public static int SERVERSILO_TERMINATING() {
        return (int)3L;
    }
    public static int SERVERSILO_TERMINATED() {
        return (int)4L;
    }
    public static OfAddress PSERVERSILO_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVERSILO_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int FirmwareTypeUnknown() {
        return (int)0L;
    }
    public static int FirmwareTypeBios() {
        return (int)1L;
    }
    public static int FirmwareTypeUefi() {
        return (int)2L;
    }
    public static int FirmwareTypeMax() {
        return (int)3L;
    }
    public static OfAddress PFIRMWARE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int RelationProcessorCore() {
        return (int)0L;
    }
    public static int RelationNumaNode() {
        return (int)1L;
    }
    public static int RelationCache() {
        return (int)2L;
    }
    public static int RelationProcessorPackage() {
        return (int)3L;
    }
    public static int RelationGroup() {
        return (int)4L;
    }
    public static int RelationAll() {
        return (int)65535L;
    }
    public static int CacheUnified() {
        return (int)0L;
    }
    public static int CacheInstruction() {
        return (int)1L;
    }
    public static int CacheData() {
        return (int)2L;
    }
    public static int CacheTrace() {
        return (int)3L;
    }
    public static OfAddress PCACHE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_RELATIONSHIP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNUMA_NODE_RELATIONSHIP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACHE_RELATIONSHIP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_GROUP_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_RELATIONSHIP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static int CpuSetInformation() {
        return (int)0L;
    }
    public static OfAddress PCPU_SET_INFORMATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_CPU_SET_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_POOL_ZEROING_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSTATE_FEATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSTATE_CONFIGURATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEMORY_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEMORY_BASIC_INFORMATION32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEMORY_BASIC_INFORMATION64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCFG_CALL_TARGET_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEM_ADDRESS_REQUIREMENTS = Constants$root.C_POINTER$LAYOUT;
    public static int MemExtendedParameterInvalidType() {
        return (int)0L;
    }
    public static int MemExtendedParameterAddressRequirements() {
        return (int)1L;
    }
    public static int MemExtendedParameterNumaNode() {
        return (int)2L;
    }
    public static int MemExtendedParameterPartitionHandle() {
        return (int)3L;
    }
    public static int MemExtendedParameterUserPhysicalHandle() {
        return (int)4L;
    }
    public static int MemExtendedParameterAttributeFlags() {
        return (int)5L;
    }
    public static int MemExtendedParameterMax() {
        return (int)6L;
    }
    public static OfAddress PMEM_EXTENDED_PARAMETER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEM_EXTENDED_PARAMETER = Constants$root.C_POINTER$LAYOUT;
    public static int MemSectionExtendedParameterInvalidType() {
        return (int)0L;
    }
    public static int MemSectionExtendedParameterUserPhysicalFlags() {
        return (int)1L;
    }
    public static int MemSectionExtendedParameterNumaNode() {
        return (int)2L;
    }
    public static int MemSectionExtendedParameterMax() {
        return (int)3L;
    }
    public static OfAddress PMEM_SECTION_EXTENDED_PARAMETER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_CREATE_INFO_SGX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_INIT_INFO_SGX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_CREATE_INFO_VBS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_CREATE_INFO_VBS_BASIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_LOAD_DATA_VBS_BASIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_INIT_INFO_VBS_BASIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_INIT_INFO_VBS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ID_128 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_NOTIFY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_NOTIFY_EXTENDED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SEGMENT_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREPARSE_GUID_DATA_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCRUB_DATA_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCRUB_PARITY_EXTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCRUB_PARITY_EXTENT_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCRUB_DATA_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int SharedVirtualDisksUnsupported() {
        return (int)0L;
    }
    public static int SharedVirtualDisksSupported() {
        return (int)1L;
    }
    public static int SharedVirtualDiskSnapshotsSupported() {
        return (int)3L;
    }
    public static int SharedVirtualDiskCDPSnapshotsSupported() {
        return (int)7L;
    }
    public static int SharedVirtualDiskHandleStateNone() {
        return (int)0L;
    }
    public static int SharedVirtualDiskHandleStateFileShared() {
        return (int)1L;
    }
    public static int SharedVirtualDiskHandleStateHandleShared() {
        return (int)3L;
    }
    public static OfAddress PSHARED_VIRTUAL_DISK_SUPPORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREARRANGE_FILE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREARRANGE_FILE_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHUFFLE_FILE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNETWORK_APP_INSTANCE_EA = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment GUID_MAX_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$18.GUID_MAX_POWER_SAVINGS$SEGMENT,"GUID_MAX_POWER_SAVINGS");
    }
    public static MemorySegment GUID_MIN_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.GUID_MIN_POWER_SAVINGS$SEGMENT,"GUID_MIN_POWER_SAVINGS");
    }
    public static MemorySegment GUID_TYPICAL_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.GUID_TYPICAL_POWER_SAVINGS$SEGMENT,"GUID_TYPICAL_POWER_SAVINGS");
    }
    public static MemorySegment NO_SUBGROUP_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.NO_SUBGROUP_GUID$SEGMENT,"NO_SUBGROUP_GUID");
    }
    public static MemorySegment ALL_POWERSCHEMES_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.ALL_POWERSCHEMES_GUID$SEGMENT,"ALL_POWERSCHEMES_GUID");
    }
    public static MemorySegment GUID_POWERSCHEME_PERSONALITY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.GUID_POWERSCHEME_PERSONALITY$SEGMENT,"GUID_POWERSCHEME_PERSONALITY");
    }
    public static MemorySegment GUID_ACTIVE_POWERSCHEME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$19.GUID_ACTIVE_POWERSCHEME$SEGMENT,"GUID_ACTIVE_POWERSCHEME");
    }
    public static MemorySegment GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$20.GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT,"GUID_IDLE_RESILIENCY_SUBGROUP");
    }
    public static MemorySegment GUID_IDLE_RESILIENCY_PERIOD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$20.GUID_IDLE_RESILIENCY_PERIOD$SEGMENT,"GUID_IDLE_RESILIENCY_PERIOD");
    }
    public static MemorySegment GUID_DEEP_SLEEP_ENABLED$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$20.GUID_DEEP_SLEEP_ENABLED$SEGMENT,"GUID_DEEP_SLEEP_ENABLED");
    }
    public static MemorySegment GUID_DEEP_SLEEP_PLATFORM_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$20.GUID_DEEP_SLEEP_PLATFORM_STATE$SEGMENT,"GUID_DEEP_SLEEP_PLATFORM_STATE");
    }
    public static MemorySegment GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$20.GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT,"GUID_DISK_COALESCING_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$20.GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT,"GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.GUID_VIDEO_SUBGROUP$SEGMENT,"GUID_VIDEO_SUBGROUP");
    }
    public static MemorySegment GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT,"GUID_VIDEO_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT,"GUID_VIDEO_ANNOYANCE_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT,"GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE");
    }
    public static MemorySegment GUID_VIDEO_DIM_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.GUID_VIDEO_DIM_TIMEOUT$SEGMENT,"GUID_VIDEO_DIM_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT,"GUID_VIDEO_ADAPTIVE_POWERDOWN");
    }
    public static MemorySegment GUID_MONITOR_POWER_ON$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.GUID_MONITOR_POWER_ON$SEGMENT,"GUID_MONITOR_POWER_ON");
    }
    public static MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT,"GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS");
    }
    public static MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT,"GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS");
    }
    public static MemorySegment GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT,"GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT,"GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS");
    }
    public static MemorySegment GUID_CONSOLE_DISPLAY_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.GUID_CONSOLE_DISPLAY_STATE$SEGMENT,"GUID_CONSOLE_DISPLAY_STATE");
    }
    public static MemorySegment GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$23.GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT,"GUID_ALLOW_DISPLAY_REQUIRED");
    }
    public static MemorySegment GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$23.GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT,"GUID_VIDEO_CONSOLE_LOCK_TIMEOUT");
    }
    public static MemorySegment GUID_ADVANCED_COLOR_QUALITY_BIAS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$23.GUID_ADVANCED_COLOR_QUALITY_BIAS$SEGMENT,"GUID_ADVANCED_COLOR_QUALITY_BIAS");
    }
    public static MemorySegment GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$23.GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT,"GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP");
    }
    public static MemorySegment GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$23.GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT,"GUID_NON_ADAPTIVE_INPUT_TIMEOUT");
    }
    public static MemorySegment GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$23.GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$SEGMENT,"GUID_ADAPTIVE_INPUT_CONTROLLER_STATE");
    }
    public static MemorySegment GUID_DISK_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$24.GUID_DISK_SUBGROUP$SEGMENT,"GUID_DISK_SUBGROUP");
    }
    public static MemorySegment GUID_DISK_MAX_POWER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$24.GUID_DISK_MAX_POWER$SEGMENT,"GUID_DISK_MAX_POWER");
    }
    public static MemorySegment GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$24.GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT,"GUID_DISK_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_DISK_IDLE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$24.GUID_DISK_IDLE_TIMEOUT$SEGMENT,"GUID_DISK_IDLE_TIMEOUT");
    }
    public static MemorySegment GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$24.GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT,"GUID_DISK_BURST_IGNORE_THRESHOLD");
    }
    public static MemorySegment GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$24.GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT,"GUID_DISK_ADAPTIVE_POWERDOWN");
    }
    public static MemorySegment GUID_DISK_NVME_NOPPME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.GUID_DISK_NVME_NOPPME$SEGMENT,"GUID_DISK_NVME_NOPPME");
    }
    public static MemorySegment GUID_SLEEP_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.GUID_SLEEP_SUBGROUP$SEGMENT,"GUID_SLEEP_SUBGROUP");
    }
    public static MemorySegment GUID_SLEEP_IDLE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.GUID_SLEEP_IDLE_THRESHOLD$SEGMENT,"GUID_SLEEP_IDLE_THRESHOLD");
    }
    public static MemorySegment GUID_STANDBY_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.GUID_STANDBY_TIMEOUT$SEGMENT,"GUID_STANDBY_TIMEOUT");
    }
    public static MemorySegment GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT,"GUID_UNATTEND_SLEEP_TIMEOUT");
    }
    public static MemorySegment GUID_HIBERNATE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.GUID_HIBERNATE_TIMEOUT$SEGMENT,"GUID_HIBERNATE_TIMEOUT");
    }
    public static MemorySegment GUID_HIBERNATE_FASTS4_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$26.GUID_HIBERNATE_FASTS4_POLICY$SEGMENT,"GUID_HIBERNATE_FASTS4_POLICY");
    }
    public static MemorySegment GUID_CRITICAL_POWER_TRANSITION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$26.GUID_CRITICAL_POWER_TRANSITION$SEGMENT,"GUID_CRITICAL_POWER_TRANSITION");
    }
    public static MemorySegment GUID_SYSTEM_AWAYMODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$26.GUID_SYSTEM_AWAYMODE$SEGMENT,"GUID_SYSTEM_AWAYMODE");
    }
    public static MemorySegment GUID_ALLOW_AWAYMODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$26.GUID_ALLOW_AWAYMODE$SEGMENT,"GUID_ALLOW_AWAYMODE");
    }
    public static MemorySegment GUID_USER_PRESENCE_PREDICTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$26.GUID_USER_PRESENCE_PREDICTION$SEGMENT,"GUID_USER_PRESENCE_PREDICTION");
    }
    public static MemorySegment GUID_STANDBY_BUDGET_GRACE_PERIOD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$26.GUID_STANDBY_BUDGET_GRACE_PERIOD$SEGMENT,"GUID_STANDBY_BUDGET_GRACE_PERIOD");
    }
    public static MemorySegment GUID_STANDBY_BUDGET_PERCENT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.GUID_STANDBY_BUDGET_PERCENT$SEGMENT,"GUID_STANDBY_BUDGET_PERCENT");
    }
    public static MemorySegment GUID_STANDBY_RESERVE_GRACE_PERIOD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.GUID_STANDBY_RESERVE_GRACE_PERIOD$SEGMENT,"GUID_STANDBY_RESERVE_GRACE_PERIOD");
    }
    public static MemorySegment GUID_STANDBY_RESERVE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.GUID_STANDBY_RESERVE_TIME$SEGMENT,"GUID_STANDBY_RESERVE_TIME");
    }
    public static MemorySegment GUID_STANDBY_RESET_PERCENT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.GUID_STANDBY_RESET_PERCENT$SEGMENT,"GUID_STANDBY_RESET_PERCENT");
    }
    public static MemorySegment GUID_ALLOW_STANDBY_STATES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.GUID_ALLOW_STANDBY_STATES$SEGMENT,"GUID_ALLOW_STANDBY_STATES");
    }
    public static MemorySegment GUID_ALLOW_RTC_WAKE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.GUID_ALLOW_RTC_WAKE$SEGMENT,"GUID_ALLOW_RTC_WAKE");
    }
    public static MemorySegment GUID_LEGACY_RTC_MITIGATION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$28.GUID_LEGACY_RTC_MITIGATION$SEGMENT,"GUID_LEGACY_RTC_MITIGATION");
    }
    public static MemorySegment GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$28.GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT,"GUID_ALLOW_SYSTEM_REQUIRED");
    }
    public static MemorySegment GUID_POWER_SAVING_STATUS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$28.GUID_POWER_SAVING_STATUS$SEGMENT,"GUID_POWER_SAVING_STATUS");
    }
    public static MemorySegment GUID_ENERGY_SAVER_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$28.GUID_ENERGY_SAVER_SUBGROUP$SEGMENT,"GUID_ENERGY_SAVER_SUBGROUP");
    }
    public static MemorySegment GUID_ENERGY_SAVER_BATTERY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$28.GUID_ENERGY_SAVER_BATTERY_THRESHOLD$SEGMENT,"GUID_ENERGY_SAVER_BATTERY_THRESHOLD");
    }
    public static MemorySegment GUID_ENERGY_SAVER_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$28.GUID_ENERGY_SAVER_BRIGHTNESS$SEGMENT,"GUID_ENERGY_SAVER_BRIGHTNESS");
    }
    public static MemorySegment GUID_ENERGY_SAVER_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$29.GUID_ENERGY_SAVER_POLICY$SEGMENT,"GUID_ENERGY_SAVER_POLICY");
    }
    public static MemorySegment GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$29.GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT,"GUID_SYSTEM_BUTTON_SUBGROUP");
    }
    public static MemorySegment GUID_POWERBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$29.GUID_POWERBUTTON_ACTION$SEGMENT,"GUID_POWERBUTTON_ACTION");
    }
    public static MemorySegment GUID_SLEEPBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$29.GUID_SLEEPBUTTON_ACTION$SEGMENT,"GUID_SLEEPBUTTON_ACTION");
    }
    public static MemorySegment GUID_USERINTERFACEBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$29.GUID_USERINTERFACEBUTTON_ACTION$SEGMENT,"GUID_USERINTERFACEBUTTON_ACTION");
    }
    public static MemorySegment GUID_LIDCLOSE_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$29.GUID_LIDCLOSE_ACTION$SEGMENT,"GUID_LIDCLOSE_ACTION");
    }
    public static MemorySegment GUID_LIDOPEN_POWERSTATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$30.GUID_LIDOPEN_POWERSTATE$SEGMENT,"GUID_LIDOPEN_POWERSTATE");
    }
    public static MemorySegment GUID_BATTERY_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$30.GUID_BATTERY_SUBGROUP$SEGMENT,"GUID_BATTERY_SUBGROUP");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$30.GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$30.GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$30.GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$30.GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$31.GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$31.GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$31.GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$31.GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$31.GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$31.GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_3");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$32.GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_3");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$32.GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_3");
    }
    public static MemorySegment GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$32.GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT,"GUID_PROCESSOR_SETTINGS_SUBGROUP");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$32.GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT,"GUID_PROCESSOR_THROTTLE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$32.GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT,"GUID_PROCESSOR_THROTTLE_MAXIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$32.GUID_PROCESSOR_THROTTLE_MAXIMUM_1$SEGMENT,"GUID_PROCESSOR_THROTTLE_MAXIMUM_1");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT,"GUID_PROCESSOR_THROTTLE_MINIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.GUID_PROCESSOR_THROTTLE_MINIMUM_1$SEGMENT,"GUID_PROCESSOR_THROTTLE_MINIMUM_1");
    }
    public static MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.GUID_PROCESSOR_FREQUENCY_LIMIT$SEGMENT,"GUID_PROCESSOR_FREQUENCY_LIMIT");
    }
    public static MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.GUID_PROCESSOR_FREQUENCY_LIMIT_1$SEGMENT,"GUID_PROCESSOR_FREQUENCY_LIMIT_1");
    }
    public static MemorySegment GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT,"GUID_PROCESSOR_ALLOW_THROTTLING");
    }
    public static MemorySegment GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT,"GUID_PROCESSOR_IDLESTATE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT,"GUID_PROCESSOR_PERFSTATE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.GUID_PROCESSOR_PERF_INCREASE_POLICY_1$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_POLICY_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.GUID_PROCESSOR_PERF_DECREASE_POLICY_1$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_POLICY_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.GUID_PROCESSOR_PERF_INCREASE_TIME_1$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_TIME_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$36.GUID_PROCESSOR_PERF_DECREASE_TIME_1$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_TIME_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$36.GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT,"GUID_PROCESSOR_PERF_TIME_CHECK");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$36.GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_BOOST_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$36.GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT,"GUID_PROCESSOR_PERF_BOOST_MODE");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$36.GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$SEGMENT,"GUID_PROCESSOR_PERF_AUTONOMOUS_MODE");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$36.GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$SEGMENT,"GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$37.GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$SEGMENT,"GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$37.GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$SEGMENT,"GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW");
    }
    public static MemorySegment GUID_PROCESSOR_DUTY_CYCLING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$37.GUID_PROCESSOR_DUTY_CYCLING$SEGMENT,"GUID_PROCESSOR_DUTY_CYCLING");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$37.GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT,"GUID_PROCESSOR_IDLE_ALLOW_SCALING");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_DISABLE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$37.GUID_PROCESSOR_IDLE_DISABLE$SEGMENT,"GUID_PROCESSOR_IDLE_DISABLE");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$37.GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT,"GUID_PROCESSOR_IDLE_STATE_MAXIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$38.GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT,"GUID_PROCESSOR_IDLE_TIME_CHECK");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$38.GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$38.GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$38.GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$38.GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$38.GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$39.GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$39.GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MAX_CORES");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$39.GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$39.GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MIN_CORES");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$39.GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$39.GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$40.GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$40.GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$40.GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$40.GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$40.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$40.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$41.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$41.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$41.GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT,"GUID_PROCESSOR_PARKING_CORE_OVERRIDE");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$41.GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT,"GUID_PROCESSOR_PARKING_PERF_STATE");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$41.GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT,"GUID_PROCESSOR_PARKING_PERF_STATE_1");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$41.GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$42.GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$42.GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_SOFT_PARKING_LATENCY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$42.GUID_PROCESSOR_SOFT_PARKING_LATENCY$SEGMENT,"GUID_PROCESSOR_SOFT_PARKING_LATENCY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$42.GUID_PROCESSOR_PERF_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_HISTORY_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$42.GUID_PROCESSOR_PERF_HISTORY_1$SEGMENT,"GUID_PROCESSOR_PERF_HISTORY_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$42.GUID_PROCESSOR_PERF_INCREASE_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$43.GUID_PROCESSOR_PERF_DECREASE_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$43.GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$43.GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT,"GUID_PROCESSOR_PERF_LATENCY_HINT");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$43.GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$SEGMENT,"GUID_PROCESSOR_PERF_LATENCY_HINT_PERF");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$43.GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$SEGMENT,"GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1");
    }
    public static MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$43.GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$SEGMENT,"GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK");
    }
    public static MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$44.GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$SEGMENT,"GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1");
    }
    public static MemorySegment GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$44.GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT,"GUID_PROCESSOR_DISTRIBUTE_UTILITY");
    }
    public static MemorySegment GUID_PROCESSOR_HETEROGENEOUS_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$44.GUID_PROCESSOR_HETEROGENEOUS_POLICY$SEGMENT,"GUID_PROCESSOR_HETEROGENEOUS_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_HETERO_DECREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$44.GUID_PROCESSOR_HETERO_DECREASE_TIME$SEGMENT,"GUID_PROCESSOR_HETERO_DECREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_HETERO_INCREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$44.GUID_PROCESSOR_HETERO_INCREASE_TIME$SEGMENT,"GUID_PROCESSOR_HETERO_INCREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$44.GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$45.GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CLASS0_FLOOR_PERF$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$45.GUID_PROCESSOR_CLASS0_FLOOR_PERF$SEGMENT,"GUID_PROCESSOR_CLASS0_FLOOR_PERF");
    }
    public static MemorySegment GUID_PROCESSOR_CLASS1_INITIAL_PERF$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$45.GUID_PROCESSOR_CLASS1_INITIAL_PERF$SEGMENT,"GUID_PROCESSOR_CLASS1_INITIAL_PERF");
    }
    public static MemorySegment GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$45.GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$SEGMENT,"GUID_PROCESSOR_THREAD_SCHEDULING_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$45.GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$SEGMENT,"GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY");
    }
    public static MemorySegment GUID_SYSTEM_COOLING_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$45.GUID_SYSTEM_COOLING_POLICY$SEGMENT,"GUID_SYSTEM_COOLING_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1");
    }
    public static MemorySegment GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$48.GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT,"GUID_LOCK_CONSOLE_ON_WAKE");
    }
    public static MemorySegment GUID_DEVICE_IDLE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$48.GUID_DEVICE_IDLE_POLICY$SEGMENT,"GUID_DEVICE_IDLE_POLICY");
    }
    public static MemorySegment GUID_CONNECTIVITY_IN_STANDBY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$48.GUID_CONNECTIVITY_IN_STANDBY$SEGMENT,"GUID_CONNECTIVITY_IN_STANDBY");
    }
    public static MemorySegment GUID_DISCONNECTED_STANDBY_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$48.GUID_DISCONNECTED_STANDBY_MODE$SEGMENT,"GUID_DISCONNECTED_STANDBY_MODE");
    }
    public static MemorySegment GUID_ACDC_POWER_SOURCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$48.GUID_ACDC_POWER_SOURCE$SEGMENT,"GUID_ACDC_POWER_SOURCE");
    }
    public static MemorySegment GUID_LIDSWITCH_STATE_CHANGE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$48.GUID_LIDSWITCH_STATE_CHANGE$SEGMENT,"GUID_LIDSWITCH_STATE_CHANGE");
    }
    public static MemorySegment GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$49.GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT,"GUID_BATTERY_PERCENTAGE_REMAINING");
    }
    public static MemorySegment GUID_BATTERY_COUNT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$49.GUID_BATTERY_COUNT$SEGMENT,"GUID_BATTERY_COUNT");
    }
    public static MemorySegment GUID_GLOBAL_USER_PRESENCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$49.GUID_GLOBAL_USER_PRESENCE$SEGMENT,"GUID_GLOBAL_USER_PRESENCE");
    }
    public static MemorySegment GUID_SESSION_DISPLAY_STATUS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$49.GUID_SESSION_DISPLAY_STATUS$SEGMENT,"GUID_SESSION_DISPLAY_STATUS");
    }
    public static MemorySegment GUID_SESSION_USER_PRESENCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$49.GUID_SESSION_USER_PRESENCE$SEGMENT,"GUID_SESSION_USER_PRESENCE");
    }
    public static MemorySegment GUID_IDLE_BACKGROUND_TASK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$49.GUID_IDLE_BACKGROUND_TASK$SEGMENT,"GUID_IDLE_BACKGROUND_TASK");
    }
    public static MemorySegment GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$50.GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT,"GUID_BACKGROUND_TASK_NOTIFICATION");
    }
    public static MemorySegment GUID_APPLAUNCH_BUTTON$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$50.GUID_APPLAUNCH_BUTTON$SEGMENT,"GUID_APPLAUNCH_BUTTON");
    }
    public static MemorySegment GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$50.GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT,"GUID_PCIEXPRESS_SETTINGS_SUBGROUP");
    }
    public static MemorySegment GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$50.GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT,"GUID_PCIEXPRESS_ASPM_POLICY");
    }
    public static MemorySegment GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$50.GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT,"GUID_ENABLE_SWITCH_FORCED_SHUTDOWN");
    }
    public static MemorySegment GUID_INTSTEER_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$50.GUID_INTSTEER_SUBGROUP$SEGMENT,"GUID_INTSTEER_SUBGROUP");
    }
    public static MemorySegment GUID_INTSTEER_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.GUID_INTSTEER_MODE$SEGMENT,"GUID_INTSTEER_MODE");
    }
    public static MemorySegment GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$SEGMENT,"GUID_INTSTEER_LOAD_PER_PROC_TRIGGER");
    }
    public static MemorySegment GUID_INTSTEER_TIME_UNPARK_TRIGGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.GUID_INTSTEER_TIME_UNPARK_TRIGGER$SEGMENT,"GUID_INTSTEER_TIME_UNPARK_TRIGGER");
    }
    public static MemorySegment GUID_GRAPHICS_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.GUID_GRAPHICS_SUBGROUP$SEGMENT,"GUID_GRAPHICS_SUBGROUP");
    }
    public static MemorySegment GUID_GPU_PREFERENCE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.GUID_GPU_PREFERENCE_POLICY$SEGMENT,"GUID_GPU_PREFERENCE_POLICY");
    }
    public static MemorySegment GUID_MIXED_REALITY_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.GUID_MIXED_REALITY_MODE$SEGMENT,"GUID_MIXED_REALITY_MODE");
    }
    public static MemorySegment GUID_SPR_ACTIVE_SESSION_CHANGE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.GUID_SPR_ACTIVE_SESSION_CHANGE$SEGMENT,"GUID_SPR_ACTIVE_SESSION_CHANGE");
    }
    public static int PowerSystemUnspecified() {
        return (int)0L;
    }
    public static int PowerSystemWorking() {
        return (int)1L;
    }
    public static int PowerSystemSleeping1() {
        return (int)2L;
    }
    public static int PowerSystemSleeping2() {
        return (int)3L;
    }
    public static int PowerSystemSleeping3() {
        return (int)4L;
    }
    public static int PowerSystemHibernate() {
        return (int)5L;
    }
    public static int PowerSystemShutdown() {
        return (int)6L;
    }
    public static int PowerSystemMaximum() {
        return (int)7L;
    }
    public static OfAddress PSYSTEM_POWER_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int PowerActionNone() {
        return (int)0L;
    }
    public static int PowerActionReserved() {
        return (int)1L;
    }
    public static int PowerActionSleep() {
        return (int)2L;
    }
    public static int PowerActionHibernate() {
        return (int)3L;
    }
    public static int PowerActionShutdown() {
        return (int)4L;
    }
    public static int PowerActionShutdownReset() {
        return (int)5L;
    }
    public static int PowerActionShutdownOff() {
        return (int)6L;
    }
    public static int PowerActionWarmEject() {
        return (int)7L;
    }
    public static int PowerActionDisplayOff() {
        return (int)8L;
    }
    public static OfAddress PPOWER_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static int PowerDeviceUnspecified() {
        return (int)0L;
    }
    public static int PowerDeviceD0() {
        return (int)1L;
    }
    public static int PowerDeviceD1() {
        return (int)2L;
    }
    public static int PowerDeviceD2() {
        return (int)3L;
    }
    public static int PowerDeviceD3() {
        return (int)4L;
    }
    public static int PowerDeviceMaximum() {
        return (int)5L;
    }
    public static OfAddress PDEVICE_POWER_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int PowerMonitorOff() {
        return (int)0L;
    }
    public static int PowerMonitorOn() {
        return (int)1L;
    }
    public static int PowerMonitorDim() {
        return (int)2L;
    }
    public static OfAddress PMONITOR_DISPLAY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int PowerUserPresent() {
        return (int)0L;
    }
    public static int PowerUserNotPresent() {
        return (int)1L;
    }
    public static int PowerUserInactive() {
        return (int)2L;
    }
    public static int PowerUserMaximum() {
        return (int)3L;
    }
    public static int PowerUserInvalid() {
        return (int)3L;
    }
    public static OfAddress PUSER_ACTIVITY_PRESENCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXECUTION_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int LT_DONT_CARE() {
        return (int)0L;
    }
    public static int LT_LOWEST_LATENCY() {
        return (int)1L;
    }
    public static int PowerRequestDisplayRequired() {
        return (int)0L;
    }
    public static int PowerRequestSystemRequired() {
        return (int)1L;
    }
    public static int PowerRequestAwayModeRequired() {
        return (int)2L;
    }
    public static int PowerRequestExecutionRequired() {
        return (int)3L;
    }
    public static OfAddress PPOWER_REQUEST_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCM_POWER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static int SystemPowerPolicyAc() {
        return (int)0L;
    }
    public static int SystemPowerPolicyDc() {
        return (int)1L;
    }
    public static int VerifySystemPolicyAc() {
        return (int)2L;
    }
    public static int VerifySystemPolicyDc() {
        return (int)3L;
    }
    public static int SystemPowerCapabilities() {
        return (int)4L;
    }
    public static int SystemBatteryState() {
        return (int)5L;
    }
    public static int SystemPowerStateHandler() {
        return (int)6L;
    }
    public static int ProcessorStateHandler() {
        return (int)7L;
    }
    public static int SystemPowerPolicyCurrent() {
        return (int)8L;
    }
    public static int AdministratorPowerPolicy() {
        return (int)9L;
    }
    public static int SystemReserveHiberFile() {
        return (int)10L;
    }
    public static int ProcessorInformation() {
        return (int)11L;
    }
    public static int SystemPowerInformation() {
        return (int)12L;
    }
    public static int ProcessorStateHandler2() {
        return (int)13L;
    }
    public static int LastWakeTime() {
        return (int)14L;
    }
    public static int LastSleepTime() {
        return (int)15L;
    }
    public static int SystemExecutionState() {
        return (int)16L;
    }
    public static int SystemPowerStateNotifyHandler() {
        return (int)17L;
    }
    public static int ProcessorPowerPolicyAc() {
        return (int)18L;
    }
    public static int ProcessorPowerPolicyDc() {
        return (int)19L;
    }
    public static int VerifyProcessorPowerPolicyAc() {
        return (int)20L;
    }
    public static int VerifyProcessorPowerPolicyDc() {
        return (int)21L;
    }
    public static int ProcessorPowerPolicyCurrent() {
        return (int)22L;
    }
    public static int SystemPowerStateLogging() {
        return (int)23L;
    }
    public static int SystemPowerLoggingEntry() {
        return (int)24L;
    }
    public static int SetPowerSettingValue() {
        return (int)25L;
    }
    public static int NotifyUserPowerSetting() {
        return (int)26L;
    }
    public static int PowerInformationLevelUnused0() {
        return (int)27L;
    }
    public static int SystemMonitorHiberBootPowerOff() {
        return (int)28L;
    }
    public static int SystemVideoState() {
        return (int)29L;
    }
    public static int TraceApplicationPowerMessage() {
        return (int)30L;
    }
    public static int TraceApplicationPowerMessageEnd() {
        return (int)31L;
    }
    public static int ProcessorPerfStates() {
        return (int)32L;
    }
    public static int ProcessorIdleStates() {
        return (int)33L;
    }
    public static int ProcessorCap() {
        return (int)34L;
    }
    public static int SystemWakeSource() {
        return (int)35L;
    }
    public static int SystemHiberFileInformation() {
        return (int)36L;
    }
    public static int TraceServicePowerMessage() {
        return (int)37L;
    }
    public static int ProcessorLoad() {
        return (int)38L;
    }
    public static int PowerShutdownNotification() {
        return (int)39L;
    }
    public static int MonitorCapabilities() {
        return (int)40L;
    }
    public static int SessionPowerInit() {
        return (int)41L;
    }
    public static int SessionDisplayState() {
        return (int)42L;
    }
    public static int PowerRequestCreate() {
        return (int)43L;
    }
    public static int PowerRequestAction() {
        return (int)44L;
    }
    public static int GetPowerRequestList() {
        return (int)45L;
    }
    public static int ProcessorInformationEx() {
        return (int)46L;
    }
    public static int NotifyUserModeLegacyPowerEvent() {
        return (int)47L;
    }
    public static int GroupPark() {
        return (int)48L;
    }
    public static int ProcessorIdleDomains() {
        return (int)49L;
    }
    public static int WakeTimerList() {
        return (int)50L;
    }
    public static int SystemHiberFileSize() {
        return (int)51L;
    }
    public static int ProcessorIdleStatesHv() {
        return (int)52L;
    }
    public static int ProcessorPerfStatesHv() {
        return (int)53L;
    }
    public static int ProcessorPerfCapHv() {
        return (int)54L;
    }
    public static int ProcessorSetIdle() {
        return (int)55L;
    }
    public static int LogicalProcessorIdling() {
        return (int)56L;
    }
    public static int UserPresence() {
        return (int)57L;
    }
    public static int PowerSettingNotificationName() {
        return (int)58L;
    }
    public static int GetPowerSettingValue() {
        return (int)59L;
    }
    public static int IdleResiliency() {
        return (int)60L;
    }
    public static int SessionRITState() {
        return (int)61L;
    }
    public static int SessionConnectNotification() {
        return (int)62L;
    }
    public static int SessionPowerCleanup() {
        return (int)63L;
    }
    public static int SessionLockState() {
        return (int)64L;
    }
    public static int SystemHiberbootState() {
        return (int)65L;
    }
    public static int PlatformInformation() {
        return (int)66L;
    }
    public static int PdcInvocation() {
        return (int)67L;
    }
    public static int MonitorInvocation() {
        return (int)68L;
    }
    public static int FirmwareTableInformationRegistered() {
        return (int)69L;
    }
    public static int SetShutdownSelectedTime() {
        return (int)70L;
    }
    public static int SuspendResumeInvocation() {
        return (int)71L;
    }
    public static int PlmPowerRequestCreate() {
        return (int)72L;
    }
    public static int ScreenOff() {
        return (int)73L;
    }
    public static int CsDeviceNotification() {
        return (int)74L;
    }
    public static int PlatformRole() {
        return (int)75L;
    }
    public static int LastResumePerformance() {
        return (int)76L;
    }
    public static int DisplayBurst() {
        return (int)77L;
    }
    public static int ExitLatencySamplingPercentage() {
        return (int)78L;
    }
    public static int RegisterSpmPowerSettings() {
        return (int)79L;
    }
    public static int PlatformIdleStates() {
        return (int)80L;
    }
    public static int ProcessorIdleVeto() {
        return (int)81L;
    }
    public static int PlatformIdleVeto() {
        return (int)82L;
    }
    public static int SystemBatteryStatePrecise() {
        return (int)83L;
    }
    public static int ThermalEvent() {
        return (int)84L;
    }
    public static int PowerRequestActionInternal() {
        return (int)85L;
    }
    public static int BatteryDeviceState() {
        return (int)86L;
    }
    public static int PowerInformationInternal() {
        return (int)87L;
    }
    public static int ThermalStandby() {
        return (int)88L;
    }
    public static int SystemHiberFileType() {
        return (int)89L;
    }
    public static int PhysicalPowerButtonPress() {
        return (int)90L;
    }
    public static int QueryPotentialDripsConstraint() {
        return (int)91L;
    }
    public static int EnergyTrackerCreate() {
        return (int)92L;
    }
    public static int EnergyTrackerQuery() {
        return (int)93L;
    }
    public static int UpdateBlackBoxRecorder() {
        return (int)94L;
    }
    public static int SessionAllowExternalDmaDevices() {
        return (int)95L;
    }
    public static int PowerInformationLevelMaximum() {
        return (int)96L;
    }
    public static int UserNotPresent() {
        return (int)0L;
    }
    public static int UserPresent() {
        return (int)1L;
    }
    public static int UserUnknown() {
        return (int)255L;
    }
    public static OfAddress PPOWER_USER_PRESENCE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_USER_PRESENCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_CONNECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_TIMEOUTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_RIT_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_WINLOGON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_IDLE_RESILIENCY = Constants$root.C_POINTER$LAYOUT;
    public static int MonitorRequestReasonUnknown() {
        return (int)0L;
    }
    public static int MonitorRequestReasonPowerButton() {
        return (int)1L;
    }
    public static int MonitorRequestReasonRemoteConnection() {
        return (int)2L;
    }
    public static int MonitorRequestReasonScMonitorpower() {
        return (int)3L;
    }
    public static int MonitorRequestReasonUserInput() {
        return (int)4L;
    }
    public static int MonitorRequestReasonAcDcDisplayBurst() {
        return (int)5L;
    }
    public static int MonitorRequestReasonUserDisplayBurst() {
        return (int)6L;
    }
    public static int MonitorRequestReasonPoSetSystemState() {
        return (int)7L;
    }
    public static int MonitorRequestReasonSetThreadExecutionState() {
        return (int)8L;
    }
    public static int MonitorRequestReasonFullWake() {
        return (int)9L;
    }
    public static int MonitorRequestReasonSessionUnlock() {
        return (int)10L;
    }
    public static int MonitorRequestReasonScreenOffRequest() {
        return (int)11L;
    }
    public static int MonitorRequestReasonIdleTimeout() {
        return (int)12L;
    }
    public static int MonitorRequestReasonPolicyChange() {
        return (int)13L;
    }
    public static int MonitorRequestReasonSleepButton() {
        return (int)14L;
    }
    public static int MonitorRequestReasonLid() {
        return (int)15L;
    }
}


