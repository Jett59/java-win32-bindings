// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class REFS_VOLUME_DATA_BUFFER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ByteCount"),
        Constants$root.C_LONG$LAYOUT.withName("MajorVersion"),
        Constants$root.C_LONG$LAYOUT.withName("MinorVersion"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerPhysicalSector"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("VolumeSerialNumber"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("NumberSectors"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("TotalClusters"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("FreeClusters"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("TotalReserved"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerSector"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerCluster"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("MaximumSizeOfResidentFile"),
        Constants$root.C_SHORT$LAYOUT.withName("FastTierDataFillRatio"),
        Constants$root.C_SHORT$LAYOUT.withName("SlowTierDataFillRatio"),
        Constants$root.C_LONG$LAYOUT.withName("DestagesFastTierToSlowTierRate"),
        MemoryLayout.sequenceLayout(9, MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_LARGE_INTEGER")).withName("Reserved")
    );
    public static MemoryLayout $LAYOUT() {
        return REFS_VOLUME_DATA_BUFFER.$struct$LAYOUT;
    }
    static final VarHandle ByteCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ByteCount"));
    public static VarHandle ByteCount$VH() {
        return REFS_VOLUME_DATA_BUFFER.ByteCount$VH;
    }
    public static int ByteCount$get(MemorySegment seg) {
        return (int)REFS_VOLUME_DATA_BUFFER.ByteCount$VH.get(seg);
    }
    public static void ByteCount$set( MemorySegment seg, int x) {
        REFS_VOLUME_DATA_BUFFER.ByteCount$VH.set(seg, x);
    }
    public static int ByteCount$get(MemorySegment seg, long index) {
        return (int)REFS_VOLUME_DATA_BUFFER.ByteCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteCount$set(MemorySegment seg, long index, int x) {
        REFS_VOLUME_DATA_BUFFER.ByteCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static VarHandle MajorVersion$VH() {
        return REFS_VOLUME_DATA_BUFFER.MajorVersion$VH;
    }
    public static int MajorVersion$get(MemorySegment seg) {
        return (int)REFS_VOLUME_DATA_BUFFER.MajorVersion$VH.get(seg);
    }
    public static void MajorVersion$set( MemorySegment seg, int x) {
        REFS_VOLUME_DATA_BUFFER.MajorVersion$VH.set(seg, x);
    }
    public static int MajorVersion$get(MemorySegment seg, long index) {
        return (int)REFS_VOLUME_DATA_BUFFER.MajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, int x) {
        REFS_VOLUME_DATA_BUFFER.MajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static VarHandle MinorVersion$VH() {
        return REFS_VOLUME_DATA_BUFFER.MinorVersion$VH;
    }
    public static int MinorVersion$get(MemorySegment seg) {
        return (int)REFS_VOLUME_DATA_BUFFER.MinorVersion$VH.get(seg);
    }
    public static void MinorVersion$set( MemorySegment seg, int x) {
        REFS_VOLUME_DATA_BUFFER.MinorVersion$VH.set(seg, x);
    }
    public static int MinorVersion$get(MemorySegment seg, long index) {
        return (int)REFS_VOLUME_DATA_BUFFER.MinorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, int x) {
        REFS_VOLUME_DATA_BUFFER.MinorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerPhysicalSector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerPhysicalSector"));
    public static VarHandle BytesPerPhysicalSector$VH() {
        return REFS_VOLUME_DATA_BUFFER.BytesPerPhysicalSector$VH;
    }
    public static int BytesPerPhysicalSector$get(MemorySegment seg) {
        return (int)REFS_VOLUME_DATA_BUFFER.BytesPerPhysicalSector$VH.get(seg);
    }
    public static void BytesPerPhysicalSector$set( MemorySegment seg, int x) {
        REFS_VOLUME_DATA_BUFFER.BytesPerPhysicalSector$VH.set(seg, x);
    }
    public static int BytesPerPhysicalSector$get(MemorySegment seg, long index) {
        return (int)REFS_VOLUME_DATA_BUFFER.BytesPerPhysicalSector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerPhysicalSector$set(MemorySegment seg, long index, int x) {
        REFS_VOLUME_DATA_BUFFER.BytesPerPhysicalSector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment VolumeSerialNumber$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment NumberSectors$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment TotalClusters$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment FreeClusters$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static MemorySegment TotalReserved$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    static final VarHandle BytesPerSector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerSector"));
    public static VarHandle BytesPerSector$VH() {
        return REFS_VOLUME_DATA_BUFFER.BytesPerSector$VH;
    }
    public static int BytesPerSector$get(MemorySegment seg) {
        return (int)REFS_VOLUME_DATA_BUFFER.BytesPerSector$VH.get(seg);
    }
    public static void BytesPerSector$set( MemorySegment seg, int x) {
        REFS_VOLUME_DATA_BUFFER.BytesPerSector$VH.set(seg, x);
    }
    public static int BytesPerSector$get(MemorySegment seg, long index) {
        return (int)REFS_VOLUME_DATA_BUFFER.BytesPerSector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerSector$set(MemorySegment seg, long index, int x) {
        REFS_VOLUME_DATA_BUFFER.BytesPerSector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerCluster$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerCluster"));
    public static VarHandle BytesPerCluster$VH() {
        return REFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH;
    }
    public static int BytesPerCluster$get(MemorySegment seg) {
        return (int)REFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH.get(seg);
    }
    public static void BytesPerCluster$set( MemorySegment seg, int x) {
        REFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH.set(seg, x);
    }
    public static int BytesPerCluster$get(MemorySegment seg, long index) {
        return (int)REFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerCluster$set(MemorySegment seg, long index, int x) {
        REFS_VOLUME_DATA_BUFFER.BytesPerCluster$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment MaximumSizeOfResidentFile$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }
    static final VarHandle FastTierDataFillRatio$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FastTierDataFillRatio"));
    public static VarHandle FastTierDataFillRatio$VH() {
        return REFS_VOLUME_DATA_BUFFER.FastTierDataFillRatio$VH;
    }
    public static short FastTierDataFillRatio$get(MemorySegment seg) {
        return (short)REFS_VOLUME_DATA_BUFFER.FastTierDataFillRatio$VH.get(seg);
    }
    public static void FastTierDataFillRatio$set( MemorySegment seg, short x) {
        REFS_VOLUME_DATA_BUFFER.FastTierDataFillRatio$VH.set(seg, x);
    }
    public static short FastTierDataFillRatio$get(MemorySegment seg, long index) {
        return (short)REFS_VOLUME_DATA_BUFFER.FastTierDataFillRatio$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FastTierDataFillRatio$set(MemorySegment seg, long index, short x) {
        REFS_VOLUME_DATA_BUFFER.FastTierDataFillRatio$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SlowTierDataFillRatio$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SlowTierDataFillRatio"));
    public static VarHandle SlowTierDataFillRatio$VH() {
        return REFS_VOLUME_DATA_BUFFER.SlowTierDataFillRatio$VH;
    }
    public static short SlowTierDataFillRatio$get(MemorySegment seg) {
        return (short)REFS_VOLUME_DATA_BUFFER.SlowTierDataFillRatio$VH.get(seg);
    }
    public static void SlowTierDataFillRatio$set( MemorySegment seg, short x) {
        REFS_VOLUME_DATA_BUFFER.SlowTierDataFillRatio$VH.set(seg, x);
    }
    public static short SlowTierDataFillRatio$get(MemorySegment seg, long index) {
        return (short)REFS_VOLUME_DATA_BUFFER.SlowTierDataFillRatio$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SlowTierDataFillRatio$set(MemorySegment seg, long index, short x) {
        REFS_VOLUME_DATA_BUFFER.SlowTierDataFillRatio$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DestagesFastTierToSlowTierRate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DestagesFastTierToSlowTierRate"));
    public static VarHandle DestagesFastTierToSlowTierRate$VH() {
        return REFS_VOLUME_DATA_BUFFER.DestagesFastTierToSlowTierRate$VH;
    }
    public static int DestagesFastTierToSlowTierRate$get(MemorySegment seg) {
        return (int)REFS_VOLUME_DATA_BUFFER.DestagesFastTierToSlowTierRate$VH.get(seg);
    }
    public static void DestagesFastTierToSlowTierRate$set( MemorySegment seg, int x) {
        REFS_VOLUME_DATA_BUFFER.DestagesFastTierToSlowTierRate$VH.set(seg, x);
    }
    public static int DestagesFastTierToSlowTierRate$get(MemorySegment seg, long index) {
        return (int)REFS_VOLUME_DATA_BUFFER.DestagesFastTierToSlowTierRate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DestagesFastTierToSlowTierRate$set(MemorySegment seg, long index, int x) {
        REFS_VOLUME_DATA_BUFFER.DestagesFastTierToSlowTierRate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(80, 72);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


