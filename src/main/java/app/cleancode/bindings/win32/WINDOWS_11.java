// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class WINDOWS_11 extends WINDOWS_10 {

    public static int MonitorRequestReasonBatteryCountChange() {
        return (int)16L;
    }
    public static int MonitorRequestReasonGracePeriod() {
        return (int)17L;
    }
    public static int MonitorRequestReasonPnP() {
        return (int)18L;
    }
    public static int MonitorRequestReasonDP() {
        return (int)19L;
    }
    public static int MonitorRequestReasonSxTransition() {
        return (int)20L;
    }
    public static int MonitorRequestReasonSystemIdle() {
        return (int)21L;
    }
    public static int MonitorRequestReasonNearProximity() {
        return (int)22L;
    }
    public static int MonitorRequestReasonThermalStandby() {
        return (int)23L;
    }
    public static int MonitorRequestReasonResumePdc() {
        return (int)24L;
    }
    public static int MonitorRequestReasonResumeS4() {
        return (int)25L;
    }
    public static int MonitorRequestReasonTerminal() {
        return (int)26L;
    }
    public static int MonitorRequestReasonPdcSignal() {
        return (int)27L;
    }
    public static int MonitorRequestReasonAcDcDisplayBurstSuppressed() {
        return (int)28L;
    }
    public static int MonitorRequestReasonSystemStateEntered() {
        return (int)29L;
    }
    public static int MonitorRequestReasonWinrt() {
        return (int)30L;
    }
    public static int MonitorRequestReasonUserInputKeyboard() {
        return (int)31L;
    }
    public static int MonitorRequestReasonUserInputMouse() {
        return (int)32L;
    }
    public static int MonitorRequestReasonUserInputTouch() {
        return (int)33L;
    }
    public static int MonitorRequestReasonUserInputPen() {
        return (int)34L;
    }
    public static int MonitorRequestReasonUserInputAccelerometer() {
        return (int)35L;
    }
    public static int MonitorRequestReasonUserInputHid() {
        return (int)36L;
    }
    public static int MonitorRequestReasonUserInputPoUserPresent() {
        return (int)37L;
    }
    public static int MonitorRequestReasonUserInputSessionSwitch() {
        return (int)38L;
    }
    public static int MonitorRequestReasonUserInputInitialization() {
        return (int)39L;
    }
    public static int MonitorRequestReasonPdcSignalWindowsMobilePwrNotif() {
        return (int)40L;
    }
    public static int MonitorRequestReasonPdcSignalWindowsMobileShell() {
        return (int)41L;
    }
    public static int MonitorRequestReasonPdcSignalHeyCortana() {
        return (int)42L;
    }
    public static int MonitorRequestReasonPdcSignalHolographicShell() {
        return (int)43L;
    }
    public static int MonitorRequestReasonPdcSignalFingerprint() {
        return (int)44L;
    }
    public static int MonitorRequestReasonDirectedDrips() {
        return (int)45L;
    }
    public static int MonitorRequestReasonDim() {
        return (int)46L;
    }
    public static int MonitorRequestReasonBuiltinPanel() {
        return (int)47L;
    }
    public static int MonitorRequestReasonDisplayRequiredUnDim() {
        return (int)48L;
    }
    public static int MonitorRequestReasonBatteryCountChangeSuppressed() {
        return (int)49L;
    }
    public static int MonitorRequestReasonResumeModernStandby() {
        return (int)50L;
    }
    public static int MonitorRequestReasonMax() {
        return (int)51L;
    }
    public static int MonitorRequestTypeOff() {
        return (int)0L;
    }
    public static int MonitorRequestTypeOnAndPresent() {
        return (int)1L;
    }
    public static int MonitorRequestTypeToggleOn() {
        return (int)2L;
    }
    public static OfAddress PPOWER_MONITOR_INVOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRESUME_PERFORMANCE = Constants$root.C_POINTER$LAYOUT;
    public static int PoAc() {
        return (int)0L;
    }
    public static int PoDc() {
        return (int)1L;
    }
    public static int PoHot() {
        return (int)2L;
    }
    public static int PoConditionMaximum() {
        return (int)3L;
    }
    public static OfAddress PSET_POWER_SETTING_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNOTIFY_USER_POWER_SETTING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAPPLICATIONLAUNCH_SETTING_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static int PlatformRoleUnspecified() {
        return (int)0L;
    }
    public static int PlatformRoleDesktop() {
        return (int)1L;
    }
    public static int PlatformRoleMobile() {
        return (int)2L;
    }
    public static int PlatformRoleWorkstation() {
        return (int)3L;
    }
    public static int PlatformRoleEnterpriseServer() {
        return (int)4L;
    }
    public static int PlatformRoleSOHOServer() {
        return (int)5L;
    }
    public static int PlatformRoleAppliancePC() {
        return (int)6L;
    }
    public static int PlatformRolePerformanceServer() {
        return (int)7L;
    }
    public static int PlatformRoleSlate() {
        return (int)8L;
    }
    public static int PlatformRoleMaximum() {
        return (int)9L;
    }
    public static OfAddress PPOWER_PLATFORM_ROLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_PLATFORM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBATTERY_REPORTING_SCALE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_LEGACY_PERFSTATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_IDLE_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_IDLE_STATES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_IDLE_STATES_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_PERF_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_PERF_STATES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_PERF_STATES_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_STATE_ACCOUNTING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_ACCOUNTING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_STATE_BUCKET_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_STATE_ACCOUNTING_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_ACCOUNTING_EX = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment PPM_PERFSTATE_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.PPM_PERFSTATE_CHANGE_GUID$SEGMENT,"PPM_PERFSTATE_CHANGE_GUID");
    }
    public static MemorySegment PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT,"PPM_PERFSTATE_DOMAIN_CHANGE_GUID");
    }
    public static MemorySegment PPM_IDLESTATE_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.PPM_IDLESTATE_CHANGE_GUID$SEGMENT,"PPM_IDLESTATE_CHANGE_GUID");
    }
    public static MemorySegment PPM_PERFSTATES_DATA_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.PPM_PERFSTATES_DATA_GUID$SEGMENT,"PPM_PERFSTATES_DATA_GUID");
    }
    public static MemorySegment PPM_IDLESTATES_DATA_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.PPM_IDLESTATES_DATA_GUID$SEGMENT,"PPM_IDLESTATES_DATA_GUID");
    }
    public static MemorySegment PPM_IDLE_ACCOUNTING_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$53.PPM_IDLE_ACCOUNTING_GUID$SEGMENT,"PPM_IDLE_ACCOUNTING_GUID");
    }
    public static MemorySegment PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$53.PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT,"PPM_IDLE_ACCOUNTING_EX_GUID");
    }
    public static MemorySegment PPM_THERMALCONSTRAINT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$53.PPM_THERMALCONSTRAINT_GUID$SEGMENT,"PPM_THERMALCONSTRAINT_GUID");
    }
    public static MemorySegment PPM_PERFMON_PERFSTATE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$53.PPM_PERFMON_PERFSTATE_GUID$SEGMENT,"PPM_PERFMON_PERFSTATE_GUID");
    }
    public static MemorySegment PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$53.PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT,"PPM_THERMAL_POLICY_CHANGE_GUID");
    }
    public static OfAddress PPPM_PERFSTATE_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_PERFSTATE_DOMAIN_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLESTATE_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_THERMALCHANGE_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_THERMAL_POLICY_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_ACTION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_POWER_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_POWER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_IDLESTATE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_IDLESTATE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_POWER_POLICY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_POWER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_PERFSTATE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADMINISTRATOR_POWER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static int HiberFileBucket1GB() {
        return (int)0L;
    }
    public static int HiberFileBucket2GB() {
        return (int)1L;
    }
    public static int HiberFileBucket4GB() {
        return (int)2L;
    }
    public static int HiberFileBucket8GB() {
        return (int)3L;
    }
    public static int HiberFileBucket16GB() {
        return (int)4L;
    }
    public static int HiberFileBucket32GB() {
        return (int)5L;
    }
    public static int HiberFileBucketUnlimited() {
        return (int)6L;
    }
    public static int HiberFileBucketMax() {
        return (int)7L;
    }
    public static OfAddress PHIBERFILE_BUCKET_SIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHIBERFILE_BUCKET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_POWER_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_BATTERY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DOS_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_OS2_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_VXD_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_FILE_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DATA_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_OPTIONAL_HEADER32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ROM_OPTIONAL_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_OPTIONAL_HEADER64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_OPTIONAL_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_NT_HEADERS64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_NT_HEADERS32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ROM_HEADERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_NT_HEADERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SECTION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SYMBOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SYMBOL_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_AUX_SYMBOL_TOKEN_DEF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_AUX_SYMBOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_AUX_SYMBOL_EX = Constants$root.C_POINTER$LAYOUT;
    public static int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF() {
        return (int)1L;
    }
    public static OfAddress PIMAGE_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LINENUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_BASE_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ARCHIVE_MEMBER_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_EXPORT_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_IMPORT_BY_NAME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_THUNK_DATA64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_THUNK_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_TLS_DIRECTORY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_TLS_DIRECTORY32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_THUNK_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_TLS_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_IMPORT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_BOUND_IMPORT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_BOUND_FORWARDER_REF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DELAYLOAD_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCIMAGE_DELAYLOAD_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DIRECTORY_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DIRECTORY_STRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DIR_STRING_U = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DATA_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LOAD_CONFIG_CODE_INTEGRITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION32_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION64_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LOAD_CONFIG_DIRECTORY32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LOAD_CONFIG_DIRECTORY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LOAD_CONFIG_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_HOT_PATCH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_HOT_PATCH_BASE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_HOT_PATCH_HASHES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static int PdataRefToFullXdata() {
        return (int)0L;
    }
    public static int PdataPackedUnwindFunction() {
        return (int)1L;
    }
    public static int PdataPackedUnwindFragment() {
        return (int)2L;
    }
    public static int PdataCrUnchained() {
        return (int)0L;
    }
    public static int PdataCrUnchainedSavedLr() {
        return (int)1L;
    }
    public static int PdataCrChainedWithPac() {
        return (int)2L;
    }
    public static int PdataCrChained() {
        return (int)3L;
    }
    public static OfAddress PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ENCLAVE_CONFIG32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ENCLAVE_CONFIG64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ENCLAVE_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ENCLAVE_IMPORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DEBUG_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_COFF_SYMBOLS_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFPO_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DEBUG_MISC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_FUNCTION_ENTRY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SEPARATE_DEBUG_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNON_PAGED_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ARCHITECTURE_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ARCHITECTURE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static int IMPORT_OBJECT_CODE() {
        return (int)0L;
    }
    public static int IMPORT_OBJECT_DATA() {
        return (int)1L;
    }
    public static int IMPORT_OBJECT_CONST() {
        return (int)2L;
    }
    public static int IMPORT_OBJECT_ORDINAL() {
        return (int)0L;
    }
    public static int IMPORT_OBJECT_NAME() {
        return (int)1L;
    }
    public static int IMPORT_OBJECT_NAME_NO_PREFIX() {
        return (int)2L;
    }
    public static int IMPORT_OBJECT_NAME_UNDECORATE() {
        return (int)3L;
    }
    public static int IMPORT_OBJECT_NAME_EXPORTAS() {
        return (int)4L;
    }
    public static int COMIMAGE_FLAGS_ILONLY() {
        return (int)1L;
    }
    public static int COMIMAGE_FLAGS_32BITREQUIRED() {
        return (int)2L;
    }
    public static int COMIMAGE_FLAGS_IL_LIBRARY() {
        return (int)4L;
    }
    public static int COMIMAGE_FLAGS_STRONGNAMESIGNED() {
        return (int)8L;
    }
    public static int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT() {
        return (int)16L;
    }
    public static int COMIMAGE_FLAGS_TRACKDEBUGDATA() {
        return (int)65536L;
    }
    public static int COMIMAGE_FLAGS_32BITPREFERRED() {
        return (int)131072L;
    }
    public static int COR_VERSION_MAJOR_V2() {
        return (int)2L;
    }
    public static int COR_VERSION_MAJOR() {
        return (int)2L;
    }
    public static int COR_VERSION_MINOR() {
        return (int)5L;
    }
    public static int COR_DELETED_NAME_LENGTH() {
        return (int)8L;
    }
    public static int COR_VTABLEGAP_NAME_LENGTH() {
        return (int)8L;
    }
    public static int NATIVE_TYPE_MAX_CB() {
        return (int)1L;
    }
    public static int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE() {
        return (int)255L;
    }
    public static int IMAGE_COR_MIH_METHODRVA() {
        return (int)1L;
    }
    public static int IMAGE_COR_MIH_EHRVA() {
        return (int)2L;
    }
    public static int IMAGE_COR_MIH_BASICBLOCK() {
        return (int)8L;
    }
    public static int COR_VTABLE_32BIT() {
        return (int)1L;
    }
    public static int COR_VTABLE_64BIT() {
        return (int)2L;
    }
    public static int COR_VTABLE_FROM_UNMANAGED() {
        return (int)4L;
    }
    public static int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN() {
        return (int)8L;
    }
    public static int COR_VTABLE_CALL_MOST_DERIVED() {
        return (int)16L;
    }
    public static int IMAGE_COR_EATJ_THUNK_SIZE() {
        return (int)32L;
    }
    public static int MAX_CLASS_NAME() {
        return (int)1024L;
    }
    public static int MAX_PACKAGE_NAME() {
        return (int)1024L;
    }
    public static OfAddress PIMAGE_COR20_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlCaptureStackBackTrace$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RtlCaptureStackBackTrace$MH,"RtlCaptureStackBackTrace");
    }
    public static short RtlCaptureStackBackTrace ( int FramesToSkip,  int FramesToCapture,  Addressable BackTrace,  Addressable BackTraceHash) {
        var mh$ = RtlCaptureStackBackTrace$MH();
        try {
            return (short)mh$.invokeExact(FramesToSkip, FramesToCapture, BackTrace, BackTraceHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCaptureContext$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RtlCaptureContext$MH,"RtlCaptureContext");
    }
    public static void RtlCaptureContext ( Addressable ContextRecord) {
        var mh$ = RtlCaptureContext$MH();
        try {
            mh$.invokeExact(ContextRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCaptureContext2$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RtlCaptureContext2$MH,"RtlCaptureContext2");
    }
    public static void RtlCaptureContext2 ( Addressable ContextRecord) {
        var mh$ = RtlCaptureContext2$MH();
        try {
            mh$.invokeExact(ContextRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlUnwind$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RtlUnwind$MH,"RtlUnwind");
    }
    public static void RtlUnwind ( Addressable TargetFrame,  Addressable TargetIp,  Addressable ExceptionRecord,  Addressable ReturnValue) {
        var mh$ = RtlUnwind$MH();
        try {
            mh$.invokeExact(TargetFrame, TargetIp, ExceptionRecord, ReturnValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlAddFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RtlAddFunctionTable$MH,"RtlAddFunctionTable");
    }
    public static byte RtlAddFunctionTable ( Addressable FunctionTable,  int EntryCount,  long BaseAddress) {
        var mh$ = RtlAddFunctionTable$MH();
        try {
            return (byte)mh$.invokeExact(FunctionTable, EntryCount, BaseAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlDeleteFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RtlDeleteFunctionTable$MH,"RtlDeleteFunctionTable");
    }
    public static byte RtlDeleteFunctionTable ( Addressable FunctionTable) {
        var mh$ = RtlDeleteFunctionTable$MH();
        try {
            return (byte)mh$.invokeExact(FunctionTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInstallFunctionTableCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RtlInstallFunctionTableCallback$MH,"RtlInstallFunctionTableCallback");
    }
    public static byte RtlInstallFunctionTableCallback ( long TableIdentifier,  long BaseAddress,  int Length,  Addressable Callback,  Addressable Context,  Addressable OutOfProcessCallbackDll) {
        var mh$ = RtlInstallFunctionTableCallback$MH();
        try {
            return (byte)mh$.invokeExact(TableIdentifier, BaseAddress, Length, Callback, Context, OutOfProcessCallbackDll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlAddGrowableFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RtlAddGrowableFunctionTable$MH,"RtlAddGrowableFunctionTable");
    }
    public static int RtlAddGrowableFunctionTable ( Addressable DynamicTable,  Addressable FunctionTable,  int EntryCount,  int MaximumEntryCount,  long RangeBase,  long RangeEnd) {
        var mh$ = RtlAddGrowableFunctionTable$MH();
        try {
            return (int)mh$.invokeExact(DynamicTable, FunctionTable, EntryCount, MaximumEntryCount, RangeBase, RangeEnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlGrowFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RtlGrowFunctionTable$MH,"RtlGrowFunctionTable");
    }
    public static void RtlGrowFunctionTable ( Addressable DynamicTable,  int NewEntryCount) {
        var mh$ = RtlGrowFunctionTable$MH();
        try {
            mh$.invokeExact(DynamicTable, NewEntryCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlDeleteGrowableFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RtlDeleteGrowableFunctionTable$MH,"RtlDeleteGrowableFunctionTable");
    }
    public static void RtlDeleteGrowableFunctionTable ( Addressable DynamicTable) {
        var mh$ = RtlDeleteGrowableFunctionTable$MH();
        try {
            mh$.invokeExact(DynamicTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlLookupFunctionEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RtlLookupFunctionEntry$MH,"RtlLookupFunctionEntry");
    }
    public static MemoryAddress RtlLookupFunctionEntry ( long ControlPc,  Addressable ImageBase,  Addressable HistoryTable) {
        var mh$ = RtlLookupFunctionEntry$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ControlPc, ImageBase, HistoryTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlRestoreContext$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RtlRestoreContext$MH,"RtlRestoreContext");
    }
    public static void RtlRestoreContext ( Addressable ContextRecord,  Addressable ExceptionRecord) {
        var mh$ = RtlRestoreContext$MH();
        try {
            mh$.invokeExact(ContextRecord, ExceptionRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlUnwindEx$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RtlUnwindEx$MH,"RtlUnwindEx");
    }
    public static void RtlUnwindEx ( Addressable TargetFrame,  Addressable TargetIp,  Addressable ExceptionRecord,  Addressable ReturnValue,  Addressable ContextRecord,  Addressable HistoryTable) {
        var mh$ = RtlUnwindEx$MH();
        try {
            mh$.invokeExact(TargetFrame, TargetIp, ExceptionRecord, ReturnValue, ContextRecord, HistoryTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlVirtualUnwind$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RtlVirtualUnwind$MH,"RtlVirtualUnwind");
    }
    public static MemoryAddress RtlVirtualUnwind ( int HandlerType,  long ImageBase,  long ControlPc,  Addressable FunctionEntry,  Addressable ContextRecord,  Addressable HandlerData,  Addressable EstablisherFrame,  Addressable ContextPointers) {
        var mh$ = RtlVirtualUnwind$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(HandlerType, ImageBase, ControlPc, FunctionEntry, ContextRecord, HandlerData, EstablisherFrame, ContextPointers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlRaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RtlRaiseException$MH,"RtlRaiseException");
    }
    public static void RtlRaiseException ( Addressable ExceptionRecord) {
        var mh$ = RtlRaiseException$MH();
        try {
            mh$.invokeExact(ExceptionRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlPcToFileHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RtlPcToFileHeader$MH,"RtlPcToFileHeader");
    }
    public static MemoryAddress RtlPcToFileHeader ( Addressable PcValue,  Addressable BaseOfImage) {
        var mh$ = RtlPcToFileHeader$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(PcValue, BaseOfImage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCompareMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RtlCompareMemory$MH,"RtlCompareMemory");
    }
    public static long RtlCompareMemory ( Addressable Source1,  Addressable Source2,  long Length) {
        var mh$ = RtlCompareMemory$MH();
        try {
            return (long)mh$.invokeExact(Source1, Source2, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSLIST_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlInitializeSListHead$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RtlInitializeSListHead$MH,"RtlInitializeSListHead");
    }
    public static void RtlInitializeSListHead ( Addressable ListHead) {
        var mh$ = RtlInitializeSListHead$MH();
        try {
            mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFirstEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RtlFirstEntrySList$MH,"RtlFirstEntrySList");
    }
    public static MemoryAddress RtlFirstEntrySList ( Addressable ListHead) {
        var mh$ = RtlFirstEntrySList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPopEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RtlInterlockedPopEntrySList$MH,"RtlInterlockedPopEntrySList");
    }
    public static MemoryAddress RtlInterlockedPopEntrySList ( Addressable ListHead) {
        var mh$ = RtlInterlockedPopEntrySList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPushEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RtlInterlockedPushEntrySList$MH,"RtlInterlockedPushEntrySList");
    }
    public static MemoryAddress RtlInterlockedPushEntrySList ( Addressable ListHead,  Addressable ListEntry) {
        var mh$ = RtlInterlockedPushEntrySList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead, ListEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPushListSListEx$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RtlInterlockedPushListSListEx$MH,"RtlInterlockedPushListSListEx");
    }
    public static MemoryAddress RtlInterlockedPushListSListEx ( Addressable ListHead,  Addressable List,  Addressable ListEnd,  int Count) {
        var mh$ = RtlInterlockedPushListSListEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead, List, ListEnd, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedFlushSList$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RtlInterlockedFlushSList$MH,"RtlInterlockedFlushSList");
    }
    public static MemoryAddress RtlInterlockedFlushSList ( Addressable ListHead) {
        var mh$ = RtlInterlockedFlushSList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlQueryDepthSList$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RtlQueryDepthSList$MH,"RtlQueryDepthSList");
    }
    public static short RtlQueryDepthSList ( Addressable ListHead) {
        var mh$ = RtlQueryDepthSList$MH();
        try {
            return (short)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlGetReturnAddressHijackTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RtlGetReturnAddressHijackTarget$MH,"RtlGetReturnAddressHijackTarget");
    }
    public static long RtlGetReturnAddressHijackTarget () {
        var mh$ = RtlGetReturnAddressHijackTarget$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRTL_RUN_ONCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_BARRIER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle HEAP_MAKE_TAG_FLAGS$MH() {
        return RuntimeHelper.requireNonNull(constants$58.HEAP_MAKE_TAG_FLAGS$MH,"HEAP_MAKE_TAG_FLAGS");
    }
    public static int HEAP_MAKE_TAG_FLAGS ( int TagBase,  int Tag) {
        var mh$ = HEAP_MAKE_TAG_FLAGS$MH();
        try {
            return (int)mh$.invokeExact(TagBase, Tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSecureZeroMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RtlSecureZeroMemory$MH,"RtlSecureZeroMemory");
    }
    public static MemoryAddress RtlSecureZeroMemory ( Addressable ptr,  long cnt) {
        var mh$ = RtlSecureZeroMemory$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ptr, cnt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMESSAGE_RESOURCE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMESSAGE_RESOURCE_BLOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMESSAGE_RESOURCE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_OSVERSIONINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_OSVERSIONINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle VerSetConditionMask$MH() {
        return RuntimeHelper.requireNonNull(constants$58.VerSetConditionMask$MH,"VerSetConditionMask");
    }
    public static long VerSetConditionMask ( long ConditionMask,  int TypeMask,  byte Condition) {
        var mh$ = VerSetConditionMask$MH();
        try {
            return (long)mh$.invokeExact(ConditionMask, TypeMask, Condition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlGetProductInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RtlGetProductInfo$MH,"RtlGetProductInfo");
    }
    public static byte RtlGetProductInfo ( int OSMajorVersion,  int OSMinorVersion,  int SpMajorVersion,  int SpMinorVersion,  Addressable ReturnedProductType) {
        var mh$ = RtlGetProductInfo$MH();
        try {
            return (byte)mh$.invokeExact(OSMajorVersion, OSMinorVersion, SpMajorVersion, SpMinorVersion, ReturnedProductType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int UmsThreadInvalidInfoClass() {
        return (int)0L;
    }
    public static int UmsThreadUserContext() {
        return (int)1L;
    }
    public static int UmsThreadPriority() {
        return (int)2L;
    }
    public static int UmsThreadAffinity() {
        return (int)3L;
    }
    public static int UmsThreadTeb() {
        return (int)4L;
    }
    public static int UmsThreadIsSuspended() {
        return (int)5L;
    }
    public static int UmsThreadIsTerminated() {
        return (int)6L;
    }
    public static int UmsThreadMaxInfoClass() {
        return (int)7L;
    }
    public static OfAddress PRTL_UMS_THREAD_INFO_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static int UmsSchedulerStartup() {
        return (int)0L;
    }
    public static int UmsSchedulerThreadBlocked() {
        return (int)1L;
    }
    public static int UmsSchedulerThreadYield() {
        return (int)2L;
    }
    public static OfAddress PRTL_UMS_SCHEDULER_REASON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlCrc32$MH() {
        return RuntimeHelper.requireNonNull(constants$59.RtlCrc32$MH,"RtlCrc32");
    }
    public static int RtlCrc32 ( Addressable Buffer,  long Size,  int InitialCrc) {
        var mh$ = RtlCrc32$MH();
        try {
            return (int)mh$.invokeExact(Buffer, Size, InitialCrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCrc64$MH() {
        return RuntimeHelper.requireNonNull(constants$59.RtlCrc64$MH,"RtlCrc64");
    }
    public static long RtlCrc64 ( Addressable Buffer,  long Size,  long InitialCrc) {
        var mh$ = RtlCrc64$MH();
        try {
            return (long)mh$.invokeExact(Buffer, Size, InitialCrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int OS_DEPLOYMENT_STANDARD() {
        return (int)1L;
    }
    public static int OS_DEPLOYMENT_COMPACT() {
        return (int)2L;
    }
    public static MethodHandle RtlOsDeploymentState$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RtlOsDeploymentState$MH,"RtlOsDeploymentState");
    }
    public static int RtlOsDeploymentState ( int Flags) {
        var mh$ = RtlOsDeploymentState$MH();
        try {
            return (int)mh$.invokeExact(Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PNV_MEMORY_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlGetNonVolatileToken$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RtlGetNonVolatileToken$MH,"RtlGetNonVolatileToken");
    }
    public static int RtlGetNonVolatileToken ( Addressable NvBuffer,  long Size,  Addressable NvToken) {
        var mh$ = RtlGetNonVolatileToken$MH();
        try {
            return (int)mh$.invokeExact(NvBuffer, Size, NvToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFreeNonVolatileToken$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RtlFreeNonVolatileToken$MH,"RtlFreeNonVolatileToken");
    }
    public static int RtlFreeNonVolatileToken ( Addressable NvToken) {
        var mh$ = RtlFreeNonVolatileToken$MH();
        try {
            return (int)mh$.invokeExact(NvToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFlushNonVolatileMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RtlFlushNonVolatileMemory$MH,"RtlFlushNonVolatileMemory");
    }
    public static int RtlFlushNonVolatileMemory ( Addressable NvToken,  Addressable NvBuffer,  long Size,  int Flags) {
        var mh$ = RtlFlushNonVolatileMemory$MH();
        try {
            return (int)mh$.invokeExact(NvToken, NvBuffer, Size, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlDrainNonVolatileFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RtlDrainNonVolatileFlush$MH,"RtlDrainNonVolatileFlush");
    }
    public static int RtlDrainNonVolatileFlush ( Addressable NvToken) {
        var mh$ = RtlDrainNonVolatileFlush$MH();
        try {
            return (int)mh$.invokeExact(NvToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlWriteNonVolatileMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RtlWriteNonVolatileMemory$MH,"RtlWriteNonVolatileMemory");
    }
    public static int RtlWriteNonVolatileMemory ( Addressable NvToken,  Addressable NvDestination,  Addressable Source,  long Size,  int Flags) {
        var mh$ = RtlWriteNonVolatileMemory$MH();
        try {
            return (int)mh$.invokeExact(NvToken, NvDestination, Source, Size, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFillNonVolatileMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$61.RtlFillNonVolatileMemory$MH,"RtlFillNonVolatileMemory");
    }
    public static int RtlFillNonVolatileMemory ( Addressable NvToken,  Addressable NvDestination,  long Size,  byte Value,  int Flags) {
        var mh$ = RtlFillNonVolatileMemory$MH();
        try {
            return (int)mh$.invokeExact(NvToken, NvDestination, Size, Value, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFlushNonVolatileMemoryRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$61.RtlFlushNonVolatileMemoryRanges$MH,"RtlFlushNonVolatileMemoryRanges");
    }
    public static int RtlFlushNonVolatileMemoryRanges ( Addressable NvToken,  Addressable NvRanges,  long NumRanges,  int Flags) {
        var mh$ = RtlFlushNonVolatileMemoryRanges$MH();
        try {
            return (int)mh$.invokeExact(NvToken, NvRanges, NumRanges, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCORRELATION_VECTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlInitializeCorrelationVector$MH() {
        return RuntimeHelper.requireNonNull(constants$61.RtlInitializeCorrelationVector$MH,"RtlInitializeCorrelationVector");
    }
    public static int RtlInitializeCorrelationVector ( Addressable CorrelationVector,  int Version,  Addressable Guid) {
        var mh$ = RtlInitializeCorrelationVector$MH();
        try {
            return (int)mh$.invokeExact(CorrelationVector, Version, Guid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIncrementCorrelationVector$MH() {
        return RuntimeHelper.requireNonNull(constants$61.RtlIncrementCorrelationVector$MH,"RtlIncrementCorrelationVector");
    }
    public static int RtlIncrementCorrelationVector ( Addressable CorrelationVector) {
        var mh$ = RtlIncrementCorrelationVector$MH();
        try {
            return (int)mh$.invokeExact(CorrelationVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlExtendCorrelationVector$MH() {
        return RuntimeHelper.requireNonNull(constants$61.RtlExtendCorrelationVector$MH,"RtlExtendCorrelationVector");
    }
    public static int RtlExtendCorrelationVector ( Addressable CorrelationVector) {
        var mh$ = RtlExtendCorrelationVector$MH();
        try {
            return (int)mh$.invokeExact(CorrelationVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlValidateCorrelationVector$MH() {
        return RuntimeHelper.requireNonNull(constants$61.RtlValidateCorrelationVector$MH,"RtlValidateCorrelationVector");
    }
    public static int RtlValidateCorrelationVector ( Addressable Vector) {
        var mh$ = RtlValidateCorrelationVector$MH();
        try {
            return (int)mh$.invokeExact(Vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH() {
        return RuntimeHelper.requireNonNull(constants$62.CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH,"CUSTOM_SYSTEM_EVENT_TRIGGER_INIT");
    }
    public static void CUSTOM_SYSTEM_EVENT_TRIGGER_INIT ( Addressable Config,  Addressable TriggerId) {
        var mh$ = CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH();
        try {
            mh$.invokeExact(Config, TriggerId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlRaiseCustomSystemEventTrigger$MH() {
        return RuntimeHelper.requireNonNull(constants$62.RtlRaiseCustomSystemEventTrigger$MH,"RtlRaiseCustomSystemEventTrigger");
    }
    public static int RtlRaiseCustomSystemEventTrigger ( Addressable TriggerConfig) {
        var mh$ = RtlRaiseCustomSystemEventTrigger$MH();
        try {
            return (int)mh$.invokeExact(TriggerConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ImagePolicyEntryTypeNone() {
        return (int)0L;
    }
    public static int ImagePolicyEntryTypeBool() {
        return (int)1L;
    }
    public static int ImagePolicyEntryTypeInt8() {
        return (int)2L;
    }
    public static int ImagePolicyEntryTypeUInt8() {
        return (int)3L;
    }
    public static int ImagePolicyEntryTypeInt16() {
        return (int)4L;
    }
    public static int ImagePolicyEntryTypeUInt16() {
        return (int)5L;
    }
    public static int ImagePolicyEntryTypeInt32() {
        return (int)6L;
    }
    public static int ImagePolicyEntryTypeUInt32() {
        return (int)7L;
    }
    public static int ImagePolicyEntryTypeInt64() {
        return (int)8L;
    }
    public static int ImagePolicyEntryTypeUInt64() {
        return (int)9L;
    }
    public static int ImagePolicyEntryTypeAnsiString() {
        return (int)10L;
    }
    public static int ImagePolicyEntryTypeUnicodeString() {
        return (int)11L;
    }
    public static int ImagePolicyEntryTypeOverride() {
        return (int)12L;
    }
    public static int ImagePolicyEntryTypeMaximum() {
        return (int)13L;
    }
    public static int ImagePolicyIdNone() {
        return (int)0L;
    }
    public static int ImagePolicyIdEtw() {
        return (int)1L;
    }
    public static int ImagePolicyIdDebug() {
        return (int)2L;
    }
    public static int ImagePolicyIdCrashDump() {
        return (int)3L;
    }
    public static int ImagePolicyIdCrashDumpKey() {
        return (int)4L;
    }
    public static int ImagePolicyIdCrashDumpKeyGuid() {
        return (int)5L;
    }
    public static int ImagePolicyIdParentSd() {
        return (int)6L;
    }
    public static int ImagePolicyIdParentSdRev() {
        return (int)7L;
    }
    public static int ImagePolicyIdSvn() {
        return (int)8L;
    }
    public static int ImagePolicyIdDeviceId() {
        return (int)9L;
    }
    public static int ImagePolicyIdCapability() {
        return (int)10L;
    }
    public static int ImagePolicyIdScenarioId() {
        return (int)11L;
    }
    public static int ImagePolicyIdMaximum() {
        return (int)12L;
    }
    public static OfAddress PCIMAGE_POLICY_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCIMAGE_POLICY_METADATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlIsZeroMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$62.RtlIsZeroMemory$MH,"RtlIsZeroMemory");
    }
    public static byte RtlIsZeroMemory ( Addressable Buffer,  long Length) {
        var mh$ = RtlIsZeroMemory$MH();
        try {
            return (byte)mh$.invokeExact(Buffer, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlNormalizeSecurityDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$62.RtlNormalizeSecurityDescriptor$MH,"RtlNormalizeSecurityDescriptor");
    }
    public static byte RtlNormalizeSecurityDescriptor ( Addressable SecurityDescriptor,  int SecurityDescriptorLength,  Addressable NewSecurityDescriptor,  Addressable NewSecurityDescriptorLength,  byte CheckOnly) {
        var mh$ = RtlNormalizeSecurityDescriptor$MH();
        try {
            return (byte)mh$.invokeExact(SecurityDescriptor, SecurityDescriptorLength, NewSecurityDescriptor, NewSecurityDescriptorLength, CheckOnly);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRTL_CRITICAL_SECTION_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_RESOURCE_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_CRITICAL_SECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_SRWLOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_CONDITION_VARIABLE = Constants$root.C_POINTER$LAYOUT;
    public static int HeapCompatibilityInformation() {
        return (int)0L;
    }
    public static int HeapEnableTerminationOnCorruption() {
        return (int)1L;
    }
    public static int HeapOptimizeResources() {
        return (int)3L;
    }
    public static OfAddress PHEAP_OPTIMIZE_RESOURCES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ActivationContextBasicInformation() {
        return (int)1L;
    }
    public static int ActivationContextDetailedInformation() {
        return (int)2L;
    }
    public static int AssemblyDetailedInformationInActivationContext() {
        return (int)3L;
    }
    public static int FileInformationInAssemblyOfAssemblyInActivationContext() {
        return (int)4L;
    }
    public static int RunlevelInformationInActivationContext() {
        return (int)5L;
    }
    public static int CompatibilityInformationInActivationContext() {
        return (int)6L;
    }
    public static int ActivationContextManifestResourceName() {
        return (int)7L;
    }
    public static int MaxActivationContextInfoClass() {
        return (int)8L;
    }
    public static int AssemblyDetailedInformationInActivationContxt() {
        return (int)3L;
    }
    public static int FileInformationInAssemblyOfAssemblyInActivationContxt() {
        return (int)4L;
    }
    public static OfAddress PACTIVATION_CONTEXT_QUERY_INDEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_QUERY_INDEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PASSEMBLY_FILE_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCASSEMBLY_FILE_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ACTCTX_RUN_LEVEL_UNSPECIFIED() {
        return (int)0L;
    }
    public static int ACTCTX_RUN_LEVEL_AS_INVOKER() {
        return (int)1L;
    }
    public static int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE() {
        return (int)2L;
    }
    public static int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN() {
        return (int)3L;
    }
    public static int ACTCTX_RUN_LEVEL_NUMBERS() {
        return (int)4L;
    }
    public static OfAddress PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS() {
        return (int)1L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION() {
        return (int)2L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED() {
        return (int)3L;
    }
    public static OfAddress PCOMPATIBILITY_CONTEXT_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCOMPATIBILITY_CONTEXT_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSUPPORTED_OS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMAXVERSIONTESTED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTIVATION_CONTEXT_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHARDWARE_COUNTER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERFORMANCE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlGetDeviceFamilyInfoEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RtlGetDeviceFamilyInfoEnum$MH,"RtlGetDeviceFamilyInfoEnum");
    }
    public static void RtlGetDeviceFamilyInfoEnum ( Addressable pullUAPInfo,  Addressable pulDeviceFamily,  Addressable pulDeviceForm) {
        var mh$ = RtlGetDeviceFamilyInfoEnum$MH();
        try {
            mh$.invokeExact(pullUAPInfo, pulDeviceFamily, pulDeviceForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlConvertDeviceFamilyInfoToString$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RtlConvertDeviceFamilyInfoToString$MH,"RtlConvertDeviceFamilyInfoToString");
    }
    public static int RtlConvertDeviceFamilyInfoToString ( Addressable pulDeviceFamilyBufferSize,  Addressable pulDeviceFormBufferSize,  Addressable DeviceFamily,  Addressable DeviceForm) {
        var mh$ = RtlConvertDeviceFamilyInfoToString$MH();
        try {
            return (int)mh$.invokeExact(pulDeviceFamilyBufferSize, pulDeviceFormBufferSize, DeviceFamily, DeviceForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSwitchedVVI$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RtlSwitchedVVI$MH,"RtlSwitchedVVI");
    }
    public static int RtlSwitchedVVI ( Addressable VersionInfo,  int TypeMask,  long ConditionMask) {
        var mh$ = RtlSwitchedVVI$MH();
        try {
            return (int)mh$.invokeExact(VersionInfo, TypeMask, ConditionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PEVENTLOGRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTSFORLOGFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPACKEDEVENTINFO = Constants$root.C_POINTER$LAYOUT;
    public static int DriverType() {
        return (int)1L;
    }
    public static int FileSystemType() {
        return (int)2L;
    }
    public static int Win32ServiceOwnProcess() {
        return (int)16L;
    }
    public static int Win32ServiceShareProcess() {
        return (int)32L;
    }
    public static int AdapterType() {
        return (int)4L;
    }
    public static int RecognizerType() {
        return (int)8L;
    }
    public static int BootLoad() {
        return (int)0L;
    }
    public static int SystemLoad() {
        return (int)1L;
    }
    public static int AutoLoad() {
        return (int)2L;
    }
    public static int DemandLoad() {
        return (int)3L;
    }
    public static int DisableLoad() {
        return (int)4L;
    }
    public static int IgnoreError() {
        return (int)0L;
    }
    public static int NormalError() {
        return (int)1L;
    }
    public static int SevereError() {
        return (int)2L;
    }
    public static int CriticalError() {
        return (int)3L;
    }
    public static OfAddress PTAPE_ERASE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_PREPARE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_WRITE_MARKS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_DRIVE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_DRIVE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_MEDIA_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_MEDIA_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_CREATE_PARTITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_WMI_OPERATIONS = Constants$root.C_POINTER$LAYOUT;
    public static int TapeDriveProblemNone() {
        return (int)0L;
    }
    public static int TapeDriveReadWriteWarning() {
        return (int)1L;
    }
    public static int TapeDriveReadWriteError() {
        return (int)2L;
    }
    public static int TapeDriveReadWarning() {
        return (int)3L;
    }
    public static int TapeDriveWriteWarning() {
        return (int)4L;
    }
    public static int TapeDriveReadError() {
        return (int)5L;
    }
    public static int TapeDriveWriteError() {
        return (int)6L;
    }
    public static int TapeDriveHardwareError() {
        return (int)7L;
    }
    public static int TapeDriveUnsupportedMedia() {
        return (int)8L;
    }
    public static int TapeDriveScsiConnectionError() {
        return (int)9L;
    }
    public static int TapeDriveTimetoClean() {
        return (int)10L;
    }
    public static int TapeDriveCleanDriveNow() {
        return (int)11L;
    }
    public static int TapeDriveMediaLifeExpired() {
        return (int)12L;
    }
    public static int TapeDriveSnappedTape() {
        return (int)13L;
    }
    public static int TransactionOutcomeUndetermined() {
        return (int)1L;
    }
    public static int TransactionOutcomeCommitted() {
        return (int)2L;
    }
    public static int TransactionOutcomeAborted() {
        return (int)3L;
    }
    public static int TransactionStateNormal() {
        return (int)1L;
    }
    public static int TransactionStateIndoubt() {
        return (int)2L;
    }
    public static int TransactionStateCommittedNotify() {
        return (int)3L;
    }
    public static OfAddress PTRANSACTION_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_LOG_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_LOGPATH_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_RECOVERY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_OLDEST_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_PROPERTIES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_BIND_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_ENLISTMENT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_ENLISTMENTS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRESOURCEMANAGER_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRESOURCEMANAGER_COMPLETION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int TransactionBasicInformation() {
        return (int)0L;
    }
    public static int TransactionPropertiesInformation() {
        return (int)1L;
    }
    public static int TransactionEnlistmentInformation() {
        return (int)2L;
    }
    public static int TransactionSuperiorEnlistmentInformation() {
        return (int)3L;
    }
    public static int TransactionBindInformation() {
        return (int)4L;
    }
    public static int TransactionDTCPrivateInformation() {
        return (int)5L;
    }
    public static int TransactionManagerBasicInformation() {
        return (int)0L;
    }
    public static int TransactionManagerLogInformation() {
        return (int)1L;
    }
    public static int TransactionManagerLogPathInformation() {
        return (int)2L;
    }
    public static int TransactionManagerRecoveryInformation() {
        return (int)4L;
    }
    public static int TransactionManagerOnlineProbeInformation() {
        return (int)3L;
    }
    public static int TransactionManagerOldestTransactionInformation() {
        return (int)5L;
    }
    public static int ResourceManagerBasicInformation() {
        return (int)0L;
    }
    public static int ResourceManagerCompletionInformation() {
        return (int)1L;
    }
    public static OfAddress PENLISTMENT_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENLISTMENT_CRM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int EnlistmentBasicInformation() {
        return (int)0L;
    }
    public static int EnlistmentRecoveryInformation() {
        return (int)1L;
    }
    public static int EnlistmentCrmInformation() {
        return (int)2L;
    }
    public static OfAddress PTRANSACTION_LIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_LIST_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int KTMOBJECT_TRANSACTION() {
        return (int)0L;
    }
    public static int KTMOBJECT_TRANSACTION_MANAGER() {
        return (int)1L;
    }
    public static int KTMOBJECT_RESOURCE_MANAGER() {
        return (int)2L;
    }
    public static int KTMOBJECT_ENLISTMENT() {
        return (int)3L;
    }
    public static int KTMOBJECT_INVALID() {
        return (int)4L;
    }
    public static OfAddress PKTMOBJECT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKTMOBJECT_CURSOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CALLBACK_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_POOL = Constants$root.C_POINTER$LAYOUT;
    public static int TP_CALLBACK_PRIORITY_HIGH() {
        return (int)0L;
    }
    public static int TP_CALLBACK_PRIORITY_NORMAL() {
        return (int)1L;
    }
    public static int TP_CALLBACK_PRIORITY_LOW() {
        return (int)2L;
    }
    public static int TP_CALLBACK_PRIORITY_INVALID() {
        return (int)3L;
    }
    public static int TP_CALLBACK_PRIORITY_COUNT() {
        return (int)3L;
    }
    public static OfAddress PTP_POOL_STACK_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CLEANUP_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CALLBACK_ENVIRON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TpInitializeCallbackEnviron$MH() {
        return RuntimeHelper.requireNonNull(constants$66.TpInitializeCallbackEnviron$MH,"TpInitializeCallbackEnviron");
    }
    public static void TpInitializeCallbackEnviron ( Addressable CallbackEnviron) {
        var mh$ = TpInitializeCallbackEnviron$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackThreadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$66.TpSetCallbackThreadpool$MH,"TpSetCallbackThreadpool");
    }
    public static void TpSetCallbackThreadpool ( Addressable CallbackEnviron,  Addressable Pool) {
        var mh$ = TpSetCallbackThreadpool$MH();
        try {
            mh$.invokeExact(CallbackEnviron, Pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$66.TpSetCallbackCleanupGroup$MH,"TpSetCallbackCleanupGroup");
    }
    public static void TpSetCallbackCleanupGroup ( Addressable CallbackEnviron,  Addressable CleanupGroup,  Addressable CleanupGroupCancelCallback) {
        var mh$ = TpSetCallbackCleanupGroup$MH();
        try {
            mh$.invokeExact(CallbackEnviron, CleanupGroup, CleanupGroupCancelCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackActivationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$67.TpSetCallbackActivationContext$MH,"TpSetCallbackActivationContext");
    }
    public static void TpSetCallbackActivationContext ( Addressable CallbackEnviron,  Addressable ActivationContext) {
        var mh$ = TpSetCallbackActivationContext$MH();
        try {
            mh$.invokeExact(CallbackEnviron, ActivationContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackNoActivationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$67.TpSetCallbackNoActivationContext$MH,"TpSetCallbackNoActivationContext");
    }
    public static void TpSetCallbackNoActivationContext ( Addressable CallbackEnviron) {
        var mh$ = TpSetCallbackNoActivationContext$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackLongFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$67.TpSetCallbackLongFunction$MH,"TpSetCallbackLongFunction");
    }
    public static void TpSetCallbackLongFunction ( Addressable CallbackEnviron) {
        var mh$ = TpSetCallbackLongFunction$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackRaceWithDll$MH() {
        return RuntimeHelper.requireNonNull(constants$67.TpSetCallbackRaceWithDll$MH,"TpSetCallbackRaceWithDll");
    }
    public static void TpSetCallbackRaceWithDll ( Addressable CallbackEnviron,  Addressable DllHandle) {
        var mh$ = TpSetCallbackRaceWithDll$MH();
        try {
            mh$.invokeExact(CallbackEnviron, DllHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackFinalizationCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$67.TpSetCallbackFinalizationCallback$MH,"TpSetCallbackFinalizationCallback");
    }
    public static void TpSetCallbackFinalizationCallback ( Addressable CallbackEnviron,  Addressable FinalizationCallback) {
        var mh$ = TpSetCallbackFinalizationCallback$MH();
        try {
            mh$.invokeExact(CallbackEnviron, FinalizationCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$67.TpSetCallbackPriority$MH,"TpSetCallbackPriority");
    }
    public static void TpSetCallbackPriority ( Addressable CallbackEnviron,  int Priority) {
        var mh$ = TpSetCallbackPriority$MH();
        try {
            mh$.invokeExact(CallbackEnviron, Priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackPersistent$MH() {
        return RuntimeHelper.requireNonNull(constants$68.TpSetCallbackPersistent$MH,"TpSetCallbackPersistent");
    }
    public static void TpSetCallbackPersistent ( Addressable CallbackEnviron) {
        var mh$ = TpSetCallbackPersistent$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpDestroyCallbackEnviron$MH() {
        return RuntimeHelper.requireNonNull(constants$68.TpDestroyCallbackEnviron$MH,"TpDestroyCallbackEnviron");
    }
    public static void TpDestroyCallbackEnviron ( Addressable CallbackEnviron) {
        var mh$ = TpDestroyCallbackEnviron$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTP_WORK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_TIMER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_WAIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_IO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NtCurrentTeb$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NtCurrentTeb$MH,"NtCurrentTeb");
    }
    public static MemoryAddress NtCurrentTeb () {
        var mh$ = NtCurrentTeb$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$69.GetCurrentFiber$MH,"GetCurrentFiber");
    }
    public static MemoryAddress GetCurrentFiber () {
        var mh$ = GetCurrentFiber$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFiberData$MH() {
        return RuntimeHelper.requireNonNull(constants$69.GetFiberData$MH,"GetFiberData");
    }
    public static MemoryAddress GetFiberData () {
        var mh$ = GetFiberData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong LPARAM = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong LRESULT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress SPHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGLOBAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HLOCAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GLOBALHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LOCALHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HKEY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHKEY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HINSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMODULE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HRSRC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HSPRITE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HLSURF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HTASK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWINSTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HKL = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HFILE = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PFILETIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFILETIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HHOOK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGDIOBJ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGLRC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDESK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HENHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HICON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWINEVENTHOOK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMONITOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HUMPD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCURSOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLORREF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSIZEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSIZEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOINTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress DPI_AWARENESS_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static int DPI_AWARENESS_INVALID() {
        return (int)-1L;
    }
    public static int DPI_AWARENESS_UNAWARE() {
        return (int)0L;
    }
    public static int DPI_AWARENESS_SYSTEM_AWARE() {
        return (int)1L;
    }
    public static int DPI_AWARENESS_PER_MONITOR_AWARE() {
        return (int)2L;
    }
    public static int DPI_HOSTING_BEHAVIOR_INVALID() {
        return (int)-1L;
    }
    public static int DPI_HOSTING_BEHAVIOR_DEFAULT() {
        return (int)0L;
    }
    public static int DPI_HOSTING_BEHAVIOR_MIXED() {
        return (int)1L;
    }
    public static OfAddress PSECURITY_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSECURITY_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOVERLAPPED = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOVERLAPPED_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSYSTEMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATA = Constants$root.C_POINTER$LAYOUT;
    public static int FindExInfoStandard() {
        return (int)0L;
    }
    public static int FindExInfoBasic() {
        return (int)1L;
    }
    public static int FindExInfoMaxInfoLevel() {
        return (int)2L;
    }
    public static int FindExSearchNameMatch() {
        return (int)0L;
    }
    public static int FindExSearchLimitToDirectories() {
        return (int)1L;
    }
    public static int FindExSearchLimitToDevices() {
        return (int)2L;
    }
    public static int FindExSearchMaxSearchOp() {
        return (int)3L;
    }
    public static int ReadDirectoryNotifyInformation() {
        return (int)1L;
    }
    public static int ReadDirectoryNotifyExtendedInformation() {
        return (int)2L;
    }
    public static OfAddress PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static int GetFileExInfoStandard() {
        return (int)0L;
    }
    public static int GetFileExMaxInfoLevel() {
        return (int)1L;
    }
    public static int FileBasicInfo() {
        return (int)0L;
    }
    public static int FileStandardInfo() {
        return (int)1L;
    }
    public static int FileNameInfo() {
        return (int)2L;
    }
    public static int FileRenameInfo() {
        return (int)3L;
    }
    public static int FileDispositionInfo() {
        return (int)4L;
    }
    public static int FileAllocationInfo() {
        return (int)5L;
    }
    public static int FileEndOfFileInfo() {
        return (int)6L;
    }
    public static int FileStreamInfo() {
        return (int)7L;
    }
    public static int FileCompressionInfo() {
        return (int)8L;
    }
    public static int FileAttributeTagInfo() {
        return (int)9L;
    }
    public static int FileIdBothDirectoryInfo() {
        return (int)10L;
    }
    public static int FileIdBothDirectoryRestartInfo() {
        return (int)11L;
    }
    public static int FileIoPriorityHintInfo() {
        return (int)12L;
    }
    public static int FileRemoteProtocolInfo() {
        return (int)13L;
    }
    public static int FileFullDirectoryInfo() {
        return (int)14L;
    }
    public static int FileFullDirectoryRestartInfo() {
        return (int)15L;
    }
    public static int FileStorageInfo() {
        return (int)16L;
    }
    public static int FileAlignmentInfo() {
        return (int)17L;
    }
    public static int FileIdInfo() {
        return (int)18L;
    }
    public static int FileIdExtdDirectoryInfo() {
        return (int)19L;
    }
    public static int FileIdExtdDirectoryRestartInfo() {
        return (int)20L;
    }
    public static int FileDispositionInfoEx() {
        return (int)21L;
    }
    public static int FileRenameInfoEx() {
        return (int)22L;
    }
    public static int FileCaseSensitiveInfo() {
        return (int)23L;
    }
    public static int FileNormalizedNameInfo() {
        return (int)24L;
    }
    public static int MaximumFileInfoByHandleClass() {
        return (int)25L;
    }
    public static OfAddress PFILE_INFO_BY_HANDLE_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRITICAL_SECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRITICAL_SECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRITICAL_SECTION_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRITICAL_SECTION_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROCESS_HEAP_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_HEAP_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASON_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXCEPTION_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATE_THREAD_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATE_PROCESS_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXIT_THREAD_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXIT_PROCESS_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOAD_DLL_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNLOAD_DLL_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTPUT_DEBUG_STRING_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRIP_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEBUG_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CompareFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$72.CompareFileTime$MH,"CompareFileTime");
    }
    public static int CompareFileTime ( Addressable lpFileTime1,  Addressable lpFileTime2) {
        var mh$ = CompareFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime1, lpFileTime2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$72.CreateDirectoryA$MH,"CreateDirectoryA");
    }
    public static int CreateDirectoryA ( Addressable lpPathName,  Addressable lpSecurityAttributes) {
        var mh$ = CreateDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$72.CreateDirectoryW$MH,"CreateDirectoryW");
    }
    public static int CreateDirectoryW ( Addressable lpPathName,  Addressable lpSecurityAttributes) {
        var mh$ = CreateDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$73.CreateFileA$MH,"CreateFileA");
    }
    public static MemoryAddress CreateFileA ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile) {
        var mh$ = CreateFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$73.CreateFileW$MH,"CreateFileW");
    }
    public static MemoryAddress CreateFileW ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile) {
        var mh$ = CreateFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefineDosDeviceW$MH() {
        return RuntimeHelper.requireNonNull(constants$73.DefineDosDeviceW$MH,"DefineDosDeviceW");
    }
    public static int DefineDosDeviceW ( int dwFlags,  Addressable lpDeviceName,  Addressable lpTargetPath) {
        var mh$ = DefineDosDeviceW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpDeviceName, lpTargetPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$73.DeleteFileA$MH,"DeleteFileA");
    }
    public static int DeleteFileA ( Addressable lpFileName) {
        var mh$ = DeleteFileA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$73.DeleteFileW$MH,"DeleteFileW");
    }
    public static int DeleteFileW ( Addressable lpFileName) {
        var mh$ = DeleteFileW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$73.DeleteVolumeMountPointW$MH,"DeleteVolumeMountPointW");
    }
    public static int DeleteVolumeMountPointW ( Addressable lpszVolumeMountPoint) {
        var mh$ = DeleteVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileTimeToLocalFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$74.FileTimeToLocalFileTime$MH,"FileTimeToLocalFileTime");
    }
    public static int FileTimeToLocalFileTime ( Addressable lpFileTime,  Addressable lpLocalFileTime) {
        var mh$ = FileTimeToLocalFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime, lpLocalFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindClose$MH() {
        return RuntimeHelper.requireNonNull(constants$74.FindClose$MH,"FindClose");
    }
    public static int FindClose ( Addressable hFindFile) {
        var mh$ = FindClose$MH();
        try {
            return (int)mh$.invokeExact(hFindFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindCloseChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$74.FindCloseChangeNotification$MH,"FindCloseChangeNotification");
    }
    public static int FindCloseChangeNotification ( Addressable hChangeHandle) {
        var mh$ = FindCloseChangeNotification$MH();
        try {
            return (int)mh$.invokeExact(hChangeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstChangeNotificationA$MH() {
        return RuntimeHelper.requireNonNull(constants$74.FindFirstChangeNotificationA$MH,"FindFirstChangeNotificationA");
    }
    public static MemoryAddress FindFirstChangeNotificationA ( Addressable lpPathName,  int bWatchSubtree,  int dwNotifyFilter) {
        var mh$ = FindFirstChangeNotificationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpPathName, bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstChangeNotificationW$MH() {
        return RuntimeHelper.requireNonNull(constants$74.FindFirstChangeNotificationW$MH,"FindFirstChangeNotificationW");
    }
    public static MemoryAddress FindFirstChangeNotificationW ( Addressable lpPathName,  int bWatchSubtree,  int dwNotifyFilter) {
        var mh$ = FindFirstChangeNotificationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpPathName, bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$74.FindFirstFileA$MH,"FindFirstFileA");
    }
    public static MemoryAddress FindFirstFileA ( Addressable lpFileName,  Addressable lpFindFileData) {
        var mh$ = FindFirstFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$75.FindFirstFileW$MH,"FindFirstFileW");
    }
    public static MemoryAddress FindFirstFileW ( Addressable lpFileName,  Addressable lpFindFileData) {
        var mh$ = FindFirstFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExA$MH() {
        return RuntimeHelper.requireNonNull(constants$75.FindFirstFileExA$MH,"FindFirstFileExA");
    }
    public static MemoryAddress FindFirstFileExA ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags) {
        var mh$ = FindFirstFileExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExW$MH() {
        return RuntimeHelper.requireNonNull(constants$75.FindFirstFileExW$MH,"FindFirstFileExW");
    }
    public static MemoryAddress FindFirstFileExW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags) {
        var mh$ = FindFirstFileExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeW$MH() {
        return RuntimeHelper.requireNonNull(constants$75.FindFirstVolumeW$MH,"FindFirstVolumeW");
    }
    public static MemoryAddress FindFirstVolumeW ( Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = FindFirstVolumeW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$75.FindNextChangeNotification$MH,"FindNextChangeNotification");
    }
    public static int FindNextChangeNotification ( Addressable hChangeHandle) {
        var mh$ = FindNextChangeNotification$MH();
        try {
            return (int)mh$.invokeExact(hChangeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$75.FindNextFileA$MH,"FindNextFileA");
    }
    public static int FindNextFileA ( Addressable hFindFile,  Addressable lpFindFileData) {
        var mh$ = FindNextFileA$MH();
        try {
            return (int)mh$.invokeExact(hFindFile, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$76.FindNextFileW$MH,"FindNextFileW");
    }
    public static int FindNextFileW ( Addressable hFindFile,  Addressable lpFindFileData) {
        var mh$ = FindNextFileW$MH();
        try {
            return (int)mh$.invokeExact(hFindFile, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeW$MH() {
        return RuntimeHelper.requireNonNull(constants$76.FindNextVolumeW$MH,"FindNextVolumeW");
    }
    public static int FindNextVolumeW ( Addressable hFindVolume,  Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = FindNextVolumeW$MH();
        try {
            return (int)mh$.invokeExact(hFindVolume, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindVolumeClose$MH() {
        return RuntimeHelper.requireNonNull(constants$76.FindVolumeClose$MH,"FindVolumeClose");
    }
    public static int FindVolumeClose ( Addressable hFindVolume) {
        var mh$ = FindVolumeClose$MH();
        try {
            return (int)mh$.invokeExact(hFindVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushFileBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$76.FlushFileBuffers$MH,"FlushFileBuffers");
    }
    public static int FlushFileBuffers ( Addressable hFile) {
        var mh$ = FlushFileBuffers$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$76.GetDiskFreeSpaceA$MH,"GetDiskFreeSpaceA");
    }
    public static int GetDiskFreeSpaceA ( Addressable lpRootPathName,  Addressable lpSectorsPerCluster,  Addressable lpBytesPerSector,  Addressable lpNumberOfFreeClusters,  Addressable lpTotalNumberOfClusters) {
        var mh$ = GetDiskFreeSpaceA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$76.GetDiskFreeSpaceW$MH,"GetDiskFreeSpaceW");
    }
    public static int GetDiskFreeSpaceW ( Addressable lpRootPathName,  Addressable lpSectorsPerCluster,  Addressable lpBytesPerSector,  Addressable lpNumberOfFreeClusters,  Addressable lpTotalNumberOfClusters) {
        var mh$ = GetDiskFreeSpaceW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$77.GetDiskFreeSpaceExA$MH,"GetDiskFreeSpaceExA");
    }
    public static int GetDiskFreeSpaceExA ( Addressable lpDirectoryName,  Addressable lpFreeBytesAvailableToCaller,  Addressable lpTotalNumberOfBytes,  Addressable lpTotalNumberOfFreeBytes) {
        var mh$ = GetDiskFreeSpaceExA$MH();
        try {
            return (int)mh$.invokeExact(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$77.GetDiskFreeSpaceExW$MH,"GetDiskFreeSpaceExW");
    }
    public static int GetDiskFreeSpaceExW ( Addressable lpDirectoryName,  Addressable lpFreeBytesAvailableToCaller,  Addressable lpTotalNumberOfBytes,  Addressable lpTotalNumberOfFreeBytes) {
        var mh$ = GetDiskFreeSpaceExW$MH();
        try {
            return (int)mh$.invokeExact(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskSpaceInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$77.GetDiskSpaceInformationA$MH,"GetDiskSpaceInformationA");
    }
    public static int GetDiskSpaceInformationA ( Addressable rootPath,  Addressable diskSpaceInfo) {
        var mh$ = GetDiskSpaceInformationA$MH();
        try {
            return (int)mh$.invokeExact(rootPath, diskSpaceInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskSpaceInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$77.GetDiskSpaceInformationW$MH,"GetDiskSpaceInformationW");
    }
    public static int GetDiskSpaceInformationW ( Addressable rootPath,  Addressable diskSpaceInfo) {
        var mh$ = GetDiskSpaceInformationW$MH();
        try {
            return (int)mh$.invokeExact(rootPath, diskSpaceInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriveTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$77.GetDriveTypeA$MH,"GetDriveTypeA");
    }
    public static int GetDriveTypeA ( Addressable lpRootPathName) {
        var mh$ = GetDriveTypeA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriveTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$77.GetDriveTypeW$MH,"GetDriveTypeW");
    }
    public static int GetDriveTypeW ( Addressable lpRootPathName) {
        var mh$ = GetDriveTypeW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPWIN32_FILE_ATTRIBUTE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetFileAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$78.GetFileAttributesA$MH,"GetFileAttributesA");
    }
    public static int GetFileAttributesA ( Addressable lpFileName) {
        var mh$ = GetFileAttributesA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$78.GetFileAttributesW$MH,"GetFileAttributesW");
    }
    public static int GetFileAttributesW ( Addressable lpFileName) {
        var mh$ = GetFileAttributesW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$78.GetFileAttributesExA$MH,"GetFileAttributesExA");
    }
    public static int GetFileAttributesExA ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation) {
        var mh$ = GetFileAttributesExA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$78.GetFileAttributesExW$MH,"GetFileAttributesExW");
    }
    public static int GetFileAttributesExW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation) {
        var mh$ = GetFileAttributesExW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBY_HANDLE_FILE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBY_HANDLE_FILE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetFileInformationByHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$78.GetFileInformationByHandle$MH,"GetFileInformationByHandle");
    }
    public static int GetFileInformationByHandle ( Addressable hFile,  Addressable lpFileInformation) {
        var mh$ = GetFileInformationByHandle$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSize$MH() {
        return RuntimeHelper.requireNonNull(constants$78.GetFileSize$MH,"GetFileSize");
    }
    public static int GetFileSize ( Addressable hFile,  Addressable lpFileSizeHigh) {
        var mh$ = GetFileSize$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$79.GetFileSizeEx$MH,"GetFileSizeEx");
    }
    public static int GetFileSizeEx ( Addressable hFile,  Addressable lpFileSize) {
        var mh$ = GetFileSizeEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileType$MH() {
        return RuntimeHelper.requireNonNull(constants$79.GetFileType$MH,"GetFileType");
    }
    public static int GetFileType ( Addressable hFile) {
        var mh$ = GetFileType$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFinalPathNameByHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$79.GetFinalPathNameByHandleA$MH,"GetFinalPathNameByHandleA");
    }
    public static int GetFinalPathNameByHandleA ( Addressable hFile,  Addressable lpszFilePath,  int cchFilePath,  int dwFlags) {
        var mh$ = GetFinalPathNameByHandleA$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpszFilePath, cchFilePath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFinalPathNameByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$79.GetFinalPathNameByHandleW$MH,"GetFinalPathNameByHandleW");
    }
    public static int GetFinalPathNameByHandleW ( Addressable hFile,  Addressable lpszFilePath,  int cchFilePath,  int dwFlags) {
        var mh$ = GetFinalPathNameByHandleW$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpszFilePath, cchFilePath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$79.GetFileTime$MH,"GetFileTime");
    }
    public static int GetFileTime ( Addressable hFile,  Addressable lpCreationTime,  Addressable lpLastAccessTime,  Addressable lpLastWriteTime) {
        var mh$ = GetFileTime$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$79.GetFullPathNameW$MH,"GetFullPathNameW");
    }
    public static int GetFullPathNameW ( Addressable lpFileName,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = GetFullPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$80.GetFullPathNameA$MH,"GetFullPathNameA");
    }
    public static int GetFullPathNameA ( Addressable lpFileName,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = GetFullPathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDrives$MH() {
        return RuntimeHelper.requireNonNull(constants$80.GetLogicalDrives$MH,"GetLogicalDrives");
    }
    public static int GetLogicalDrives () {
        var mh$ = GetLogicalDrives$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDriveStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$80.GetLogicalDriveStringsW$MH,"GetLogicalDriveStringsW");
    }
    public static int GetLogicalDriveStringsW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetLogicalDriveStringsW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$80.GetLongPathNameA$MH,"GetLongPathNameA");
    }
    public static int GetLongPathNameA ( Addressable lpszShortPath,  Addressable lpszLongPath,  int cchBuffer) {
        var mh$ = GetLongPathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszShortPath, lpszLongPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$80.GetLongPathNameW$MH,"GetLongPathNameW");
    }
    public static int GetLongPathNameW ( Addressable lpszShortPath,  Addressable lpszLongPath,  int cchBuffer) {
        var mh$ = GetLongPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszShortPath, lpszLongPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShortPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$80.GetShortPathNameW$MH,"GetShortPathNameW");
    }
    public static int GetShortPathNameW ( Addressable lpszLongPath,  Addressable lpszShortPath,  int cchBuffer) {
        var mh$ = GetShortPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszLongPath, lpszShortPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$81.GetTempFileNameW$MH,"GetTempFileNameW");
    }
    public static int GetTempFileNameW ( Addressable lpPathName,  Addressable lpPrefixString,  int uUnique,  Addressable lpTempFileName) {
        var mh$ = GetTempFileNameW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$81.GetVolumeInformationByHandleW$MH,"GetVolumeInformationByHandleW");
    }
    public static int GetVolumeInformationByHandleW ( Addressable hFile,  Addressable lpVolumeNameBuffer,  int nVolumeNameSize,  Addressable lpVolumeSerialNumber,  Addressable lpMaximumComponentLength,  Addressable lpFileSystemFlags,  Addressable lpFileSystemNameBuffer,  int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationByHandleW$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$81.GetVolumeInformationW$MH,"GetVolumeInformationW");
    }
    public static int GetVolumeInformationW ( Addressable lpRootPathName,  Addressable lpVolumeNameBuffer,  int nVolumeNameSize,  Addressable lpVolumeSerialNumber,  Addressable lpMaximumComponentLength,  Addressable lpFileSystemFlags,  Addressable lpFileSystemNameBuffer,  int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$81.GetVolumePathNameW$MH,"GetVolumePathNameW");
    }
    public static int GetVolumePathNameW ( Addressable lpszFileName,  Addressable lpszVolumePathName,  int cchBufferLength) {
        var mh$ = GetVolumePathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, lpszVolumePathName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalFileTimeToFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$81.LocalFileTimeToFileTime$MH,"LocalFileTimeToFileTime");
    }
    public static int LocalFileTimeToFileTime ( Addressable lpLocalFileTime,  Addressable lpFileTime) {
        var mh$ = LocalFileTimeToFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpLocalFileTime, lpFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$81.LockFile$MH,"LockFile");
    }
    public static int LockFile ( Addressable hFile,  int dwFileOffsetLow,  int dwFileOffsetHigh,  int nNumberOfBytesToLockLow,  int nNumberOfBytesToLockHigh) {
        var mh$ = LockFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$82.LockFileEx$MH,"LockFileEx");
    }
    public static int LockFileEx ( Addressable hFile,  int dwFlags,  int dwReserved,  int nNumberOfBytesToLockLow,  int nNumberOfBytesToLockHigh,  Addressable lpOverlapped) {
        var mh$ = LockFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFlags, dwReserved, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDosDeviceW$MH() {
        return RuntimeHelper.requireNonNull(constants$82.QueryDosDeviceW$MH,"QueryDosDeviceW");
    }
    public static int QueryDosDeviceW ( Addressable lpDeviceName,  Addressable lpTargetPath,  int ucchMax) {
        var mh$ = QueryDosDeviceW$MH();
        try {
            return (int)mh$.invokeExact(lpDeviceName, lpTargetPath, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFile$MH() {
        return RuntimeHelper.requireNonNull(constants$82.ReadFile$MH,"ReadFile");
    }
    public static int ReadFile ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToRead,  Addressable lpNumberOfBytesRead,  Addressable lpOverlapped) {
        var mh$ = ReadFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$82.ReadFileEx$MH,"ReadFileEx");
    }
    public static int ReadFileEx ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToRead,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = ReadFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToRead, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFileScatter$MH() {
        return RuntimeHelper.requireNonNull(constants$82.ReadFileScatter$MH,"ReadFileScatter");
    }
    public static int ReadFileScatter ( Addressable hFile,  Addressable aSegmentArray,  int nNumberOfBytesToRead,  Addressable lpReserved,  Addressable lpOverlapped) {
        var mh$ = ReadFileScatter$MH();
        try {
            return (int)mh$.invokeExact(hFile, aSegmentArray, nNumberOfBytesToRead, lpReserved, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$82.RemoveDirectoryA$MH,"RemoveDirectoryA");
    }
    public static int RemoveDirectoryA ( Addressable lpPathName) {
        var mh$ = RemoveDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$83.RemoveDirectoryW$MH,"RemoveDirectoryW");
    }
    public static int RemoveDirectoryW ( Addressable lpPathName) {
        var mh$ = RemoveDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEndOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$83.SetEndOfFile$MH,"SetEndOfFile");
    }
    public static int SetEndOfFile ( Addressable hFile) {
        var mh$ = SetEndOfFile$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$83.SetFileAttributesA$MH,"SetFileAttributesA");
    }
    public static int SetFileAttributesA ( Addressable lpFileName,  int dwFileAttributes) {
        var mh$ = SetFileAttributesA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$83.SetFileAttributesW$MH,"SetFileAttributesW");
    }
    public static int SetFileAttributesW ( Addressable lpFileName,  int dwFileAttributes) {
        var mh$ = SetFileAttributesW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileInformationByHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$83.SetFileInformationByHandle$MH,"SetFileInformationByHandle");
    }
    public static int SetFileInformationByHandle ( Addressable hFile,  int FileInformationClass,  Addressable lpFileInformation,  int dwBufferSize) {
        var mh$ = SetFileInformationByHandle$MH();
        try {
            return (int)mh$.invokeExact(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFilePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$83.SetFilePointer$MH,"SetFilePointer");
    }
    public static int SetFilePointer ( Addressable hFile,  int lDistanceToMove,  Addressable lpDistanceToMoveHigh,  int dwMoveMethod) {
        var mh$ = SetFilePointer$MH();
        try {
            return (int)mh$.invokeExact(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFilePointerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$84.SetFilePointerEx$MH,"SetFilePointerEx");
    }
    public static int SetFilePointerEx ( Addressable hFile,  MemorySegment liDistanceToMove,  Addressable lpNewFilePointer,  int dwMoveMethod) {
        var mh$ = SetFilePointerEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, liDistanceToMove, lpNewFilePointer, dwMoveMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$84.SetFileTime$MH,"SetFileTime");
    }
    public static int SetFileTime ( Addressable hFile,  Addressable lpCreationTime,  Addressable lpLastAccessTime,  Addressable lpLastWriteTime) {
        var mh$ = SetFileTime$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileValidData$MH() {
        return RuntimeHelper.requireNonNull(constants$84.SetFileValidData$MH,"SetFileValidData");
    }
    public static int SetFileValidData ( Addressable hFile,  long ValidDataLength) {
        var mh$ = SetFileValidData$MH();
        try {
            return (int)mh$.invokeExact(hFile, ValidDataLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$84.UnlockFile$MH,"UnlockFile");
    }
    public static int UnlockFile ( Addressable hFile,  int dwFileOffsetLow,  int dwFileOffsetHigh,  int nNumberOfBytesToUnlockLow,  int nNumberOfBytesToUnlockHigh) {
        var mh$ = UnlockFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$84.UnlockFileEx$MH,"UnlockFileEx");
    }
    public static int UnlockFileEx ( Addressable hFile,  int dwReserved,  int nNumberOfBytesToUnlockLow,  int nNumberOfBytesToUnlockHigh,  Addressable lpOverlapped) {
        var mh$ = UnlockFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwReserved, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFile$MH() {
        return RuntimeHelper.requireNonNull(constants$84.WriteFile$MH,"WriteFile");
    }
    public static int WriteFile ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToWrite,  Addressable lpNumberOfBytesWritten,  Addressable lpOverlapped) {
        var mh$ = WriteFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$85.WriteFileEx$MH,"WriteFileEx");
    }
    public static int WriteFileEx ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToWrite,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WriteFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToWrite, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFileGather$MH() {
        return RuntimeHelper.requireNonNull(constants$85.WriteFileGather$MH,"WriteFileGather");
    }
    public static int WriteFileGather ( Addressable hFile,  Addressable aSegmentArray,  int nNumberOfBytesToWrite,  Addressable lpReserved,  Addressable lpOverlapped) {
        var mh$ = WriteFileGather$MH();
        try {
            return (int)mh$.invokeExact(hFile, aSegmentArray, nNumberOfBytesToWrite, lpReserved, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPathW$MH() {
        return RuntimeHelper.requireNonNull(constants$85.GetTempPathW$MH,"GetTempPathW");
    }
    public static int GetTempPathW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetTempPathW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeNameForVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$85.GetVolumeNameForVolumeMountPointW$MH,"GetVolumeNameForVolumeMountPointW");
    }
    public static int GetVolumeNameForVolumeMountPointW ( Addressable lpszVolumeMountPoint,  Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = GetVolumeNameForVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNamesForVolumeNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$85.GetVolumePathNamesForVolumeNameW$MH,"GetVolumePathNamesForVolumeNameW");
    }
    public static int GetVolumePathNamesForVolumeNameW ( Addressable lpszVolumeName,  Addressable lpszVolumePathNames,  int cchBufferLength,  Addressable lpcchReturnLength) {
        var mh$ = GetVolumePathNamesForVolumeNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCREATEFILE2_EXTENDED_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATEFILE2_EXTENDED_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$85.CreateFile2$MH,"CreateFile2");
    }
    public static MemoryAddress CreateFile2 ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  int dwCreationDisposition,  Addressable pCreateExParams) {
        var mh$ = CreateFile2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileIoOverlappedRange$MH() {
        return RuntimeHelper.requireNonNull(constants$86.SetFileIoOverlappedRange$MH,"SetFileIoOverlappedRange");
    }
    public static int SetFileIoOverlappedRange ( Addressable FileHandle,  Addressable OverlappedRangeStart,  int Length) {
        var mh$ = SetFileIoOverlappedRange$MH();
        try {
            return (int)mh$.invokeExact(FileHandle, OverlappedRangeStart, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeA$MH() {
        return RuntimeHelper.requireNonNull(constants$86.GetCompressedFileSizeA$MH,"GetCompressedFileSizeA");
    }
    public static int GetCompressedFileSizeA ( Addressable lpFileName,  Addressable lpFileSizeHigh) {
        var mh$ = GetCompressedFileSizeA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeW$MH() {
        return RuntimeHelper.requireNonNull(constants$86.GetCompressedFileSizeW$MH,"GetCompressedFileSizeW");
    }
    public static int GetCompressedFileSizeW ( Addressable lpFileName,  Addressable lpFileSizeHigh) {
        var mh$ = GetCompressedFileSizeW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FindStreamInfoStandard() {
        return (int)0L;
    }
    public static int FindStreamInfoMaxInfoLevel() {
        return (int)1L;
    }
    public static OfAddress PWIN32_FIND_STREAM_DATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FindFirstStreamW$MH() {
        return RuntimeHelper.requireNonNull(constants$86.FindFirstStreamW$MH,"FindFirstStreamW");
    }
    public static MemoryAddress FindFirstStreamW ( Addressable lpFileName,  int InfoLevel,  Addressable lpFindStreamData,  int dwFlags) {
        var mh$ = FindFirstStreamW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, InfoLevel, lpFindStreamData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextStreamW$MH() {
        return RuntimeHelper.requireNonNull(constants$86.FindNextStreamW$MH,"FindNextStreamW");
    }
    public static int FindNextStreamW ( Addressable hFindStream,  Addressable lpFindStreamData) {
        var mh$ = FindNextStreamW$MH();
        try {
            return (int)mh$.invokeExact(hFindStream, lpFindStreamData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreFileApisANSI$MH() {
        return RuntimeHelper.requireNonNull(constants$86.AreFileApisANSI$MH,"AreFileApisANSI");
    }
    public static int AreFileApisANSI () {
        var mh$ = AreFileApisANSI$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPathA$MH() {
        return RuntimeHelper.requireNonNull(constants$87.GetTempPathA$MH,"GetTempPathA");
    }
    public static int GetTempPathA ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetTempPathA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$87.FindFirstFileNameW$MH,"FindFirstFileNameW");
    }
    public static MemoryAddress FindFirstFileNameW ( Addressable lpFileName,  int dwFlags,  Addressable StringLength,  Addressable LinkName) {
        var mh$ = FindFirstFileNameW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwFlags, StringLength, LinkName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$87.FindNextFileNameW$MH,"FindNextFileNameW");
    }
    public static int FindNextFileNameW ( Addressable hFindStream,  Addressable StringLength,  Addressable LinkName) {
        var mh$ = FindNextFileNameW$MH();
        try {
            return (int)mh$.invokeExact(hFindStream, StringLength, LinkName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$87.GetVolumeInformationA$MH,"GetVolumeInformationA");
    }
    public static int GetVolumeInformationA ( Addressable lpRootPathName,  Addressable lpVolumeNameBuffer,  int nVolumeNameSize,  Addressable lpVolumeSerialNumber,  Addressable lpMaximumComponentLength,  Addressable lpFileSystemFlags,  Addressable lpFileSystemNameBuffer,  int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$87.GetTempFileNameA$MH,"GetTempFileNameA");
    }
    public static int GetTempFileNameA ( Addressable lpPathName,  Addressable lpPrefixString,  int uUnique,  Addressable lpTempFileName) {
        var mh$ = GetTempFileNameA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileApisToOEM$MH() {
        return RuntimeHelper.requireNonNull(constants$87.SetFileApisToOEM$MH,"SetFileApisToOEM");
    }
    public static void SetFileApisToOEM () {
        var mh$ = SetFileApisToOEM$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileApisToANSI$MH() {
        return RuntimeHelper.requireNonNull(constants$88.SetFileApisToANSI$MH,"SetFileApisToANSI");
    }
    public static void SetFileApisToANSI () {
        var mh$ = SetFileApisToANSI$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDebuggerPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$88.IsDebuggerPresent$MH,"IsDebuggerPresent");
    }
    public static int IsDebuggerPresent () {
        var mh$ = IsDebuggerPresent$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugBreak$MH() {
        return RuntimeHelper.requireNonNull(constants$88.DebugBreak$MH,"DebugBreak");
    }
    public static void DebugBreak () {
        var mh$ = DebugBreak$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OutputDebugStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$88.OutputDebugStringA$MH,"OutputDebugStringA");
    }
    public static void OutputDebugStringA ( Addressable lpOutputString) {
        var mh$ = OutputDebugStringA$MH();
        try {
            mh$.invokeExact(lpOutputString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OutputDebugStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$88.OutputDebugStringW$MH,"OutputDebugStringW");
    }
    public static void OutputDebugStringW ( Addressable lpOutputString) {
        var mh$ = OutputDebugStringW$MH();
        try {
            mh$.invokeExact(lpOutputString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ContinueDebugEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$88.ContinueDebugEvent$MH,"ContinueDebugEvent");
    }
    public static int ContinueDebugEvent ( int dwProcessId,  int dwThreadId,  int dwContinueStatus) {
        var mh$ = ContinueDebugEvent$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId, dwThreadId, dwContinueStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForDebugEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$89.WaitForDebugEvent$MH,"WaitForDebugEvent");
    }
    public static int WaitForDebugEvent ( Addressable lpDebugEvent,  int dwMilliseconds) {
        var mh$ = WaitForDebugEvent$MH();
        try {
            return (int)mh$.invokeExact(lpDebugEvent, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugActiveProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$89.DebugActiveProcess$MH,"DebugActiveProcess");
    }
    public static int DebugActiveProcess ( int dwProcessId) {
        var mh$ = DebugActiveProcess$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugActiveProcessStop$MH() {
        return RuntimeHelper.requireNonNull(constants$89.DebugActiveProcessStop$MH,"DebugActiveProcessStop");
    }
    public static int DebugActiveProcessStop ( int dwProcessId) {
        var mh$ = DebugActiveProcessStop$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckRemoteDebuggerPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$89.CheckRemoteDebuggerPresent$MH,"CheckRemoteDebuggerPresent");
    }
    public static int CheckRemoteDebuggerPresent ( Addressable hProcess,  Addressable pbDebuggerPresent) {
        var mh$ = CheckRemoteDebuggerPresent$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pbDebuggerPresent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForDebugEventEx$MH() {
        return RuntimeHelper.requireNonNull(constants$89.WaitForDebugEventEx$MH,"WaitForDebugEventEx");
    }
    public static int WaitForDebugEventEx ( Addressable lpDebugEvent,  int dwMilliseconds) {
        var mh$ = WaitForDebugEventEx$MH();
        try {
            return (int)mh$.invokeExact(lpDebugEvent, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$89.CloseHandle$MH,"CloseHandle");
    }
    public static int CloseHandle ( Addressable hObject) {
        var mh$ = CloseHandle$MH();
        try {
            return (int)mh$.invokeExact(hObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$90.DuplicateHandle$MH,"DuplicateHandle");
    }
    public static int DuplicateHandle ( Addressable hSourceProcessHandle,  Addressable hSourceHandle,  Addressable hTargetProcessHandle,  Addressable lpTargetHandle,  int dwDesiredAccess,  int bInheritHandle,  int dwOptions) {
        var mh$ = DuplicateHandle$MH();
        try {
            return (int)mh$.invokeExact(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle, lpTargetHandle, dwDesiredAccess, bInheritHandle, dwOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareObjectHandles$MH() {
        return RuntimeHelper.requireNonNull(constants$90.CompareObjectHandles$MH,"CompareObjectHandles");
    }
    public static int CompareObjectHandles ( Addressable hFirstObjectHandle,  Addressable hSecondObjectHandle) {
        var mh$ = CompareObjectHandles$MH();
        try {
            return (int)mh$.invokeExact(hFirstObjectHandle, hSecondObjectHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetHandleInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$90.GetHandleInformation$MH,"GetHandleInformation");
    }
    public static int GetHandleInformation ( Addressable hObject,  Addressable lpdwFlags) {
        var mh$ = GetHandleInformation$MH();
        try {
            return (int)mh$.invokeExact(hObject, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetHandleInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$90.SetHandleInformation$MH,"SetHandleInformation");
    }
    public static int SetHandleInformation ( Addressable hObject,  int dwMask,  int dwFlags) {
        var mh$ = SetHandleInformation$MH();
        try {
            return (int)mh$.invokeExact(hObject, dwMask, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$91.RaiseException$MH,"RaiseException");
    }
    public static void RaiseException ( int dwExceptionCode,  int dwExceptionFlags,  int nNumberOfArguments,  Addressable lpArguments) {
        var mh$ = RaiseException$MH();
        try {
            mh$.invokeExact(dwExceptionCode, dwExceptionFlags, nNumberOfArguments, lpArguments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhandledExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$91.UnhandledExceptionFilter$MH,"UnhandledExceptionFilter");
    }
    public static int UnhandledExceptionFilter ( Addressable ExceptionInfo) {
        var mh$ = UnhandledExceptionFilter$MH();
        try {
            return (int)mh$.invokeExact(ExceptionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUnhandledExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$91.SetUnhandledExceptionFilter$MH,"SetUnhandledExceptionFilter");
    }
    public static MemoryAddress SetUnhandledExceptionFilter ( Addressable lpTopLevelExceptionFilter) {
        var mh$ = SetUnhandledExceptionFilter$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpTopLevelExceptionFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$91.GetLastError$MH,"GetLastError");
    }
    public static int GetLastError () {
        var mh$ = GetLastError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$92.SetLastError$MH,"SetLastError");
    }
    public static void SetLastError ( int dwErrCode) {
        var mh$ = SetLastError$MH();
        try {
            mh$.invokeExact(dwErrCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$92.GetErrorMode$MH,"GetErrorMode");
    }
    public static int GetErrorMode () {
        var mh$ = GetErrorMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$92.SetErrorMode$MH,"SetErrorMode");
    }
    public static int SetErrorMode ( int uMode) {
        var mh$ = SetErrorMode$MH();
        try {
            return (int)mh$.invokeExact(uMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddVectoredExceptionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$92.AddVectoredExceptionHandler$MH,"AddVectoredExceptionHandler");
    }
    public static MemoryAddress AddVectoredExceptionHandler ( int First,  Addressable Handler) {
        var mh$ = AddVectoredExceptionHandler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(First, Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveVectoredExceptionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$92.RemoveVectoredExceptionHandler$MH,"RemoveVectoredExceptionHandler");
    }
    public static int RemoveVectoredExceptionHandler ( Addressable Handle) {
        var mh$ = RemoveVectoredExceptionHandler$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddVectoredContinueHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$92.AddVectoredContinueHandler$MH,"AddVectoredContinueHandler");
    }
    public static MemoryAddress AddVectoredContinueHandler ( int First,  Addressable Handler) {
        var mh$ = AddVectoredContinueHandler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(First, Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveVectoredContinueHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$93.RemoveVectoredContinueHandler$MH,"RemoveVectoredContinueHandler");
    }
    public static int RemoveVectoredContinueHandler ( Addressable Handle) {
        var mh$ = RemoveVectoredContinueHandler$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseFailFastException$MH() {
        return RuntimeHelper.requireNonNull(constants$93.RaiseFailFastException$MH,"RaiseFailFastException");
    }
    public static void RaiseFailFastException ( Addressable pExceptionRecord,  Addressable pContextRecord,  int dwFlags) {
        var mh$ = RaiseFailFastException$MH();
        try {
            mh$.invokeExact(pExceptionRecord, pContextRecord, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FatalAppExitA$MH() {
        return RuntimeHelper.requireNonNull(constants$93.FatalAppExitA$MH,"FatalAppExitA");
    }
    public static void FatalAppExitA ( int uAction,  Addressable lpMessageText) {
        var mh$ = FatalAppExitA$MH();
        try {
            mh$.invokeExact(uAction, lpMessageText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FatalAppExitW$MH() {
        return RuntimeHelper.requireNonNull(constants$93.FatalAppExitW$MH,"FatalAppExitW");
    }
    public static void FatalAppExitW ( int uAction,  Addressable lpMessageText) {
        var mh$ = FatalAppExitW$MH();
        try {
            mh$.invokeExact(uAction, lpMessageText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$93.GetThreadErrorMode$MH,"GetThreadErrorMode");
    }
    public static int GetThreadErrorMode () {
        var mh$ = GetThreadErrorMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$93.SetThreadErrorMode$MH,"SetThreadErrorMode");
    }
    public static int SetThreadErrorMode ( int dwNewMode,  Addressable lpOldMode) {
        var mh$ = SetThreadErrorMode$MH();
        try {
            return (int)mh$.invokeExact(dwNewMode, lpOldMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateProcessOnMemoryExhaustion$MH() {
        return RuntimeHelper.requireNonNull(constants$94.TerminateProcessOnMemoryExhaustion$MH,"TerminateProcessOnMemoryExhaustion");
    }
    public static void TerminateProcessOnMemoryExhaustion ( long FailedAllocationSize) {
        var mh$ = TerminateProcessOnMemoryExhaustion$MH();
        try {
            mh$.invokeExact(FailedAllocationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$94.FlsAlloc$MH,"FlsAlloc");
    }
    public static int FlsAlloc ( Addressable lpCallback) {
        var mh$ = FlsAlloc$MH();
        try {
            return (int)mh$.invokeExact(lpCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$94.FlsGetValue$MH,"FlsGetValue");
    }
    public static MemoryAddress FlsGetValue ( int dwFlsIndex) {
        var mh$ = FlsGetValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwFlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsSetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$94.FlsSetValue$MH,"FlsSetValue");
    }
    public static int FlsSetValue ( int dwFlsIndex,  Addressable lpFlsData) {
        var mh$ = FlsSetValue$MH();
        try {
            return (int)mh$.invokeExact(dwFlsIndex, lpFlsData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$94.FlsFree$MH,"FlsFree");
    }
    public static int FlsFree ( int dwFlsIndex) {
        var mh$ = FlsFree$MH();
        try {
            return (int)mh$.invokeExact(dwFlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsThreadAFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$94.IsThreadAFiber$MH,"IsThreadAFiber");
    }
    public static int IsThreadAFiber () {
        var mh$ = IsThreadAFiber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePipe$MH() {
        return RuntimeHelper.requireNonNull(constants$95.CreatePipe$MH,"CreatePipe");
    }
    public static int CreatePipe ( Addressable hReadPipe,  Addressable hWritePipe,  Addressable lpPipeAttributes,  int nSize) {
        var mh$ = CreatePipe$MH();
        try {
            return (int)mh$.invokeExact(hReadPipe, hWritePipe, lpPipeAttributes, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConnectNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$95.ConnectNamedPipe$MH,"ConnectNamedPipe");
    }
    public static int ConnectNamedPipe ( Addressable hNamedPipe,  Addressable lpOverlapped) {
        var mh$ = ConnectNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisconnectNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$95.DisconnectNamedPipe$MH,"DisconnectNamedPipe");
    }
    public static int DisconnectNamedPipe ( Addressable hNamedPipe) {
        var mh$ = DisconnectNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetNamedPipeHandleState$MH() {
        return RuntimeHelper.requireNonNull(constants$95.SetNamedPipeHandleState$MH,"SetNamedPipeHandleState");
    }
    public static int SetNamedPipeHandleState ( Addressable hNamedPipe,  Addressable lpMode,  Addressable lpMaxCollectionCount,  Addressable lpCollectDataTimeout) {
        var mh$ = SetNamedPipeHandleState$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpMode, lpMaxCollectionCount, lpCollectDataTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$95.PeekNamedPipe$MH,"PeekNamedPipe");
    }
    public static int PeekNamedPipe ( Addressable hNamedPipe,  Addressable lpBuffer,  int nBufferSize,  Addressable lpBytesRead,  Addressable lpTotalBytesAvail,  Addressable lpBytesLeftThisMessage) {
        var mh$ = PeekNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpBuffer, nBufferSize, lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransactNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$95.TransactNamedPipe$MH,"TransactNamedPipe");
    }
    public static int TransactNamedPipe ( Addressable hNamedPipe,  Addressable lpInBuffer,  int nInBufferSize,  Addressable lpOutBuffer,  int nOutBufferSize,  Addressable lpBytesRead,  Addressable lpOverlapped) {
        var mh$ = TransactNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$96.CreateNamedPipeW$MH,"CreateNamedPipeW");
    }
    public static MemoryAddress CreateNamedPipeW ( Addressable lpName,  int dwOpenMode,  int dwPipeMode,  int nMaxInstances,  int nOutBufferSize,  int nInBufferSize,  int nDefaultTimeOut,  Addressable lpSecurityAttributes) {
        var mh$ = CreateNamedPipeW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$96.WaitNamedPipeW$MH,"WaitNamedPipeW");
    }
    public static int WaitNamedPipeW ( Addressable lpNamedPipeName,  int nTimeOut) {
        var mh$ = WaitNamedPipeW$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$96.GetNamedPipeClientComputerNameW$MH,"GetNamedPipeClientComputerNameW");
    }
    public static int GetNamedPipeClientComputerNameW ( Addressable Pipe,  Addressable ClientComputerName,  int ClientComputerNameLength) {
        var mh$ = GetNamedPipeClientComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientComputerName, ClientComputerNameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateNamedPipeClient$MH() {
        return RuntimeHelper.requireNonNull(constants$96.ImpersonateNamedPipeClient$MH,"ImpersonateNamedPipeClient");
    }
    public static int ImpersonateNamedPipeClient ( Addressable hNamedPipe) {
        var mh$ = ImpersonateNamedPipeClient$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$96.GetNamedPipeInfo$MH,"GetNamedPipeInfo");
    }
    public static int GetNamedPipeInfo ( Addressable hNamedPipe,  Addressable lpFlags,  Addressable lpOutBufferSize,  Addressable lpInBufferSize,  Addressable lpMaxInstances) {
        var mh$ = GetNamedPipeInfo$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpFlags, lpOutBufferSize, lpInBufferSize, lpMaxInstances);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeHandleStateW$MH() {
        return RuntimeHelper.requireNonNull(constants$96.GetNamedPipeHandleStateW$MH,"GetNamedPipeHandleStateW");
    }
    public static int GetNamedPipeHandleStateW ( Addressable hNamedPipe,  Addressable lpState,  Addressable lpCurInstances,  Addressable lpMaxCollectionCount,  Addressable lpCollectDataTimeout,  Addressable lpUserName,  int nMaxUserNameSize) {
        var mh$ = GetNamedPipeHandleStateW$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$97.CallNamedPipeW$MH,"CallNamedPipeW");
    }
    public static int CallNamedPipeW ( Addressable lpNamedPipeName,  Addressable lpInBuffer,  int nInBufferSize,  Addressable lpOutBuffer,  int nOutBufferSize,  Addressable lpBytesRead,  int nTimeOut) {
        var mh$ = CallNamedPipeW$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPerformanceCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$97.QueryPerformanceCounter$MH,"QueryPerformanceCounter");
    }
    public static int QueryPerformanceCounter ( Addressable lpPerformanceCount) {
        var mh$ = QueryPerformanceCounter$MH();
        try {
            return (int)mh$.invokeExact(lpPerformanceCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPerformanceFrequency$MH() {
        return RuntimeHelper.requireNonNull(constants$97.QueryPerformanceFrequency$MH,"QueryPerformanceFrequency");
    }
    public static int QueryPerformanceFrequency ( Addressable lpFrequency) {
        var mh$ = QueryPerformanceFrequency$MH();
        try {
            return (int)mh$.invokeExact(lpFrequency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PHEAP_SUMMARY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHEAP_SUMMARY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle HeapCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$97.HeapCreate$MH,"HeapCreate");
    }
    public static MemoryAddress HeapCreate ( int flOptions,  long dwInitialSize,  long dwMaximumSize) {
        var mh$ = HeapCreate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(flOptions, dwInitialSize, dwMaximumSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$97.HeapDestroy$MH,"HeapDestroy");
    }
    public static int HeapDestroy ( Addressable hHeap) {
        var mh$ = HeapDestroy$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$97.HeapAlloc$MH,"HeapAlloc");
    }
    public static MemoryAddress HeapAlloc ( Addressable hHeap,  int dwFlags,  long dwBytes) {
        var mh$ = HeapAlloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hHeap, dwFlags, dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapReAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$98.HeapReAlloc$MH,"HeapReAlloc");
    }
    public static MemoryAddress HeapReAlloc ( Addressable hHeap,  int dwFlags,  Addressable lpMem,  long dwBytes) {
        var mh$ = HeapReAlloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hHeap, dwFlags, lpMem, dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapFree$MH() {
        return RuntimeHelper.requireNonNull(constants$98.HeapFree$MH,"HeapFree");
    }
    public static int HeapFree ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = HeapFree$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSize$MH() {
        return RuntimeHelper.requireNonNull(constants$98.HeapSize$MH,"HeapSize");
    }
    public static long HeapSize ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = HeapSize$MH();
        try {
            return (long)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHeap$MH() {
        return RuntimeHelper.requireNonNull(constants$98.GetProcessHeap$MH,"GetProcessHeap");
    }
    public static MemoryAddress GetProcessHeap () {
        var mh$ = GetProcessHeap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapCompact$MH() {
        return RuntimeHelper.requireNonNull(constants$98.HeapCompact$MH,"HeapCompact");
    }
    public static long HeapCompact ( Addressable hHeap,  int dwFlags) {
        var mh$ = HeapCompact$MH();
        try {
            return (long)mh$.invokeExact(hHeap, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSetInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$98.HeapSetInformation$MH,"HeapSetInformation");
    }
    public static int HeapSetInformation ( Addressable HeapHandle,  int HeapInformationClass,  Addressable HeapInformation,  long HeapInformationLength) {
        var mh$ = HeapSetInformation$MH();
        try {
            return (int)mh$.invokeExact(HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapValidate$MH() {
        return RuntimeHelper.requireNonNull(constants$99.HeapValidate$MH,"HeapValidate");
    }
    public static int HeapValidate ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = HeapValidate$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSummary$MH() {
        return RuntimeHelper.requireNonNull(constants$99.HeapSummary$MH,"HeapSummary");
    }
    public static int HeapSummary ( Addressable hHeap,  int dwFlags,  Addressable lpSummary) {
        var mh$ = HeapSummary$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpSummary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHeaps$MH() {
        return RuntimeHelper.requireNonNull(constants$99.GetProcessHeaps$MH,"GetProcessHeaps");
    }
    public static int GetProcessHeaps ( int NumberOfHeaps,  Addressable ProcessHeaps) {
        var mh$ = GetProcessHeaps$MH();
        try {
            return (int)mh$.invokeExact(NumberOfHeaps, ProcessHeaps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapLock$MH() {
        return RuntimeHelper.requireNonNull(constants$99.HeapLock$MH,"HeapLock");
    }
    public static int HeapLock ( Addressable hHeap) {
        var mh$ = HeapLock$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$99.HeapUnlock$MH,"HeapUnlock");
    }
    public static int HeapUnlock ( Addressable hHeap) {
        var mh$ = HeapUnlock$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapWalk$MH() {
        return RuntimeHelper.requireNonNull(constants$99.HeapWalk$MH,"HeapWalk");
    }
    public static int HeapWalk ( Addressable hHeap,  Addressable lpEntry) {
        var mh$ = HeapWalk$MH();
        try {
            return (int)mh$.invokeExact(hHeap, lpEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapQueryInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$100.HeapQueryInformation$MH,"HeapQueryInformation");
    }
    public static int HeapQueryInformation ( Addressable HeapHandle,  int HeapInformationClass,  Addressable HeapInformation,  long HeapInformationLength,  Addressable ReturnLength) {
        var mh$ = HeapQueryInformation$MH();
        try {
            return (int)mh$.invokeExact(HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSRWLOCK = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InitializeSRWLock$MH() {
        return RuntimeHelper.requireNonNull(constants$100.InitializeSRWLock$MH,"InitializeSRWLock");
    }
    public static void InitializeSRWLock ( Addressable SRWLock) {
        var mh$ = InitializeSRWLock$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$100.ReleaseSRWLockExclusive$MH,"ReleaseSRWLockExclusive");
    }
    public static void ReleaseSRWLockExclusive ( Addressable SRWLock) {
        var mh$ = ReleaseSRWLockExclusive$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$100.ReleaseSRWLockShared$MH,"ReleaseSRWLockShared");
    }
    public static void ReleaseSRWLockShared ( Addressable SRWLock) {
        var mh$ = ReleaseSRWLockShared$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AcquireSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$100.AcquireSRWLockExclusive$MH,"AcquireSRWLockExclusive");
    }
    public static void AcquireSRWLockExclusive ( Addressable SRWLock) {
        var mh$ = AcquireSRWLockExclusive$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AcquireSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$100.AcquireSRWLockShared$MH,"AcquireSRWLockShared");
    }
    public static void AcquireSRWLockShared ( Addressable SRWLock) {
        var mh$ = AcquireSRWLockShared$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryAcquireSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$101.TryAcquireSRWLockExclusive$MH,"TryAcquireSRWLockExclusive");
    }
    public static byte TryAcquireSRWLockExclusive ( Addressable SRWLock) {
        var mh$ = TryAcquireSRWLockExclusive$MH();
        try {
            return (byte)mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryAcquireSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$101.TryAcquireSRWLockShared$MH,"TryAcquireSRWLockShared");
    }
    public static byte TryAcquireSRWLockShared ( Addressable SRWLock) {
        var mh$ = TryAcquireSRWLockShared$MH();
        try {
            return (byte)mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$101.InitializeCriticalSection$MH,"InitializeCriticalSection");
    }
    public static void InitializeCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = InitializeCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnterCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$101.EnterCriticalSection$MH,"EnterCriticalSection");
    }
    public static void EnterCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = EnterCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LeaveCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$101.LeaveCriticalSection$MH,"LeaveCriticalSection");
    }
    public static void LeaveCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = LeaveCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSectionAndSpinCount$MH() {
        return RuntimeHelper.requireNonNull(constants$101.InitializeCriticalSectionAndSpinCount$MH,"InitializeCriticalSectionAndSpinCount");
    }
    public static int InitializeCriticalSectionAndSpinCount ( Addressable lpCriticalSection,  int dwSpinCount) {
        var mh$ = InitializeCriticalSectionAndSpinCount$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSectionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$102.InitializeCriticalSectionEx$MH,"InitializeCriticalSectionEx");
    }
    public static int InitializeCriticalSectionEx ( Addressable lpCriticalSection,  int dwSpinCount,  int Flags) {
        var mh$ = InitializeCriticalSectionEx$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCriticalSectionSpinCount$MH() {
        return RuntimeHelper.requireNonNull(constants$102.SetCriticalSectionSpinCount$MH,"SetCriticalSectionSpinCount");
    }
    public static int SetCriticalSectionSpinCount ( Addressable lpCriticalSection,  int dwSpinCount) {
        var mh$ = SetCriticalSectionSpinCount$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryEnterCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$102.TryEnterCriticalSection$MH,"TryEnterCriticalSection");
    }
    public static int TryEnterCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = TryEnterCriticalSection$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$102.DeleteCriticalSection$MH,"DeleteCriticalSection");
    }
    public static void DeleteCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = DeleteCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PINIT_ONCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINIT_ONCE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InitOnceInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$103.InitOnceInitialize$MH,"InitOnceInitialize");
    }
    public static void InitOnceInitialize ( Addressable InitOnce) {
        var mh$ = InitOnceInitialize$MH();
        try {
            mh$.invokeExact(InitOnce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceExecuteOnce$MH() {
        return RuntimeHelper.requireNonNull(constants$103.InitOnceExecuteOnce$MH,"InitOnceExecuteOnce");
    }
    public static int InitOnceExecuteOnce ( Addressable InitOnce,  Addressable InitFn,  Addressable Parameter,  Addressable Context) {
        var mh$ = InitOnceExecuteOnce$MH();
        try {
            return (int)mh$.invokeExact(InitOnce, InitFn, Parameter, Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceBeginInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$103.InitOnceBeginInitialize$MH,"InitOnceBeginInitialize");
    }
    public static int InitOnceBeginInitialize ( Addressable lpInitOnce,  int dwFlags,  Addressable fPending,  Addressable lpContext) {
        var mh$ = InitOnceBeginInitialize$MH();
        try {
            return (int)mh$.invokeExact(lpInitOnce, dwFlags, fPending, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceComplete$MH() {
        return RuntimeHelper.requireNonNull(constants$103.InitOnceComplete$MH,"InitOnceComplete");
    }
    public static int InitOnceComplete ( Addressable lpInitOnce,  int dwFlags,  Addressable lpContext) {
        var mh$ = InitOnceComplete$MH();
        try {
            return (int)mh$.invokeExact(lpInitOnce, dwFlags, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONDITION_VARIABLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InitializeConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$103.InitializeConditionVariable$MH,"InitializeConditionVariable");
    }
    public static void InitializeConditionVariable ( Addressable ConditionVariable) {
        var mh$ = InitializeConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$103.WakeConditionVariable$MH,"WakeConditionVariable");
    }
    public static void WakeConditionVariable ( Addressable ConditionVariable) {
        var mh$ = WakeConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeAllConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$104.WakeAllConditionVariable$MH,"WakeAllConditionVariable");
    }
    public static void WakeAllConditionVariable ( Addressable ConditionVariable) {
        var mh$ = WakeAllConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepConditionVariableCS$MH() {
        return RuntimeHelper.requireNonNull(constants$104.SleepConditionVariableCS$MH,"SleepConditionVariableCS");
    }
    public static int SleepConditionVariableCS ( Addressable ConditionVariable,  Addressable CriticalSection,  int dwMilliseconds) {
        var mh$ = SleepConditionVariableCS$MH();
        try {
            return (int)mh$.invokeExact(ConditionVariable, CriticalSection, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepConditionVariableSRW$MH() {
        return RuntimeHelper.requireNonNull(constants$104.SleepConditionVariableSRW$MH,"SleepConditionVariableSRW");
    }
    public static int SleepConditionVariableSRW ( Addressable ConditionVariable,  Addressable SRWLock,  int dwMilliseconds,  int Flags) {
        var mh$ = SleepConditionVariableSRW$MH();
        try {
            return (int)mh$.invokeExact(ConditionVariable, SRWLock, dwMilliseconds, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$104.SetEvent$MH,"SetEvent");
    }
    public static int SetEvent ( Addressable hEvent) {
        var mh$ = SetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$104.ResetEvent$MH,"ResetEvent");
    }
    public static int ResetEvent ( Addressable hEvent) {
        var mh$ = ResetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$104.ReleaseSemaphore$MH,"ReleaseSemaphore");
    }
    public static int ReleaseSemaphore ( Addressable hSemaphore,  int lReleaseCount,  Addressable lpPreviousCount) {
        var mh$ = ReleaseSemaphore$MH();
        try {
            return (int)mh$.invokeExact(hSemaphore, lReleaseCount, lpPreviousCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$105.ReleaseMutex$MH,"ReleaseMutex");
    }
    public static int ReleaseMutex ( Addressable hMutex) {
        var mh$ = ReleaseMutex$MH();
        try {
            return (int)mh$.invokeExact(hMutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForSingleObject$MH() {
        return RuntimeHelper.requireNonNull(constants$105.WaitForSingleObject$MH,"WaitForSingleObject");
    }
    public static int WaitForSingleObject ( Addressable hHandle,  int dwMilliseconds) {
        var mh$ = WaitForSingleObject$MH();
        try {
            return (int)mh$.invokeExact(hHandle, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepEx$MH() {
        return RuntimeHelper.requireNonNull(constants$105.SleepEx$MH,"SleepEx");
    }
    public static int SleepEx ( int dwMilliseconds,  int bAlertable) {
        var mh$ = SleepEx$MH();
        try {
            return (int)mh$.invokeExact(dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForSingleObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$105.WaitForSingleObjectEx$MH,"WaitForSingleObjectEx");
    }
    public static int WaitForSingleObjectEx ( Addressable hHandle,  int dwMilliseconds,  int bAlertable) {
        var mh$ = WaitForSingleObjectEx$MH();
        try {
            return (int)mh$.invokeExact(hHandle, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForMultipleObjectsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$105.WaitForMultipleObjectsEx$MH,"WaitForMultipleObjectsEx");
    }
    public static int WaitForMultipleObjectsEx ( int nCount,  Addressable lpHandles,  int bWaitAll,  int dwMilliseconds,  int bAlertable) {
        var mh$ = WaitForMultipleObjectsEx$MH();
        try {
            return (int)mh$.invokeExact(nCount, lpHandles, bWaitAll, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexA$MH() {
        return RuntimeHelper.requireNonNull(constants$105.CreateMutexA$MH,"CreateMutexA");
    }
    public static MemoryAddress CreateMutexA ( Addressable lpMutexAttributes,  int bInitialOwner,  Addressable lpName) {
        var mh$ = CreateMutexA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMutexAttributes, bInitialOwner, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexW$MH() {
        return RuntimeHelper.requireNonNull(constants$106.CreateMutexW$MH,"CreateMutexW");
    }
    public static MemoryAddress CreateMutexW ( Addressable lpMutexAttributes,  int bInitialOwner,  Addressable lpName) {
        var mh$ = CreateMutexW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMutexAttributes, bInitialOwner, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenMutexW$MH() {
        return RuntimeHelper.requireNonNull(constants$106.OpenMutexW$MH,"OpenMutexW");
    }
    public static MemoryAddress OpenMutexW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenMutexW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventA$MH() {
        return RuntimeHelper.requireNonNull(constants$106.CreateEventA$MH,"CreateEventA");
    }
    public static MemoryAddress CreateEventA ( Addressable lpEventAttributes,  int bManualReset,  int bInitialState,  Addressable lpName) {
        var mh$ = CreateEventA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpEventAttributes, bManualReset, bInitialState, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventW$MH() {
        return RuntimeHelper.requireNonNull(constants$106.CreateEventW$MH,"CreateEventW");
    }
    public static MemoryAddress CreateEventW ( Addressable lpEventAttributes,  int bManualReset,  int bInitialState,  Addressable lpName) {
        var mh$ = CreateEventW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpEventAttributes, bManualReset, bInitialState, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventA$MH() {
        return RuntimeHelper.requireNonNull(constants$106.OpenEventA$MH,"OpenEventA");
    }
    public static MemoryAddress OpenEventA ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenEventA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventW$MH() {
        return RuntimeHelper.requireNonNull(constants$106.OpenEventW$MH,"OpenEventW");
    }
    public static MemoryAddress OpenEventW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenEventW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSemaphoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$107.OpenSemaphoreW$MH,"OpenSemaphoreW");
    }
    public static MemoryAddress OpenSemaphoreW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenSemaphoreW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWaitableTimerW$MH() {
        return RuntimeHelper.requireNonNull(constants$107.OpenWaitableTimerW$MH,"OpenWaitableTimerW");
    }
    public static MemoryAddress OpenWaitableTimerW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpTimerName) {
        var mh$ = OpenWaitableTimerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWaitableTimerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$107.SetWaitableTimerEx$MH,"SetWaitableTimerEx");
    }
    public static int SetWaitableTimerEx ( Addressable hTimer,  Addressable lpDueTime,  int lPeriod,  Addressable pfnCompletionRoutine,  Addressable lpArgToCompletionRoutine,  Addressable WakeContext,  int TolerableDelay) {
        var mh$ = SetWaitableTimerEx$MH();
        try {
            return (int)mh$.invokeExact(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, WakeContext, TolerableDelay);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWaitableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$107.SetWaitableTimer$MH,"SetWaitableTimer");
    }
    public static int SetWaitableTimer ( Addressable hTimer,  Addressable lpDueTime,  int lPeriod,  Addressable pfnCompletionRoutine,  Addressable lpArgToCompletionRoutine,  int fResume) {
        var mh$ = SetWaitableTimer$MH();
        try {
            return (int)mh$.invokeExact(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, fResume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelWaitableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$108.CancelWaitableTimer$MH,"CancelWaitableTimer");
    }
    public static int CancelWaitableTimer ( Addressable hTimer) {
        var mh$ = CancelWaitableTimer$MH();
        try {
            return (int)mh$.invokeExact(hTimer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexExA$MH() {
        return RuntimeHelper.requireNonNull(constants$108.CreateMutexExA$MH,"CreateMutexExA");
    }
    public static MemoryAddress CreateMutexExA ( Addressable lpMutexAttributes,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateMutexExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMutexAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexExW$MH() {
        return RuntimeHelper.requireNonNull(constants$108.CreateMutexExW$MH,"CreateMutexExW");
    }
    public static MemoryAddress CreateMutexExW ( Addressable lpMutexAttributes,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateMutexExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMutexAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventExA$MH() {
        return RuntimeHelper.requireNonNull(constants$108.CreateEventExA$MH,"CreateEventExA");
    }
    public static MemoryAddress CreateEventExA ( Addressable lpEventAttributes,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateEventExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpEventAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventExW$MH() {
        return RuntimeHelper.requireNonNull(constants$108.CreateEventExW$MH,"CreateEventExW");
    }
    public static MemoryAddress CreateEventExW ( Addressable lpEventAttributes,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateEventExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpEventAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreExW$MH() {
        return RuntimeHelper.requireNonNull(constants$108.CreateSemaphoreExW$MH,"CreateSemaphoreExW");
    }
    public static MemoryAddress CreateSemaphoreExW ( Addressable lpSemaphoreAttributes,  int lInitialCount,  int lMaximumCount,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateSemaphoreExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerExW$MH() {
        return RuntimeHelper.requireNonNull(constants$109.CreateWaitableTimerExW$MH,"CreateWaitableTimerExW");
    }
    public static MemoryAddress CreateWaitableTimerExW ( Addressable lpTimerAttributes,  Addressable lpTimerName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateWaitableTimerExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSYNCHRONIZATION_BARRIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSYNCHRONIZATION_BARRIER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle EnterSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$109.EnterSynchronizationBarrier$MH,"EnterSynchronizationBarrier");
    }
    public static int EnterSynchronizationBarrier ( Addressable lpBarrier,  int dwFlags) {
        var mh$ = EnterSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$109.InitializeSynchronizationBarrier$MH,"InitializeSynchronizationBarrier");
    }
    public static int InitializeSynchronizationBarrier ( Addressable lpBarrier,  int lTotalThreads,  int lSpinCount) {
        var mh$ = InitializeSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier, lTotalThreads, lSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$109.DeleteSynchronizationBarrier$MH,"DeleteSynchronizationBarrier");
    }
    public static int DeleteSynchronizationBarrier ( Addressable lpBarrier) {
        var mh$ = DeleteSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$109.Sleep$MH,"Sleep");
    }
    public static void Sleep ( int dwMilliseconds) {
        var mh$ = Sleep$MH();
        try {
            mh$.invokeExact(dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitOnAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$109.WaitOnAddress$MH,"WaitOnAddress");
    }
    public static int WaitOnAddress ( Addressable Address,  Addressable CompareAddress,  long AddressSize,  int dwMilliseconds) {
        var mh$ = WaitOnAddress$MH();
        try {
            return (int)mh$.invokeExact(Address, CompareAddress, AddressSize, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeByAddressSingle$MH() {
        return RuntimeHelper.requireNonNull(constants$110.WakeByAddressSingle$MH,"WakeByAddressSingle");
    }
    public static void WakeByAddressSingle ( Addressable Address) {
        var mh$ = WakeByAddressSingle$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeByAddressAll$MH() {
        return RuntimeHelper.requireNonNull(constants$110.WakeByAddressAll$MH,"WakeByAddressAll");
    }
    public static void WakeByAddressAll ( Addressable Address) {
        var mh$ = WakeByAddressAll$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SignalObjectAndWait$MH() {
        return RuntimeHelper.requireNonNull(constants$110.SignalObjectAndWait$MH,"SignalObjectAndWait");
    }
    public static int SignalObjectAndWait ( Addressable hObjectToSignal,  Addressable hObjectToWaitOn,  int dwMilliseconds,  int bAlertable) {
        var mh$ = SignalObjectAndWait$MH();
        try {
            return (int)mh$.invokeExact(hObjectToSignal, hObjectToWaitOn, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForMultipleObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$110.WaitForMultipleObjects$MH,"WaitForMultipleObjects");
    }
    public static int WaitForMultipleObjects ( int nCount,  Addressable lpHandles,  int bWaitAll,  int dwMilliseconds) {
        var mh$ = WaitForMultipleObjects$MH();
        try {
            return (int)mh$.invokeExact(nCount, lpHandles, bWaitAll, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$110.CreateSemaphoreW$MH,"CreateSemaphoreW");
    }
    public static MemoryAddress CreateSemaphoreW ( Addressable lpSemaphoreAttributes,  int lInitialCount,  int lMaximumCount,  Addressable lpName) {
        var mh$ = CreateSemaphoreW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerW$MH() {
        return RuntimeHelper.requireNonNull(constants$110.CreateWaitableTimerW$MH,"CreateWaitableTimerW");
    }
    public static MemoryAddress CreateWaitableTimerW ( Addressable lpTimerAttributes,  int bManualReset,  Addressable lpTimerName) {
        var mh$ = CreateWaitableTimerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpTimerAttributes, bManualReset, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSListHead$MH() {
        return RuntimeHelper.requireNonNull(constants$111.InitializeSListHead$MH,"InitializeSListHead");
    }
    public static void InitializeSListHead ( Addressable ListHead) {
        var mh$ = InitializeSListHead$MH();
        try {
            mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPopEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$111.InterlockedPopEntrySList$MH,"InterlockedPopEntrySList");
    }
    public static MemoryAddress InterlockedPopEntrySList ( Addressable ListHead) {
        var mh$ = InterlockedPopEntrySList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPushEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$111.InterlockedPushEntrySList$MH,"InterlockedPushEntrySList");
    }
    public static MemoryAddress InterlockedPushEntrySList ( Addressable ListHead,  Addressable ListEntry) {
        var mh$ = InterlockedPushEntrySList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead, ListEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPushListSListEx$MH() {
        return RuntimeHelper.requireNonNull(constants$111.InterlockedPushListSListEx$MH,"InterlockedPushListSListEx");
    }
    public static MemoryAddress InterlockedPushListSListEx ( Addressable ListHead,  Addressable List,  Addressable ListEnd,  int Count) {
        var mh$ = InterlockedPushListSListEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead, List, ListEnd, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedFlushSList$MH() {
        return RuntimeHelper.requireNonNull(constants$111.InterlockedFlushSList$MH,"InterlockedFlushSList");
    }
    public static MemoryAddress InterlockedFlushSList ( Addressable ListHead) {
        var mh$ = InterlockedFlushSList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDepthSList$MH() {
        return RuntimeHelper.requireNonNull(constants$111.QueryDepthSList$MH,"QueryDepthSList");
    }
    public static short QueryDepthSList ( Addressable ListHead) {
        var mh$ = QueryDepthSList$MH();
        try {
            return (short)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPROCESS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROCESS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTARTUPINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTARTUPINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTARTUPINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle QueueUserAPC$MH() {
        return RuntimeHelper.requireNonNull(constants$112.QueueUserAPC$MH,"QueueUserAPC");
    }
    public static int QueueUserAPC ( Addressable pfnAPC,  Addressable hThread,  long dwData) {
        var mh$ = QueueUserAPC$MH();
        try {
            return (int)mh$.invokeExact(pfnAPC, hThread, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$112.GetProcessTimes$MH,"GetProcessTimes");
    }
    public static int GetProcessTimes ( Addressable hProcess,  Addressable lpCreationTime,  Addressable lpExitTime,  Addressable lpKernelTime,  Addressable lpUserTime) {
        var mh$ = GetProcessTimes$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$112.GetCurrentProcess$MH,"GetCurrentProcess");
    }
    public static MemoryAddress GetCurrentProcess () {
        var mh$ = GetCurrentProcess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$112.GetCurrentProcessId$MH,"GetCurrentProcessId");
    }
    public static int GetCurrentProcessId () {
        var mh$ = GetCurrentProcessId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$112.ExitProcess$MH,"ExitProcess");
    }
    public static void ExitProcess ( int uExitCode) {
        var mh$ = ExitProcess$MH();
        try {
            mh$.invokeExact(uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$112.TerminateProcess$MH,"TerminateProcess");
    }
    public static int TerminateProcess ( Addressable hProcess,  int uExitCode) {
        var mh$ = TerminateProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess, uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExitCodeProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$113.GetExitCodeProcess$MH,"GetExitCodeProcess");
    }
    public static int GetExitCodeProcess ( Addressable hProcess,  Addressable lpExitCode) {
        var mh$ = GetExitCodeProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchToThread$MH() {
        return RuntimeHelper.requireNonNull(constants$113.SwitchToThread$MH,"SwitchToThread");
    }
    public static int SwitchToThread () {
        var mh$ = SwitchToThread$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$113.CreateThread$MH,"CreateThread");
    }
    public static MemoryAddress CreateThread ( Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpThreadId) {
        var mh$ = CreateThread$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRemoteThread$MH() {
        return RuntimeHelper.requireNonNull(constants$113.CreateRemoteThread$MH,"CreateRemoteThread");
    }
    public static MemoryAddress CreateRemoteThread ( Addressable hProcess,  Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpThreadId) {
        var mh$ = CreateRemoteThread$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThread$MH() {
        return RuntimeHelper.requireNonNull(constants$113.GetCurrentThread$MH,"GetCurrentThread");
    }
    public static MemoryAddress GetCurrentThread () {
        var mh$ = GetCurrentThread$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadId$MH() {
        return RuntimeHelper.requireNonNull(constants$113.GetCurrentThreadId$MH,"GetCurrentThreadId");
    }
    public static int GetCurrentThreadId () {
        var mh$ = GetCurrentThreadId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenThread$MH() {
        return RuntimeHelper.requireNonNull(constants$114.OpenThread$MH,"OpenThread");
    }
    public static MemoryAddress OpenThread ( int dwDesiredAccess,  int bInheritHandle,  int dwThreadId) {
        var mh$ = OpenThread$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$114.SetThreadPriority$MH,"SetThreadPriority");
    }
    public static int SetThreadPriority ( Addressable hThread,  int nPriority) {
        var mh$ = SetThreadPriority$MH();
        try {
            return (int)mh$.invokeExact(hThread, nPriority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$114.SetThreadPriorityBoost$MH,"SetThreadPriorityBoost");
    }
    public static int SetThreadPriorityBoost ( Addressable hThread,  int bDisablePriorityBoost) {
        var mh$ = SetThreadPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hThread, bDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$114.GetThreadPriorityBoost$MH,"GetThreadPriorityBoost");
    }
    public static int GetThreadPriorityBoost ( Addressable hThread,  Addressable pDisablePriorityBoost) {
        var mh$ = GetThreadPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hThread, pDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$114.GetThreadPriority$MH,"GetThreadPriority");
    }
    public static int GetThreadPriority ( Addressable hThread) {
        var mh$ = GetThreadPriority$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitThread$MH() {
        return RuntimeHelper.requireNonNull(constants$114.ExitThread$MH,"ExitThread");
    }
    public static void ExitThread ( int dwExitCode) {
        var mh$ = ExitThread$MH();
        try {
            mh$.invokeExact(dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$115.TerminateThread$MH,"TerminateThread");
    }
    public static int TerminateThread ( Addressable hThread,  int dwExitCode) {
        var mh$ = TerminateThread$MH();
        try {
            return (int)mh$.invokeExact(hThread, dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExitCodeThread$MH() {
        return RuntimeHelper.requireNonNull(constants$115.GetExitCodeThread$MH,"GetExitCodeThread");
    }
    public static int GetExitCodeThread ( Addressable hThread,  Addressable lpExitCode) {
        var mh$ = GetExitCodeThread$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuspendThread$MH() {
        return RuntimeHelper.requireNonNull(constants$115.SuspendThread$MH,"SuspendThread");
    }
    public static int SuspendThread ( Addressable hThread) {
        var mh$ = SuspendThread$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResumeThread$MH() {
        return RuntimeHelper.requireNonNull(constants$115.ResumeThread$MH,"ResumeThread");
    }
    public static int ResumeThread ( Addressable hThread) {
        var mh$ = ResumeThread$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$115.TlsAlloc$MH,"TlsAlloc");
    }
    public static int TlsAlloc () {
        var mh$ = TlsAlloc$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$115.TlsGetValue$MH,"TlsGetValue");
    }
    public static MemoryAddress TlsGetValue ( int dwTlsIndex) {
        var mh$ = TlsGetValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwTlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsSetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$116.TlsSetValue$MH,"TlsSetValue");
    }
    public static int TlsSetValue ( int dwTlsIndex,  Addressable lpTlsValue) {
        var mh$ = TlsSetValue$MH();
        try {
            return (int)mh$.invokeExact(dwTlsIndex, lpTlsValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$116.TlsFree$MH,"TlsFree");
    }
    public static int TlsFree ( int dwTlsIndex) {
        var mh$ = TlsFree$MH();
        try {
            return (int)mh$.invokeExact(dwTlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessA$MH() {
        return RuntimeHelper.requireNonNull(constants$116.CreateProcessA$MH,"CreateProcessA");
    }
    public static int CreateProcessA ( Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessA$MH();
        try {
            return (int)mh$.invokeExact(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessW$MH() {
        return RuntimeHelper.requireNonNull(constants$116.CreateProcessW$MH,"CreateProcessW");
    }
    public static int CreateProcessW ( Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessW$MH();
        try {
            return (int)mh$.invokeExact(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessShutdownParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$116.SetProcessShutdownParameters$MH,"SetProcessShutdownParameters");
    }
    public static int SetProcessShutdownParameters ( int dwLevel,  int dwFlags) {
        var mh$ = SetProcessShutdownParameters$MH();
        try {
            return (int)mh$.invokeExact(dwLevel, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$116.GetProcessVersion$MH,"GetProcessVersion");
    }
    public static int GetProcessVersion ( int ProcessId) {
        var mh$ = GetProcessVersion$MH();
        try {
            return (int)mh$.invokeExact(ProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStartupInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$117.GetStartupInfoW$MH,"GetStartupInfoW");
    }
    public static void GetStartupInfoW ( Addressable lpStartupInfo) {
        var mh$ = GetStartupInfoW$MH();
        try {
            mh$.invokeExact(lpStartupInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessAsUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$117.CreateProcessAsUserW$MH,"CreateProcessAsUserW");
    }
    public static int CreateProcessAsUserW ( Addressable hToken,  Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessAsUserW$MH();
        try {
            return (int)mh$.invokeExact(hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessToken$MH() {
        return RuntimeHelper.requireNonNull(constants$117.GetCurrentProcessToken$MH,"GetCurrentProcessToken");
    }
    public static MemoryAddress GetCurrentProcessToken () {
        var mh$ = GetCurrentProcessToken$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$117.GetCurrentThreadToken$MH,"GetCurrentThreadToken");
    }
    public static MemoryAddress GetCurrentThreadToken () {
        var mh$ = GetCurrentThreadToken$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadEffectiveToken$MH() {
        return RuntimeHelper.requireNonNull(constants$117.GetCurrentThreadEffectiveToken$MH,"GetCurrentThreadEffectiveToken");
    }
    public static MemoryAddress GetCurrentThreadEffectiveToken () {
        var mh$ = GetCurrentThreadEffectiveToken$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$117.SetThreadToken$MH,"SetThreadToken");
    }
    public static int SetThreadToken ( Addressable Thread,  Addressable Token) {
        var mh$ = SetThreadToken$MH();
        try {
            return (int)mh$.invokeExact(Thread, Token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcessToken$MH() {
        return RuntimeHelper.requireNonNull(constants$118.OpenProcessToken$MH,"OpenProcessToken");
    }
    public static int OpenProcessToken ( Addressable ProcessHandle,  int DesiredAccess,  Addressable TokenHandle) {
        var mh$ = OpenProcessToken$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, DesiredAccess, TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$118.OpenThreadToken$MH,"OpenThreadToken");
    }
    public static int OpenThreadToken ( Addressable ThreadHandle,  int DesiredAccess,  int OpenAsSelf,  Addressable TokenHandle) {
        var mh$ = OpenThreadToken$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, DesiredAccess, OpenAsSelf, TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPriorityClass$MH() {
        return RuntimeHelper.requireNonNull(constants$118.SetPriorityClass$MH,"SetPriorityClass");
    }
    public static int SetPriorityClass ( Addressable hProcess,  int dwPriorityClass) {
        var mh$ = SetPriorityClass$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwPriorityClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPriorityClass$MH() {
        return RuntimeHelper.requireNonNull(constants$118.GetPriorityClass$MH,"GetPriorityClass");
    }
    public static int GetPriorityClass ( Addressable hProcess) {
        var mh$ = GetPriorityClass$MH();
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadStackGuarantee$MH() {
        return RuntimeHelper.requireNonNull(constants$118.SetThreadStackGuarantee$MH,"SetThreadStackGuarantee");
    }
    public static int SetThreadStackGuarantee ( Addressable StackSizeInBytes) {
        var mh$ = SetThreadStackGuarantee$MH();
        try {
            return (int)mh$.invokeExact(StackSizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ProcessIdToSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$118.ProcessIdToSessionId$MH,"ProcessIdToSessionId");
    }
    public static int ProcessIdToSessionId ( int dwProcessId,  Addressable pSessionId) {
        var mh$ = ProcessIdToSessionId$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId, pSessionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPROC_THREAD_ATTRIBUTE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROC_THREAD_ATTRIBUTE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$119.GetProcessId$MH,"GetProcessId");
    }
    public static int GetProcessId ( Addressable Process) {
        var mh$ = GetProcessId$MH();
        try {
            return (int)mh$.invokeExact(Process);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadId$MH() {
        return RuntimeHelper.requireNonNull(constants$119.GetThreadId$MH,"GetThreadId");
    }
    public static int GetThreadId ( Addressable Thread) {
        var mh$ = GetThreadId$MH();
        try {
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushProcessWriteBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$119.FlushProcessWriteBuffers$MH,"FlushProcessWriteBuffers");
    }
    public static void FlushProcessWriteBuffers () {
        var mh$ = FlushProcessWriteBuffers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessIdOfThread$MH() {
        return RuntimeHelper.requireNonNull(constants$119.GetProcessIdOfThread$MH,"GetProcessIdOfThread");
    }
    public static int GetProcessIdOfThread ( Addressable Thread) {
        var mh$ = GetProcessIdOfThread$MH();
        try {
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeProcThreadAttributeList$MH() {
        return RuntimeHelper.requireNonNull(constants$119.InitializeProcThreadAttributeList$MH,"InitializeProcThreadAttributeList");
    }
    public static int InitializeProcThreadAttributeList ( Addressable lpAttributeList,  int dwAttributeCount,  int dwFlags,  Addressable lpSize) {
        var mh$ = InitializeProcThreadAttributeList$MH();
        try {
            return (int)mh$.invokeExact(lpAttributeList, dwAttributeCount, dwFlags, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteProcThreadAttributeList$MH() {
        return RuntimeHelper.requireNonNull(constants$119.DeleteProcThreadAttributeList$MH,"DeleteProcThreadAttributeList");
    }
    public static void DeleteProcThreadAttributeList ( Addressable lpAttributeList) {
        var mh$ = DeleteProcThreadAttributeList$MH();
        try {
            mh$.invokeExact(lpAttributeList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateProcThreadAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$120.UpdateProcThreadAttribute$MH,"UpdateProcThreadAttribute");
    }
    public static int UpdateProcThreadAttribute ( Addressable lpAttributeList,  int dwFlags,  long Attribute,  Addressable lpValue,  long cbSize,  Addressable lpPreviousValue,  Addressable lpReturnSize) {
        var mh$ = UpdateProcThreadAttribute$MH();
        try {
            return (int)mh$.invokeExact(lpAttributeList, dwFlags, Attribute, lpValue, cbSize, lpPreviousValue, lpReturnSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDynamicEHContinuationTargets$MH() {
        return RuntimeHelper.requireNonNull(constants$120.SetProcessDynamicEHContinuationTargets$MH,"SetProcessDynamicEHContinuationTargets");
    }
    public static int SetProcessDynamicEHContinuationTargets ( Addressable Process,  short NumberOfTargets,  Addressable Targets) {
        var mh$ = SetProcessDynamicEHContinuationTargets$MH();
        try {
            return (int)mh$.invokeExact(Process, NumberOfTargets, Targets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDynamicEnforcedCetCompatibleRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$120.SetProcessDynamicEnforcedCetCompatibleRanges$MH,"SetProcessDynamicEnforcedCetCompatibleRanges");
    }
    public static int SetProcessDynamicEnforcedCetCompatibleRanges ( Addressable Process,  short NumberOfRanges,  Addressable Ranges) {
        var mh$ = SetProcessDynamicEnforcedCetCompatibleRanges$MH();
        try {
            return (int)mh$.invokeExact(Process, NumberOfRanges, Ranges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessAffinityUpdateMode$MH() {
        return RuntimeHelper.requireNonNull(constants$120.SetProcessAffinityUpdateMode$MH,"SetProcessAffinityUpdateMode");
    }
    public static int SetProcessAffinityUpdateMode ( Addressable hProcess,  int dwFlags) {
        var mh$ = SetProcessAffinityUpdateMode$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProcessAffinityUpdateMode$MH() {
        return RuntimeHelper.requireNonNull(constants$120.QueryProcessAffinityUpdateMode$MH,"QueryProcessAffinityUpdateMode");
    }
    public static int QueryProcessAffinityUpdateMode ( Addressable hProcess,  Addressable lpdwFlags) {
        var mh$ = QueryProcessAffinityUpdateMode$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRemoteThreadEx$MH() {
        return RuntimeHelper.requireNonNull(constants$120.CreateRemoteThreadEx$MH,"CreateRemoteThreadEx");
    }
    public static MemoryAddress CreateRemoteThreadEx ( Addressable hProcess,  Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpAttributeList,  Addressable lpThreadId) {
        var mh$ = CreateRemoteThreadEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpAttributeList, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadStackLimits$MH() {
        return RuntimeHelper.requireNonNull(constants$121.GetCurrentThreadStackLimits$MH,"GetCurrentThreadStackLimits");
    }
    public static void GetCurrentThreadStackLimits ( Addressable LowLimit,  Addressable HighLimit) {
        var mh$ = GetCurrentThreadStackLimits$MH();
        try {
            mh$.invokeExact(LowLimit, HighLimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$121.GetThreadContext$MH,"GetThreadContext");
    }
    public static int GetThreadContext ( Addressable hThread,  Addressable lpContext) {
        var mh$ = GetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessMitigationPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$121.GetProcessMitigationPolicy$MH,"GetProcessMitigationPolicy");
    }
    public static int GetProcessMitigationPolicy ( Addressable hProcess,  int MitigationPolicy,  Addressable lpBuffer,  long dwLength) {
        var mh$ = GetProcessMitigationPolicy$MH();
        try {
            return (int)mh$.invokeExact(hProcess, MitigationPolicy, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$121.SetThreadContext$MH,"SetThreadContext");
    }
    public static int SetThreadContext ( Addressable hThread,  Addressable lpContext) {
        var mh$ = SetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessMitigationPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$121.SetProcessMitigationPolicy$MH,"SetProcessMitigationPolicy");
    }
    public static int SetProcessMitigationPolicy ( int MitigationPolicy,  Addressable lpBuffer,  long dwLength) {
        var mh$ = SetProcessMitigationPolicy$MH();
        try {
            return (int)mh$.invokeExact(MitigationPolicy, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushInstructionCache$MH() {
        return RuntimeHelper.requireNonNull(constants$121.FlushInstructionCache$MH,"FlushInstructionCache");
    }
    public static int FlushInstructionCache ( Addressable hProcess,  Addressable lpBaseAddress,  long dwSize) {
        var mh$ = FlushInstructionCache$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpBaseAddress, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$122.GetThreadTimes$MH,"GetThreadTimes");
    }
    public static int GetThreadTimes ( Addressable hThread,  Addressable lpCreationTime,  Addressable lpExitTime,  Addressable lpKernelTime,  Addressable lpUserTime) {
        var mh$ = GetThreadTimes$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$122.OpenProcess$MH,"OpenProcess");
    }
    public static MemoryAddress OpenProcess ( int dwDesiredAccess,  int bInheritHandle,  int dwProcessId) {
        var mh$ = OpenProcess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessorFeaturePresent$MH() {
        return RuntimeHelper.requireNonNull(constants$122.IsProcessorFeaturePresent$MH,"IsProcessorFeaturePresent");
    }
    public static int IsProcessorFeaturePresent ( int ProcessorFeature) {
        var mh$ = IsProcessorFeaturePresent$MH();
        try {
            return (int)mh$.invokeExact(ProcessorFeature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHandleCount$MH() {
        return RuntimeHelper.requireNonNull(constants$122.GetProcessHandleCount$MH,"GetProcessHandleCount");
    }
    public static int GetProcessHandleCount ( Addressable hProcess,  Addressable pdwHandleCount) {
        var mh$ = GetProcessHandleCount$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pdwHandleCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessorNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$122.GetCurrentProcessorNumber$MH,"GetCurrentProcessorNumber");
    }
    public static int GetCurrentProcessorNumber () {
        var mh$ = GetCurrentProcessorNumber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadIdealProcessorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$122.SetThreadIdealProcessorEx$MH,"SetThreadIdealProcessorEx");
    }
    public static int SetThreadIdealProcessorEx ( Addressable hThread,  Addressable lpIdealProcessor,  Addressable lpPreviousIdealProcessor) {
        var mh$ = SetThreadIdealProcessorEx$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIdealProcessor, lpPreviousIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadIdealProcessorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$123.GetThreadIdealProcessorEx$MH,"GetThreadIdealProcessorEx");
    }
    public static int GetThreadIdealProcessorEx ( Addressable hThread,  Addressable lpIdealProcessor) {
        var mh$ = GetThreadIdealProcessorEx$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessorNumberEx$MH() {
        return RuntimeHelper.requireNonNull(constants$123.GetCurrentProcessorNumberEx$MH,"GetCurrentProcessorNumberEx");
    }
    public static void GetCurrentProcessorNumberEx ( Addressable ProcNumber) {
        var mh$ = GetCurrentProcessorNumberEx$MH();
        try {
            mh$.invokeExact(ProcNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$123.GetProcessPriorityBoost$MH,"GetProcessPriorityBoost");
    }
    public static int GetProcessPriorityBoost ( Addressable hProcess,  Addressable pDisablePriorityBoost) {
        var mh$ = GetProcessPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$123.SetProcessPriorityBoost$MH,"SetProcessPriorityBoost");
    }
    public static int SetProcessPriorityBoost ( Addressable hProcess,  int bDisablePriorityBoost) {
        var mh$ = SetProcessPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hProcess, bDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadIOPendingFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$123.GetThreadIOPendingFlag$MH,"GetThreadIOPendingFlag");
    }
    public static int GetThreadIOPendingFlag ( Addressable hThread,  Addressable lpIOIsPending) {
        var mh$ = GetThreadIOPendingFlag$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIOIsPending);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$123.GetSystemTimes$MH,"GetSystemTimes");
    }
    public static int GetSystemTimes ( Addressable lpIdleTime,  Addressable lpKernelTime,  Addressable lpUserTime) {
        var mh$ = GetSystemTimes$MH();
        try {
            return (int)mh$.invokeExact(lpIdleTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ThreadMemoryPriority() {
        return (int)0L;
    }
    public static int ThreadAbsoluteCpuPriority() {
        return (int)1L;
    }
    public static int ThreadDynamicCodePolicy() {
        return (int)2L;
    }
    public static int ThreadPowerThrottling() {
        return (int)3L;
    }
    public static int ThreadInformationClassMax() {
        return (int)4L;
    }
    public static OfAddress PMEMORY_PRIORITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$124.GetThreadInformation$MH,"GetThreadInformation");
    }
    public static int GetThreadInformation ( Addressable hThread,  int ThreadInformationClass,  Addressable ThreadInformation,  int ThreadInformationSize) {
        var mh$ = GetThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(hThread, ThreadInformationClass, ThreadInformation, ThreadInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$124.SetThreadInformation$MH,"SetThreadInformation");
    }
    public static int SetThreadInformation ( Addressable hThread,  int ThreadInformationClass,  Addressable ThreadInformation,  int ThreadInformationSize) {
        var mh$ = SetThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(hThread, ThreadInformationClass, ThreadInformation, ThreadInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessCritical$MH() {
        return RuntimeHelper.requireNonNull(constants$124.IsProcessCritical$MH,"IsProcessCritical");
    }
    public static int IsProcessCritical ( Addressable hProcess,  Addressable Critical) {
        var mh$ = IsProcessCritical$MH();
        try {
            return (int)mh$.invokeExact(hProcess, Critical);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProtectedPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$124.SetProtectedPolicy$MH,"SetProtectedPolicy");
    }
    public static int SetProtectedPolicy ( Addressable PolicyGuid,  long PolicyValue,  Addressable OldPolicyValue) {
        var mh$ = SetProtectedPolicy$MH();
        try {
            return (int)mh$.invokeExact(PolicyGuid, PolicyValue, OldPolicyValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProtectedPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$124.QueryProtectedPolicy$MH,"QueryProtectedPolicy");
    }
    public static int QueryProtectedPolicy ( Addressable PolicyGuid,  Addressable PolicyValue) {
        var mh$ = QueryProtectedPolicy$MH();
        try {
            return (int)mh$.invokeExact(PolicyGuid, PolicyValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadIdealProcessor$MH() {
        return RuntimeHelper.requireNonNull(constants$124.SetThreadIdealProcessor$MH,"SetThreadIdealProcessor");
    }
    public static int SetThreadIdealProcessor ( Addressable hThread,  int dwIdealProcessor) {
        var mh$ = SetThreadIdealProcessor$MH();
        try {
            return (int)mh$.invokeExact(hThread, dwIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ProcessMemoryPriority() {
        return (int)0L;
    }
    public static int ProcessMemoryExhaustionInfo() {
        return (int)1L;
    }
    public static int ProcessAppMemoryInfo() {
        return (int)2L;
    }
    public static int ProcessInPrivateInfo() {
        return (int)3L;
    }
    public static int ProcessPowerThrottling() {
        return (int)4L;
    }
    public static int ProcessReservedValue1() {
        return (int)5L;
    }
    public static int ProcessTelemetryCoverageInfo() {
        return (int)6L;
    }
    public static int ProcessProtectionLevelInfo() {
        return (int)7L;
    }
    public static int ProcessLeapSecondInfo() {
        return (int)8L;
    }
    public static int ProcessInformationClassMax() {
        return (int)9L;
    }
}


