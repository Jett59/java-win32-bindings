// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface RTL_UMS_SCHEDULER_ENTRY_POINT {

    void apply(int Reason, long ActivationPayload, java.lang.foreign.MemoryAddress SchedulerParam);
    static MemorySegment allocate(RTL_UMS_SCHEDULER_ENTRY_POINT fi, MemorySession session) {
        return RuntimeHelper.upcallStub(RTL_UMS_SCHEDULER_ENTRY_POINT.class, fi, constants$59.RTL_UMS_SCHEDULER_ENTRY_POINT$FUNC, session);
    }
    static RTL_UMS_SCHEDULER_ENTRY_POINT ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _Reason, long _ActivationPayload, java.lang.foreign.MemoryAddress _SchedulerParam) -> {
            try {
                constants$59.RTL_UMS_SCHEDULER_ENTRY_POINT$MH.invokeExact((Addressable)symbol, _Reason, _ActivationPayload, (java.lang.foreign.Addressable)_SchedulerParam);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


