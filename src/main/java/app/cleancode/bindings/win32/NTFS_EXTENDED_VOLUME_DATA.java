// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class NTFS_EXTENDED_VOLUME_DATA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ByteCount"),
        Constants$root.C_SHORT$LAYOUT.withName("MajorVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("MinorVersion"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerPhysicalSector"),
        Constants$root.C_SHORT$LAYOUT.withName("LfsMajorVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("LfsMinorVersion"),
        Constants$root.C_LONG$LAYOUT.withName("MaxDeviceTrimExtentCount"),
        Constants$root.C_LONG$LAYOUT.withName("MaxDeviceTrimByteCount"),
        Constants$root.C_LONG$LAYOUT.withName("MaxVolumeTrimExtentCount"),
        Constants$root.C_LONG$LAYOUT.withName("MaxVolumeTrimByteCount")
    );
    public static MemoryLayout $LAYOUT() {
        return NTFS_EXTENDED_VOLUME_DATA.$struct$LAYOUT;
    }
    static final VarHandle ByteCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ByteCount"));
    public static VarHandle ByteCount$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.ByteCount$VH;
    }
    public static int ByteCount$get(MemorySegment seg) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.ByteCount$VH.get(seg);
    }
    public static void ByteCount$set( MemorySegment seg, int x) {
        NTFS_EXTENDED_VOLUME_DATA.ByteCount$VH.set(seg, x);
    }
    public static int ByteCount$get(MemorySegment seg, long index) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.ByteCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteCount$set(MemorySegment seg, long index, int x) {
        NTFS_EXTENDED_VOLUME_DATA.ByteCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static VarHandle MajorVersion$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.MajorVersion$VH;
    }
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)NTFS_EXTENDED_VOLUME_DATA.MajorVersion$VH.get(seg);
    }
    public static void MajorVersion$set( MemorySegment seg, short x) {
        NTFS_EXTENDED_VOLUME_DATA.MajorVersion$VH.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)NTFS_EXTENDED_VOLUME_DATA.MajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        NTFS_EXTENDED_VOLUME_DATA.MajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static VarHandle MinorVersion$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.MinorVersion$VH;
    }
    public static short MinorVersion$get(MemorySegment seg) {
        return (short)NTFS_EXTENDED_VOLUME_DATA.MinorVersion$VH.get(seg);
    }
    public static void MinorVersion$set( MemorySegment seg, short x) {
        NTFS_EXTENDED_VOLUME_DATA.MinorVersion$VH.set(seg, x);
    }
    public static short MinorVersion$get(MemorySegment seg, long index) {
        return (short)NTFS_EXTENDED_VOLUME_DATA.MinorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, short x) {
        NTFS_EXTENDED_VOLUME_DATA.MinorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerPhysicalSector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerPhysicalSector"));
    public static VarHandle BytesPerPhysicalSector$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.BytesPerPhysicalSector$VH;
    }
    public static int BytesPerPhysicalSector$get(MemorySegment seg) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.BytesPerPhysicalSector$VH.get(seg);
    }
    public static void BytesPerPhysicalSector$set( MemorySegment seg, int x) {
        NTFS_EXTENDED_VOLUME_DATA.BytesPerPhysicalSector$VH.set(seg, x);
    }
    public static int BytesPerPhysicalSector$get(MemorySegment seg, long index) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.BytesPerPhysicalSector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerPhysicalSector$set(MemorySegment seg, long index, int x) {
        NTFS_EXTENDED_VOLUME_DATA.BytesPerPhysicalSector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LfsMajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LfsMajorVersion"));
    public static VarHandle LfsMajorVersion$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.LfsMajorVersion$VH;
    }
    public static short LfsMajorVersion$get(MemorySegment seg) {
        return (short)NTFS_EXTENDED_VOLUME_DATA.LfsMajorVersion$VH.get(seg);
    }
    public static void LfsMajorVersion$set( MemorySegment seg, short x) {
        NTFS_EXTENDED_VOLUME_DATA.LfsMajorVersion$VH.set(seg, x);
    }
    public static short LfsMajorVersion$get(MemorySegment seg, long index) {
        return (short)NTFS_EXTENDED_VOLUME_DATA.LfsMajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LfsMajorVersion$set(MemorySegment seg, long index, short x) {
        NTFS_EXTENDED_VOLUME_DATA.LfsMajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LfsMinorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LfsMinorVersion"));
    public static VarHandle LfsMinorVersion$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.LfsMinorVersion$VH;
    }
    public static short LfsMinorVersion$get(MemorySegment seg) {
        return (short)NTFS_EXTENDED_VOLUME_DATA.LfsMinorVersion$VH.get(seg);
    }
    public static void LfsMinorVersion$set( MemorySegment seg, short x) {
        NTFS_EXTENDED_VOLUME_DATA.LfsMinorVersion$VH.set(seg, x);
    }
    public static short LfsMinorVersion$get(MemorySegment seg, long index) {
        return (short)NTFS_EXTENDED_VOLUME_DATA.LfsMinorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LfsMinorVersion$set(MemorySegment seg, long index, short x) {
        NTFS_EXTENDED_VOLUME_DATA.LfsMinorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxDeviceTrimExtentCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxDeviceTrimExtentCount"));
    public static VarHandle MaxDeviceTrimExtentCount$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimExtentCount$VH;
    }
    public static int MaxDeviceTrimExtentCount$get(MemorySegment seg) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimExtentCount$VH.get(seg);
    }
    public static void MaxDeviceTrimExtentCount$set( MemorySegment seg, int x) {
        NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimExtentCount$VH.set(seg, x);
    }
    public static int MaxDeviceTrimExtentCount$get(MemorySegment seg, long index) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimExtentCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxDeviceTrimExtentCount$set(MemorySegment seg, long index, int x) {
        NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimExtentCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxDeviceTrimByteCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxDeviceTrimByteCount"));
    public static VarHandle MaxDeviceTrimByteCount$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimByteCount$VH;
    }
    public static int MaxDeviceTrimByteCount$get(MemorySegment seg) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimByteCount$VH.get(seg);
    }
    public static void MaxDeviceTrimByteCount$set( MemorySegment seg, int x) {
        NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimByteCount$VH.set(seg, x);
    }
    public static int MaxDeviceTrimByteCount$get(MemorySegment seg, long index) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimByteCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxDeviceTrimByteCount$set(MemorySegment seg, long index, int x) {
        NTFS_EXTENDED_VOLUME_DATA.MaxDeviceTrimByteCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxVolumeTrimExtentCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxVolumeTrimExtentCount"));
    public static VarHandle MaxVolumeTrimExtentCount$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimExtentCount$VH;
    }
    public static int MaxVolumeTrimExtentCount$get(MemorySegment seg) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimExtentCount$VH.get(seg);
    }
    public static void MaxVolumeTrimExtentCount$set( MemorySegment seg, int x) {
        NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimExtentCount$VH.set(seg, x);
    }
    public static int MaxVolumeTrimExtentCount$get(MemorySegment seg, long index) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimExtentCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxVolumeTrimExtentCount$set(MemorySegment seg, long index, int x) {
        NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimExtentCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxVolumeTrimByteCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxVolumeTrimByteCount"));
    public static VarHandle MaxVolumeTrimByteCount$VH() {
        return NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimByteCount$VH;
    }
    public static int MaxVolumeTrimByteCount$get(MemorySegment seg) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimByteCount$VH.get(seg);
    }
    public static void MaxVolumeTrimByteCount$set( MemorySegment seg, int x) {
        NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimByteCount$VH.set(seg, x);
    }
    public static int MaxVolumeTrimByteCount$get(MemorySegment seg, long index) {
        return (int)NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimByteCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxVolumeTrimByteCount$set(MemorySegment seg, long index, int x) {
        NTFS_EXTENDED_VOLUME_DATA.MaxVolumeTrimByteCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


