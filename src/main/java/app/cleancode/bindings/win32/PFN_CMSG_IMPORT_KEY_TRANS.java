// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFN_CMSG_IMPORT_KEY_TRANS {

    int apply(java.lang.foreign.MemoryAddress pContentEncryptionAlgorithm, java.lang.foreign.MemoryAddress pKeyTransDecryptPara, int dwFlags, java.lang.foreign.MemoryAddress pvReserved, java.lang.foreign.MemoryAddress phContentEncryptKey);
    static MemorySegment allocate(PFN_CMSG_IMPORT_KEY_TRANS fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFN_CMSG_IMPORT_KEY_TRANS.class, fi, constants$431.PFN_CMSG_IMPORT_KEY_TRANS$FUNC, session);
    }
    static PFN_CMSG_IMPORT_KEY_TRANS ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _pContentEncryptionAlgorithm, java.lang.foreign.MemoryAddress _pKeyTransDecryptPara, int _dwFlags, java.lang.foreign.MemoryAddress _pvReserved, java.lang.foreign.MemoryAddress _phContentEncryptKey) -> {
            try {
                return (int)constants$431.PFN_CMSG_IMPORT_KEY_TRANS$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_pContentEncryptionAlgorithm, (java.lang.foreign.Addressable)_pKeyTransDecryptPara, _dwFlags, (java.lang.foreign.Addressable)_pvReserved, (java.lang.foreign.Addressable)_phContentEncryptKey);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


