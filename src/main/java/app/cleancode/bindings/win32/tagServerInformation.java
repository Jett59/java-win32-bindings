// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagServerInformation {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwServerPid"),
        Constants$root.C_LONG$LAYOUT.withName("dwServerTid"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ui64ServerAddress")
    ).withName("tagServerInformation");
    public static MemoryLayout $LAYOUT() {
        return tagServerInformation.$struct$LAYOUT;
    }
    static final VarHandle dwServerPid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwServerPid"));
    public static VarHandle dwServerPid$VH() {
        return tagServerInformation.dwServerPid$VH;
    }
    public static int dwServerPid$get(MemorySegment seg) {
        return (int)tagServerInformation.dwServerPid$VH.get(seg);
    }
    public static void dwServerPid$set( MemorySegment seg, int x) {
        tagServerInformation.dwServerPid$VH.set(seg, x);
    }
    public static int dwServerPid$get(MemorySegment seg, long index) {
        return (int)tagServerInformation.dwServerPid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwServerPid$set(MemorySegment seg, long index, int x) {
        tagServerInformation.dwServerPid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwServerTid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwServerTid"));
    public static VarHandle dwServerTid$VH() {
        return tagServerInformation.dwServerTid$VH;
    }
    public static int dwServerTid$get(MemorySegment seg) {
        return (int)tagServerInformation.dwServerTid$VH.get(seg);
    }
    public static void dwServerTid$set( MemorySegment seg, int x) {
        tagServerInformation.dwServerTid$VH.set(seg, x);
    }
    public static int dwServerTid$get(MemorySegment seg, long index) {
        return (int)tagServerInformation.dwServerTid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwServerTid$set(MemorySegment seg, long index, int x) {
        tagServerInformation.dwServerTid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ui64ServerAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ui64ServerAddress"));
    public static VarHandle ui64ServerAddress$VH() {
        return tagServerInformation.ui64ServerAddress$VH;
    }
    public static long ui64ServerAddress$get(MemorySegment seg) {
        return (long)tagServerInformation.ui64ServerAddress$VH.get(seg);
    }
    public static void ui64ServerAddress$set( MemorySegment seg, long x) {
        tagServerInformation.ui64ServerAddress$VH.set(seg, x);
    }
    public static long ui64ServerAddress$get(MemorySegment seg, long index) {
        return (long)tagServerInformation.ui64ServerAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ui64ServerAddress$set(MemorySegment seg, long index, long x) {
        tagServerInformation.ui64ServerAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


