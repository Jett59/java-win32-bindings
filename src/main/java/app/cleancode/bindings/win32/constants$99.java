// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$99 {

    static final FunctionDescriptor HeapValidate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HeapValidate$MH = RuntimeHelper.downcallHandle(
        "HeapValidate",
        constants$99.HeapValidate$FUNC
    );
    static final FunctionDescriptor HeapSummary$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HeapSummary$MH = RuntimeHelper.downcallHandle(
        "HeapSummary",
        constants$99.HeapSummary$FUNC
    );
    static final FunctionDescriptor GetProcessHeaps$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetProcessHeaps$MH = RuntimeHelper.downcallHandle(
        "GetProcessHeaps",
        constants$99.GetProcessHeaps$FUNC
    );
    static final FunctionDescriptor HeapLock$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HeapLock$MH = RuntimeHelper.downcallHandle(
        "HeapLock",
        constants$99.HeapLock$FUNC
    );
    static final FunctionDescriptor HeapUnlock$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HeapUnlock$MH = RuntimeHelper.downcallHandle(
        "HeapUnlock",
        constants$99.HeapUnlock$FUNC
    );
    static final FunctionDescriptor HeapWalk$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HeapWalk$MH = RuntimeHelper.downcallHandle(
        "HeapWalk",
        constants$99.HeapWalk$FUNC
    );
}


