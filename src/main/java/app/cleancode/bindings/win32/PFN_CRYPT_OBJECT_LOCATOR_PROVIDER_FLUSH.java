// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH {

    int apply(java.lang.foreign.MemoryAddress pContext, java.lang.foreign.MemoryAddress rgIdentifierOrNameList, int dwIdentifierOrNameListCount);
    static MemorySegment allocate(PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH.class, fi, constants$633.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH$FUNC, session);
    }
    static PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _pContext, java.lang.foreign.MemoryAddress _rgIdentifierOrNameList, int _dwIdentifierOrNameListCount) -> {
            try {
                return (int)constants$633.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_pContext, (java.lang.foreign.Addressable)_rgIdentifierOrNameList, _dwIdentifierOrNameListCount);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


