// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class STORAGE_BREAK_RESERVATION_REQUEST {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Length"),
        Constants$root.C_CHAR$LAYOUT.withName("_unused"),
        Constants$root.C_CHAR$LAYOUT.withName("PathId"),
        Constants$root.C_CHAR$LAYOUT.withName("TargetId"),
        Constants$root.C_CHAR$LAYOUT.withName("Lun")
    ).withName("STORAGE_BREAK_RESERVATION_REQUEST");
    public static MemoryLayout $LAYOUT() {
        return STORAGE_BREAK_RESERVATION_REQUEST.$struct$LAYOUT;
    }
    static final VarHandle Length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Length"));
    public static VarHandle Length$VH() {
        return STORAGE_BREAK_RESERVATION_REQUEST.Length$VH;
    }
    public static int Length$get(MemorySegment seg) {
        return (int)STORAGE_BREAK_RESERVATION_REQUEST.Length$VH.get(seg);
    }
    public static void Length$set( MemorySegment seg, int x) {
        STORAGE_BREAK_RESERVATION_REQUEST.Length$VH.set(seg, x);
    }
    public static int Length$get(MemorySegment seg, long index) {
        return (int)STORAGE_BREAK_RESERVATION_REQUEST.Length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, int x) {
        STORAGE_BREAK_RESERVATION_REQUEST.Length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _unused$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_unused"));
    public static VarHandle _unused$VH() {
        return STORAGE_BREAK_RESERVATION_REQUEST._unused$VH;
    }
    public static byte _unused$get(MemorySegment seg) {
        return (byte)STORAGE_BREAK_RESERVATION_REQUEST._unused$VH.get(seg);
    }
    public static void _unused$set( MemorySegment seg, byte x) {
        STORAGE_BREAK_RESERVATION_REQUEST._unused$VH.set(seg, x);
    }
    public static byte _unused$get(MemorySegment seg, long index) {
        return (byte)STORAGE_BREAK_RESERVATION_REQUEST._unused$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _unused$set(MemorySegment seg, long index, byte x) {
        STORAGE_BREAK_RESERVATION_REQUEST._unused$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PathId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PathId"));
    public static VarHandle PathId$VH() {
        return STORAGE_BREAK_RESERVATION_REQUEST.PathId$VH;
    }
    public static byte PathId$get(MemorySegment seg) {
        return (byte)STORAGE_BREAK_RESERVATION_REQUEST.PathId$VH.get(seg);
    }
    public static void PathId$set( MemorySegment seg, byte x) {
        STORAGE_BREAK_RESERVATION_REQUEST.PathId$VH.set(seg, x);
    }
    public static byte PathId$get(MemorySegment seg, long index) {
        return (byte)STORAGE_BREAK_RESERVATION_REQUEST.PathId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PathId$set(MemorySegment seg, long index, byte x) {
        STORAGE_BREAK_RESERVATION_REQUEST.PathId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TargetId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TargetId"));
    public static VarHandle TargetId$VH() {
        return STORAGE_BREAK_RESERVATION_REQUEST.TargetId$VH;
    }
    public static byte TargetId$get(MemorySegment seg) {
        return (byte)STORAGE_BREAK_RESERVATION_REQUEST.TargetId$VH.get(seg);
    }
    public static void TargetId$set( MemorySegment seg, byte x) {
        STORAGE_BREAK_RESERVATION_REQUEST.TargetId$VH.set(seg, x);
    }
    public static byte TargetId$get(MemorySegment seg, long index) {
        return (byte)STORAGE_BREAK_RESERVATION_REQUEST.TargetId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetId$set(MemorySegment seg, long index, byte x) {
        STORAGE_BREAK_RESERVATION_REQUEST.TargetId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Lun$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Lun"));
    public static VarHandle Lun$VH() {
        return STORAGE_BREAK_RESERVATION_REQUEST.Lun$VH;
    }
    public static byte Lun$get(MemorySegment seg) {
        return (byte)STORAGE_BREAK_RESERVATION_REQUEST.Lun$VH.get(seg);
    }
    public static void Lun$set( MemorySegment seg, byte x) {
        STORAGE_BREAK_RESERVATION_REQUEST.Lun$VH.set(seg, x);
    }
    public static byte Lun$get(MemorySegment seg, long index) {
        return (byte)STORAGE_BREAK_RESERVATION_REQUEST.Lun$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Lun$set(MemorySegment seg, long index, byte x) {
        STORAGE_BREAK_RESERVATION_REQUEST.Lun$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


