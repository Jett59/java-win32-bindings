// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class WINDOWS_9 extends WINDOWS_8 {

    public static int JOB_STATUS_RENDERING_LOCALLY() {
        return (int)16384L;
    }
    public static int JOB_POSITION_UNSPECIFIED() {
        return (int)0L;
    }
    public static int PRINTER_DRIVER_PACKAGE_AWARE() {
        return (int)1L;
    }
    public static int PRINTER_DRIVER_XPS() {
        return (int)2L;
    }
    public static int PRINTER_DRIVER_SANDBOX_ENABLED() {
        return (int)4L;
    }
    public static int PRINTER_DRIVER_CLASS() {
        return (int)8L;
    }
    public static int PRINTER_DRIVER_DERIVED() {
        return (int)16L;
    }
    public static int PRINTER_DRIVER_NOT_SHAREABLE() {
        return (int)32L;
    }
    public static int PRINTER_DRIVER_CATEGORY_FAX() {
        return (int)64L;
    }
    public static int PRINTER_DRIVER_CATEGORY_FILE() {
        return (int)128L;
    }
    public static int PRINTER_DRIVER_CATEGORY_VIRTUAL() {
        return (int)256L;
    }
    public static int PRINTER_DRIVER_CATEGORY_SERVICE() {
        return (int)512L;
    }
    public static int PRINTER_DRIVER_SOFT_RESET_REQUIRED() {
        return (int)1024L;
    }
    public static int PRINTER_DRIVER_SANDBOX_DISABLED() {
        return (int)2048L;
    }
    public static int PRINTER_DRIVER_CATEGORY_3D() {
        return (int)4096L;
    }
    public static int PRINTER_DRIVER_CATEGORY_CLOUD() {
        return (int)8192L;
    }
    public static int DRIVER_KERNELMODE() {
        return (int)1L;
    }
    public static int DRIVER_USERMODE() {
        return (int)2L;
    }
    public static int DPD_DELETE_UNUSED_FILES() {
        return (int)1L;
    }
    public static int DPD_DELETE_SPECIFIC_VERSION() {
        return (int)2L;
    }
    public static int DPD_DELETE_ALL_FILES() {
        return (int)4L;
    }
    public static int APD_STRICT_UPGRADE() {
        return (int)1L;
    }
    public static int APD_STRICT_DOWNGRADE() {
        return (int)2L;
    }
    public static int APD_COPY_ALL_FILES() {
        return (int)4L;
    }
    public static int APD_COPY_NEW_FILES() {
        return (int)8L;
    }
    public static int APD_COPY_FROM_DIRECTORY() {
        return (int)16L;
    }
    public static int STRING_NONE() {
        return (int)1L;
    }
    public static int STRING_MUIDLL() {
        return (int)2L;
    }
    public static int STRING_LANGPAIR() {
        return (int)4L;
    }
    public static int DI_CHANNEL() {
        return (int)1L;
    }
    public static int DI_READ_SPOOL_JOB() {
        return (int)3L;
    }
    public static int DI_MEMORYMAP_WRITE() {
        return (int)1L;
    }
    public static int FORM_USER() {
        return (int)0L;
    }
    public static int FORM_BUILTIN() {
        return (int)1L;
    }
    public static int FORM_PRINTER() {
        return (int)2L;
    }
    public static int PORT_TYPE_WRITE() {
        return (int)1L;
    }
    public static int PORT_TYPE_READ() {
        return (int)2L;
    }
    public static int PORT_TYPE_REDIRECTED() {
        return (int)4L;
    }
    public static int PORT_TYPE_NET_ATTACHED() {
        return (int)8L;
    }
    public static int PORT_STATUS_TYPE_ERROR() {
        return (int)1L;
    }
    public static int PORT_STATUS_TYPE_WARNING() {
        return (int)2L;
    }
    public static int PORT_STATUS_TYPE_INFO() {
        return (int)3L;
    }
    public static int PORT_STATUS_OFFLINE() {
        return (int)1L;
    }
    public static int PORT_STATUS_PAPER_JAM() {
        return (int)2L;
    }
    public static int PORT_STATUS_PAPER_OUT() {
        return (int)3L;
    }
    public static int PORT_STATUS_OUTPUT_BIN_FULL() {
        return (int)4L;
    }
    public static int PORT_STATUS_PAPER_PROBLEM() {
        return (int)5L;
    }
    public static int PORT_STATUS_NO_TONER() {
        return (int)6L;
    }
    public static int PORT_STATUS_DOOR_OPEN() {
        return (int)7L;
    }
    public static int PORT_STATUS_USER_INTERVENTION() {
        return (int)8L;
    }
    public static int PORT_STATUS_OUT_OF_MEMORY() {
        return (int)9L;
    }
    public static int PORT_STATUS_TONER_LOW() {
        return (int)10L;
    }
    public static int PORT_STATUS_WARMING_UP() {
        return (int)11L;
    }
    public static int PORT_STATUS_POWER_SAVE() {
        return (int)12L;
    }
    public static int PRINTER_ENUM_DEFAULT() {
        return (int)1L;
    }
    public static int PRINTER_ENUM_LOCAL() {
        return (int)2L;
    }
    public static int PRINTER_ENUM_CONNECTIONS() {
        return (int)4L;
    }
    public static int PRINTER_ENUM_FAVORITE() {
        return (int)4L;
    }
    public static int PRINTER_ENUM_NAME() {
        return (int)8L;
    }
    public static int PRINTER_ENUM_REMOTE() {
        return (int)16L;
    }
    public static int PRINTER_ENUM_SHARED() {
        return (int)32L;
    }
    public static int PRINTER_ENUM_NETWORK() {
        return (int)64L;
    }
    public static int PRINTER_ENUM_EXPAND() {
        return (int)16384L;
    }
    public static int PRINTER_ENUM_CONTAINER() {
        return (int)32768L;
    }
    public static int PRINTER_ENUM_ICONMASK() {
        return (int)16711680L;
    }
    public static int PRINTER_ENUM_ICON1() {
        return (int)65536L;
    }
    public static int PRINTER_ENUM_ICON2() {
        return (int)131072L;
    }
    public static int PRINTER_ENUM_ICON3() {
        return (int)262144L;
    }
    public static int PRINTER_ENUM_ICON4() {
        return (int)524288L;
    }
    public static int PRINTER_ENUM_ICON5() {
        return (int)1048576L;
    }
    public static int PRINTER_ENUM_ICON6() {
        return (int)2097152L;
    }
    public static int PRINTER_ENUM_ICON7() {
        return (int)4194304L;
    }
    public static int PRINTER_ENUM_ICON8() {
        return (int)8388608L;
    }
    public static int PRINTER_ENUM_HIDE() {
        return (int)16777216L;
    }
    public static int PRINTER_ENUM_CATEGORY_ALL() {
        return (int)33554432L;
    }
    public static int PRINTER_ENUM_CATEGORY_3D() {
        return (int)67108864L;
    }
    public static int SPOOL_FILE_PERSISTENT() {
        return (int)1L;
    }
    public static int SPOOL_FILE_TEMPORARY() {
        return (int)2L;
    }
    public static int PRINTER_NOTIFY_TYPE() {
        return (int)0L;
    }
    public static int JOB_NOTIFY_TYPE() {
        return (int)1L;
    }
    public static int SERVER_NOTIFY_TYPE() {
        return (int)2L;
    }
    public static int PRINTER_NOTIFY_FIELD_SERVER_NAME() {
        return (int)0L;
    }
    public static int PRINTER_NOTIFY_FIELD_PRINTER_NAME() {
        return (int)1L;
    }
    public static int PRINTER_NOTIFY_FIELD_SHARE_NAME() {
        return (int)2L;
    }
    public static int PRINTER_NOTIFY_FIELD_PORT_NAME() {
        return (int)3L;
    }
    public static int PRINTER_NOTIFY_FIELD_DRIVER_NAME() {
        return (int)4L;
    }
    public static int PRINTER_NOTIFY_FIELD_COMMENT() {
        return (int)5L;
    }
    public static int PRINTER_NOTIFY_FIELD_LOCATION() {
        return (int)6L;
    }
    public static int PRINTER_NOTIFY_FIELD_DEVMODE() {
        return (int)7L;
    }
    public static int PRINTER_NOTIFY_FIELD_SEPFILE() {
        return (int)8L;
    }
    public static int PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR() {
        return (int)9L;
    }
    public static int PRINTER_NOTIFY_FIELD_PARAMETERS() {
        return (int)10L;
    }
    public static int PRINTER_NOTIFY_FIELD_DATATYPE() {
        return (int)11L;
    }
    public static int PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR() {
        return (int)12L;
    }
    public static int PRINTER_NOTIFY_FIELD_ATTRIBUTES() {
        return (int)13L;
    }
    public static int PRINTER_NOTIFY_FIELD_PRIORITY() {
        return (int)14L;
    }
    public static int PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY() {
        return (int)15L;
    }
    public static int PRINTER_NOTIFY_FIELD_START_TIME() {
        return (int)16L;
    }
    public static int PRINTER_NOTIFY_FIELD_UNTIL_TIME() {
        return (int)17L;
    }
    public static int PRINTER_NOTIFY_FIELD_STATUS() {
        return (int)18L;
    }
    public static int PRINTER_NOTIFY_FIELD_STATUS_STRING() {
        return (int)19L;
    }
    public static int PRINTER_NOTIFY_FIELD_CJOBS() {
        return (int)20L;
    }
    public static int PRINTER_NOTIFY_FIELD_AVERAGE_PPM() {
        return (int)21L;
    }
    public static int PRINTER_NOTIFY_FIELD_TOTAL_PAGES() {
        return (int)22L;
    }
    public static int PRINTER_NOTIFY_FIELD_PAGES_PRINTED() {
        return (int)23L;
    }
    public static int PRINTER_NOTIFY_FIELD_TOTAL_BYTES() {
        return (int)24L;
    }
    public static int PRINTER_NOTIFY_FIELD_BYTES_PRINTED() {
        return (int)25L;
    }
    public static int PRINTER_NOTIFY_FIELD_OBJECT_GUID() {
        return (int)26L;
    }
    public static int PRINTER_NOTIFY_FIELD_FRIENDLY_NAME() {
        return (int)27L;
    }
    public static int PRINTER_NOTIFY_FIELD_BRANCH_OFFICE_PRINTING() {
        return (int)28L;
    }
    public static int JOB_NOTIFY_FIELD_PRINTER_NAME() {
        return (int)0L;
    }
    public static int JOB_NOTIFY_FIELD_MACHINE_NAME() {
        return (int)1L;
    }
    public static int JOB_NOTIFY_FIELD_PORT_NAME() {
        return (int)2L;
    }
    public static int JOB_NOTIFY_FIELD_USER_NAME() {
        return (int)3L;
    }
    public static int JOB_NOTIFY_FIELD_NOTIFY_NAME() {
        return (int)4L;
    }
    public static int JOB_NOTIFY_FIELD_DATATYPE() {
        return (int)5L;
    }
    public static int JOB_NOTIFY_FIELD_PRINT_PROCESSOR() {
        return (int)6L;
    }
    public static int JOB_NOTIFY_FIELD_PARAMETERS() {
        return (int)7L;
    }
    public static int JOB_NOTIFY_FIELD_DRIVER_NAME() {
        return (int)8L;
    }
    public static int JOB_NOTIFY_FIELD_DEVMODE() {
        return (int)9L;
    }
    public static int JOB_NOTIFY_FIELD_STATUS() {
        return (int)10L;
    }
    public static int JOB_NOTIFY_FIELD_STATUS_STRING() {
        return (int)11L;
    }
    public static int JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR() {
        return (int)12L;
    }
    public static int JOB_NOTIFY_FIELD_DOCUMENT() {
        return (int)13L;
    }
    public static int JOB_NOTIFY_FIELD_PRIORITY() {
        return (int)14L;
    }
    public static int JOB_NOTIFY_FIELD_POSITION() {
        return (int)15L;
    }
    public static int JOB_NOTIFY_FIELD_SUBMITTED() {
        return (int)16L;
    }
    public static int JOB_NOTIFY_FIELD_START_TIME() {
        return (int)17L;
    }
    public static int JOB_NOTIFY_FIELD_UNTIL_TIME() {
        return (int)18L;
    }
    public static int JOB_NOTIFY_FIELD_TIME() {
        return (int)19L;
    }
    public static int JOB_NOTIFY_FIELD_TOTAL_PAGES() {
        return (int)20L;
    }
    public static int JOB_NOTIFY_FIELD_PAGES_PRINTED() {
        return (int)21L;
    }
    public static int JOB_NOTIFY_FIELD_TOTAL_BYTES() {
        return (int)22L;
    }
    public static int JOB_NOTIFY_FIELD_BYTES_PRINTED() {
        return (int)23L;
    }
    public static int JOB_NOTIFY_FIELD_REMOTE_JOB_ID() {
        return (int)24L;
    }
    public static int SERVER_NOTIFY_FIELD_PRINT_DRIVER_ISOLATION_GROUP() {
        return (int)0L;
    }
    public static int PRINTER_NOTIFY_CATEGORY_ALL() {
        return (int)4096L;
    }
    public static int PRINTER_NOTIFY_CATEGORY_3D() {
        return (int)8192L;
    }
    public static int PRINTER_NOTIFY_OPTIONS_REFRESH() {
        return (int)1L;
    }
    public static int PRINTER_NOTIFY_INFO_DISCARDED() {
        return (int)1L;
    }
    public static int BIDI_ACCESS_ADMINISTRATOR() {
        return (int)1L;
    }
    public static int BIDI_ACCESS_USER() {
        return (int)2L;
    }
    public static int ERROR_BIDI_STATUS_OK() {
        return (int)0L;
    }
    public static int ERROR_BIDI_ERROR_BASE() {
        return (int)13000L;
    }
    public static int PRINTER_CHANGE_ADD_PRINTER() {
        return (int)1L;
    }
    public static int PRINTER_CHANGE_SET_PRINTER() {
        return (int)2L;
    }
    public static int PRINTER_CHANGE_DELETE_PRINTER() {
        return (int)4L;
    }
    public static int PRINTER_CHANGE_FAILED_CONNECTION_PRINTER() {
        return (int)8L;
    }
    public static int PRINTER_CHANGE_PRINTER() {
        return (int)255L;
    }
    public static int PRINTER_CHANGE_ADD_JOB() {
        return (int)256L;
    }
    public static int PRINTER_CHANGE_SET_JOB() {
        return (int)512L;
    }
    public static int PRINTER_CHANGE_DELETE_JOB() {
        return (int)1024L;
    }
    public static int PRINTER_CHANGE_WRITE_JOB() {
        return (int)2048L;
    }
    public static int PRINTER_CHANGE_JOB() {
        return (int)65280L;
    }
    public static int PRINTER_CHANGE_ADD_FORM() {
        return (int)65536L;
    }
    public static int PRINTER_CHANGE_SET_FORM() {
        return (int)131072L;
    }
    public static int PRINTER_CHANGE_DELETE_FORM() {
        return (int)262144L;
    }
    public static int PRINTER_CHANGE_FORM() {
        return (int)458752L;
    }
    public static int PRINTER_CHANGE_ADD_PORT() {
        return (int)1048576L;
    }
    public static int PRINTER_CHANGE_CONFIGURE_PORT() {
        return (int)2097152L;
    }
    public static int PRINTER_CHANGE_DELETE_PORT() {
        return (int)4194304L;
    }
    public static int PRINTER_CHANGE_PORT() {
        return (int)7340032L;
    }
    public static int PRINTER_CHANGE_ADD_PRINT_PROCESSOR() {
        return (int)16777216L;
    }
    public static int PRINTER_CHANGE_DELETE_PRINT_PROCESSOR() {
        return (int)67108864L;
    }
    public static int PRINTER_CHANGE_PRINT_PROCESSOR() {
        return (int)117440512L;
    }
    public static int PRINTER_CHANGE_SERVER() {
        return (int)134217728L;
    }
    public static int PRINTER_CHANGE_ADD_PRINTER_DRIVER() {
        return (int)268435456L;
    }
    public static int PRINTER_CHANGE_SET_PRINTER_DRIVER() {
        return (int)536870912L;
    }
    public static int PRINTER_CHANGE_DELETE_PRINTER_DRIVER() {
        return (int)1073741824L;
    }
    public static int PRINTER_CHANGE_PRINTER_DRIVER() {
        return (int)1879048192L;
    }
    public static int PRINTER_CHANGE_ALL() {
        return (int)2138570751L;
    }
    public static int PRINTER_ERROR_WARNING() {
        return (int)1073741824L;
    }
    public static int PRINTER_ERROR_SEVERE() {
        return (int)536870912L;
    }
    public static int PRINTER_ERROR_OUTOFPAPER() {
        return (int)1L;
    }
    public static int PRINTER_ERROR_JAM() {
        return (int)2L;
    }
    public static int PRINTER_ERROR_OUTOFTONER() {
        return (int)4L;
    }
    public static int SERVER_ACCESS_ADMINISTER() {
        return (int)1L;
    }
    public static int SERVER_ACCESS_ENUMERATE() {
        return (int)2L;
    }
    public static int PRINTER_ACCESS_ADMINISTER() {
        return (int)4L;
    }
    public static int PRINTER_ACCESS_USE() {
        return (int)8L;
    }
    public static int JOB_ACCESS_ADMINISTER() {
        return (int)16L;
    }
    public static int JOB_ACCESS_READ() {
        return (int)32L;
    }
    public static int PRINTER_ACCESS_MANAGE_LIMITED() {
        return (int)64L;
    }
    public static int PRINTER_CONNECTION_MISMATCH() {
        return (int)32L;
    }
    public static int PRINTER_CONNECTION_NO_UI() {
        return (int)64L;
    }
    public static int IPDFP_COPY_ALL_FILES() {
        return (int)1L;
    }
    public static int UPDP_SILENT_UPLOAD() {
        return (int)1L;
    }
    public static int UPDP_UPLOAD_ALWAYS() {
        return (int)2L;
    }
    public static int UPDP_CHECK_DRIVERSTORE() {
        return (int)4L;
    }
    public static int SERVICE_ACTIVE() {
        return (int)1L;
    }
    public static int SERVICE_INACTIVE() {
        return (int)2L;
    }
    public static int SERVICE_CONTROL_STOP() {
        return (int)1L;
    }
    public static int SERVICE_CONTROL_PAUSE() {
        return (int)2L;
    }
    public static int SERVICE_CONTROL_CONTINUE() {
        return (int)3L;
    }
    public static int SERVICE_CONTROL_INTERROGATE() {
        return (int)4L;
    }
    public static int SERVICE_CONTROL_SHUTDOWN() {
        return (int)5L;
    }
    public static int SERVICE_CONTROL_PARAMCHANGE() {
        return (int)6L;
    }
    public static int SERVICE_CONTROL_NETBINDADD() {
        return (int)7L;
    }
    public static int SERVICE_CONTROL_NETBINDREMOVE() {
        return (int)8L;
    }
    public static int SERVICE_CONTROL_NETBINDENABLE() {
        return (int)9L;
    }
    public static int SERVICE_CONTROL_NETBINDDISABLE() {
        return (int)10L;
    }
    public static int SERVICE_CONTROL_DEVICEEVENT() {
        return (int)11L;
    }
    public static int SERVICE_CONTROL_HARDWAREPROFILECHANGE() {
        return (int)12L;
    }
    public static int SERVICE_CONTROL_POWEREVENT() {
        return (int)13L;
    }
    public static int SERVICE_CONTROL_SESSIONCHANGE() {
        return (int)14L;
    }
    public static int SERVICE_CONTROL_PRESHUTDOWN() {
        return (int)15L;
    }
    public static int SERVICE_CONTROL_TIMECHANGE() {
        return (int)16L;
    }
    public static int SERVICE_CONTROL_TRIGGEREVENT() {
        return (int)32L;
    }
    public static int SERVICE_CONTROL_LOWRESOURCES() {
        return (int)96L;
    }
    public static int SERVICE_CONTROL_SYSTEMLOWRESOURCES() {
        return (int)97L;
    }
    public static int SERVICE_STOPPED() {
        return (int)1L;
    }
    public static int SERVICE_START_PENDING() {
        return (int)2L;
    }
    public static int SERVICE_STOP_PENDING() {
        return (int)3L;
    }
    public static int SERVICE_RUNNING() {
        return (int)4L;
    }
    public static int SERVICE_CONTINUE_PENDING() {
        return (int)5L;
    }
    public static int SERVICE_PAUSE_PENDING() {
        return (int)6L;
    }
    public static int SERVICE_PAUSED() {
        return (int)7L;
    }
    public static int SERVICE_ACCEPT_STOP() {
        return (int)1L;
    }
    public static int SERVICE_ACCEPT_PAUSE_CONTINUE() {
        return (int)2L;
    }
    public static int SERVICE_ACCEPT_SHUTDOWN() {
        return (int)4L;
    }
    public static int SERVICE_ACCEPT_PARAMCHANGE() {
        return (int)8L;
    }
    public static int SERVICE_ACCEPT_NETBINDCHANGE() {
        return (int)16L;
    }
    public static int SERVICE_ACCEPT_HARDWAREPROFILECHANGE() {
        return (int)32L;
    }
    public static int SERVICE_ACCEPT_POWEREVENT() {
        return (int)64L;
    }
    public static int SERVICE_ACCEPT_SESSIONCHANGE() {
        return (int)128L;
    }
    public static int SERVICE_ACCEPT_PRESHUTDOWN() {
        return (int)256L;
    }
    public static int SERVICE_ACCEPT_TIMECHANGE() {
        return (int)512L;
    }
    public static int SERVICE_ACCEPT_TRIGGEREVENT() {
        return (int)1024L;
    }
    public static int SERVICE_ACCEPT_USER_LOGOFF() {
        return (int)2048L;
    }
    public static int SERVICE_ACCEPT_LOWRESOURCES() {
        return (int)8192L;
    }
    public static int SERVICE_ACCEPT_SYSTEMLOWRESOURCES() {
        return (int)16384L;
    }
    public static int SC_MANAGER_CONNECT() {
        return (int)1L;
    }
    public static int SC_MANAGER_CREATE_SERVICE() {
        return (int)2L;
    }
    public static int SC_MANAGER_ENUMERATE_SERVICE() {
        return (int)4L;
    }
    public static int SC_MANAGER_LOCK() {
        return (int)8L;
    }
    public static int SC_MANAGER_QUERY_LOCK_STATUS() {
        return (int)16L;
    }
    public static int SC_MANAGER_MODIFY_BOOT_CONFIG() {
        return (int)32L;
    }
    public static int SERVICE_QUERY_CONFIG() {
        return (int)1L;
    }
    public static int SERVICE_CHANGE_CONFIG() {
        return (int)2L;
    }
    public static int SERVICE_QUERY_STATUS() {
        return (int)4L;
    }
    public static int SERVICE_ENUMERATE_DEPENDENTS() {
        return (int)8L;
    }
    public static int SERVICE_START() {
        return (int)16L;
    }
    public static int SERVICE_STOP() {
        return (int)32L;
    }
    public static int SERVICE_PAUSE_CONTINUE() {
        return (int)64L;
    }
    public static int SERVICE_INTERROGATE() {
        return (int)128L;
    }
    public static int SERVICE_USER_DEFINED_CONTROL() {
        return (int)256L;
    }
    public static int SERVICE_RUNS_IN_SYSTEM_PROCESS() {
        return (int)1L;
    }
    public static int SERVICE_CONFIG_DESCRIPTION() {
        return (int)1L;
    }
    public static int SERVICE_CONFIG_FAILURE_ACTIONS() {
        return (int)2L;
    }
    public static int SERVICE_CONFIG_DELAYED_AUTO_START_INFO() {
        return (int)3L;
    }
    public static int SERVICE_CONFIG_FAILURE_ACTIONS_FLAG() {
        return (int)4L;
    }
    public static int SERVICE_CONFIG_SERVICE_SID_INFO() {
        return (int)5L;
    }
    public static int SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO() {
        return (int)6L;
    }
    public static int SERVICE_CONFIG_PRESHUTDOWN_INFO() {
        return (int)7L;
    }
    public static int SERVICE_CONFIG_TRIGGER_INFO() {
        return (int)8L;
    }
    public static int SERVICE_CONFIG_PREFERRED_NODE() {
        return (int)9L;
    }
    public static int SERVICE_CONFIG_LAUNCH_PROTECTED() {
        return (int)12L;
    }
    public static int SERVICE_NOTIFY_STATUS_CHANGE_1() {
        return (int)1L;
    }
    public static int SERVICE_NOTIFY_STATUS_CHANGE_2() {
        return (int)2L;
    }
    public static int SERVICE_NOTIFY_STOPPED() {
        return (int)1L;
    }
    public static int SERVICE_NOTIFY_START_PENDING() {
        return (int)2L;
    }
    public static int SERVICE_NOTIFY_STOP_PENDING() {
        return (int)4L;
    }
    public static int SERVICE_NOTIFY_RUNNING() {
        return (int)8L;
    }
    public static int SERVICE_NOTIFY_CONTINUE_PENDING() {
        return (int)16L;
    }
    public static int SERVICE_NOTIFY_PAUSE_PENDING() {
        return (int)32L;
    }
    public static int SERVICE_NOTIFY_PAUSED() {
        return (int)64L;
    }
    public static int SERVICE_NOTIFY_CREATED() {
        return (int)128L;
    }
    public static int SERVICE_NOTIFY_DELETED() {
        return (int)256L;
    }
    public static int SERVICE_NOTIFY_DELETE_PENDING() {
        return (int)512L;
    }
    public static int SERVICE_STOP_REASON_FLAG_MIN() {
        return (int)0L;
    }
    public static int SERVICE_STOP_REASON_FLAG_UNPLANNED() {
        return (int)268435456L;
    }
    public static int SERVICE_STOP_REASON_FLAG_CUSTOM() {
        return (int)536870912L;
    }
    public static int SERVICE_STOP_REASON_FLAG_PLANNED() {
        return (int)1073741824L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_MIN() {
        return (int)0L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_OTHER() {
        return (int)65536L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_HARDWARE() {
        return (int)131072L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM() {
        return (int)196608L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_SOFTWARE() {
        return (int)262144L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_APPLICATION() {
        return (int)327680L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_NONE() {
        return (int)393216L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_MAX() {
        return (int)458752L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM() {
        return (int)4194304L;
    }
    public static int SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM() {
        return (int)16711680L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MIN() {
        return (int)0L;
    }
    public static int SERVICE_STOP_REASON_MINOR_OTHER() {
        return (int)1L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MAINTENANCE() {
        return (int)2L;
    }
    public static int SERVICE_STOP_REASON_MINOR_INSTALLATION() {
        return (int)3L;
    }
    public static int SERVICE_STOP_REASON_MINOR_UPGRADE() {
        return (int)4L;
    }
    public static int SERVICE_STOP_REASON_MINOR_RECONFIG() {
        return (int)5L;
    }
    public static int SERVICE_STOP_REASON_MINOR_HUNG() {
        return (int)6L;
    }
    public static int SERVICE_STOP_REASON_MINOR_UNSTABLE() {
        return (int)7L;
    }
    public static int SERVICE_STOP_REASON_MINOR_DISK() {
        return (int)8L;
    }
    public static int SERVICE_STOP_REASON_MINOR_NETWORKCARD() {
        return (int)9L;
    }
    public static int SERVICE_STOP_REASON_MINOR_ENVIRONMENT() {
        return (int)10L;
    }
    public static int SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER() {
        return (int)11L;
    }
    public static int SERVICE_STOP_REASON_MINOR_OTHERDRIVER() {
        return (int)12L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SERVICEPACK() {
        return (int)13L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE() {
        return (int)14L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SECURITYFIX() {
        return (int)15L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SECURITY() {
        return (int)16L;
    }
    public static int SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY() {
        return (int)17L;
    }
    public static int SERVICE_STOP_REASON_MINOR_WMI() {
        return (int)18L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL() {
        return (int)19L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL() {
        return (int)20L;
    }
    public static int SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL() {
        return (int)21L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MMC() {
        return (int)22L;
    }
    public static int SERVICE_STOP_REASON_MINOR_NONE() {
        return (int)23L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT() {
        return (int)24L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MAX() {
        return (int)25L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MIN_CUSTOM() {
        return (int)256L;
    }
    public static int SERVICE_STOP_REASON_MINOR_MAX_CUSTOM() {
        return (int)65535L;
    }
    public static int SERVICE_CONTROL_STATUS_REASON_INFO() {
        return (int)1L;
    }
    public static int SERVICE_SID_TYPE_NONE() {
        return (int)0L;
    }
    public static int SERVICE_SID_TYPE_UNRESTRICTED() {
        return (int)1L;
    }
    public static int SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL() {
        return (int)1L;
    }
    public static int SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY() {
        return (int)2L;
    }
    public static int SERVICE_TRIGGER_TYPE_DOMAIN_JOIN() {
        return (int)3L;
    }
    public static int SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT() {
        return (int)4L;
    }
    public static int SERVICE_TRIGGER_TYPE_GROUP_POLICY() {
        return (int)5L;
    }
    public static int SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT() {
        return (int)6L;
    }
    public static int SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE() {
        return (int)7L;
    }
    public static int SERVICE_TRIGGER_TYPE_CUSTOM() {
        return (int)20L;
    }
    public static int SERVICE_TRIGGER_TYPE_AGGREGATE() {
        return (int)30L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_BINARY() {
        return (int)1L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_STRING() {
        return (int)2L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_LEVEL() {
        return (int)3L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY() {
        return (int)4L;
    }
    public static int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL() {
        return (int)5L;
    }
    public static int SERVICE_START_REASON_DEMAND() {
        return (int)1L;
    }
    public static int SERVICE_START_REASON_AUTO() {
        return (int)2L;
    }
    public static int SERVICE_START_REASON_TRIGGER() {
        return (int)4L;
    }
    public static int SERVICE_START_REASON_RESTART_ON_FAILURE() {
        return (int)8L;
    }
    public static int SERVICE_START_REASON_DELAYEDAUTO() {
        return (int)16L;
    }
    public static int SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON() {
        return (int)1L;
    }
    public static int SERVICE_LAUNCH_PROTECTED_NONE() {
        return (int)0L;
    }
    public static int SERVICE_LAUNCH_PROTECTED_WINDOWS() {
        return (int)1L;
    }
    public static int SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT() {
        return (int)2L;
    }
    public static int SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT() {
        return (int)3L;
    }
    public static int SERVICE_TRIGGER_ACTION_SERVICE_START() {
        return (int)1L;
    }
    public static int SERVICE_TRIGGER_ACTION_SERVICE_STOP() {
        return (int)2L;
    }
    public static OfAddress PULONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSHORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSZ = Constants$root.C_POINTER$LAYOUT;
    public static OfInt BOOL = Constants$root.C_LONG$LAYOUT;
    public static OfFloat FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfAddress PFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBOOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBOOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfInt INT = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PUINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOID64 = Constants$root.C_POINTER$LAYOUT;
    public static OfByte CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt LONG = Constants$root.C_LONG$LAYOUT;
    public static OfInt INT$0 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NWPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZCH = Constants$root.C_POINTER$LAYOUT;
    public static OfByte TCHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress PTCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_AFFINITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HRESULT = Constants$root.C_LONG$LAYOUT;
    public static OfByte CCHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress PLCID = Constants$root.C_POINTER$LAYOUT;
    public static int UNSPECIFIED_COMPARTMENT_ID() {
        return (int)0L;
    }
    public static int DEFAULT_COMPARTMENT_ID() {
        return (int)1L;
    }
    public static OfAddress PCOMPARTMENT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFLOAT128 = Constants$root.C_POINTER$LAYOUT;
    public static OfLong LONGLONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLONGLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONGLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfLong USN = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    public static OfLong RTL_REFERENCE_COUNT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PRTL_REFERENCE_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfInt RTL_REFERENCE_COUNT32 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PRTL_REFERENCE_COUNT32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORDLONG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _rotl8$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotl8$MH,"_rotl8");
    }
    public static byte _rotl8 ( byte Value,  byte Shift) {
        var mh$ = _rotl8$MH();
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl16$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotl16$MH,"_rotl16");
    }
    public static short _rotl16 ( short Value,  byte Shift) {
        var mh$ = _rotl16$MH();
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr8$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotr8$MH,"_rotr8");
    }
    public static byte _rotr8 ( byte Value,  byte Shift) {
        var mh$ = _rotr8$MH();
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr16$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotr16$MH,"_rotr16");
    }
    public static short _rotr16 ( short Value,  byte Shift) {
        var mh$ = _rotr16$MH();
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotl$MH,"_rotl");
    }
    public static int _rotl ( int Value,  int Shift) {
        var mh$ = _rotl$MH();
        try {
            return (int)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl64$MH() {
        return RuntimeHelper.requireNonNull(constants$0._rotl64$MH,"_rotl64");
    }
    public static long _rotl64 ( long Value,  int Shift) {
        var mh$ = _rotl64$MH();
        try {
            return (long)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr$MH() {
        return RuntimeHelper.requireNonNull(constants$1._rotr$MH,"_rotr");
    }
    public static int _rotr ( int Value,  int Shift) {
        var mh$ = _rotr$MH();
        try {
            return (int)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr64$MH() {
        return RuntimeHelper.requireNonNull(constants$1._rotr64$MH,"_rotr64");
    }
    public static long _rotr64 ( long Value,  int Shift) {
        var mh$ = _rotr64$MH();
        try {
            return (long)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBOOLEAN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSINGLE_LIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKSPIN_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PM128A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_CET_U_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_AREA_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSTATE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_AMD64 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _bittest$MH() {
        return RuntimeHelper.requireNonNull(constants$2._bittest$MH,"_bittest");
    }
    public static byte _bittest ( Addressable Base,  int Offset) {
        var mh$ = _bittest$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement$MH() {
        return RuntimeHelper.requireNonNull(constants$2._bittestandcomplement$MH,"_bittestandcomplement");
    }
    public static byte _bittestandcomplement ( Addressable Base,  int Offset) {
        var mh$ = _bittestandcomplement$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$2._bittestandset$MH,"_bittestandset");
    }
    public static byte _bittestandset ( Addressable Base,  int Offset) {
        var mh$ = _bittestandset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$2._bittestandreset$MH,"_bittestandreset");
    }
    public static byte _bittestandreset ( Addressable Base,  int Offset) {
        var mh$ = _bittestandreset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$2._interlockedbittestandset$MH,"_interlockedbittestandset");
    }
    public static byte _interlockedbittestandset ( Addressable Base,  int Offset) {
        var mh$ = _interlockedbittestandset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$2._interlockedbittestandreset$MH,"_interlockedbittestandreset");
    }
    public static byte _interlockedbittestandreset ( Addressable Base,  int Offset) {
        var mh$ = _interlockedbittestandreset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittest64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._bittest64$MH,"_bittest64");
    }
    public static byte _bittest64 ( Addressable Base,  long Offset) {
        var mh$ = _bittest64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._bittestandcomplement64$MH,"_bittestandcomplement64");
    }
    public static byte _bittestandcomplement64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandcomplement64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._bittestandset64$MH,"_bittestandset64");
    }
    public static byte _bittestandset64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._bittestandreset64$MH,"_bittestandreset64");
    }
    public static byte _bittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._interlockedbittestandset64$MH,"_interlockedbittestandset64");
    }
    public static byte _interlockedbittestandset64 ( Addressable Base,  long Offset) {
        var mh$ = _interlockedbittestandset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$3._interlockedbittestandreset64$MH,"_interlockedbittestandreset64");
    }
    public static byte _interlockedbittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = _interlockedbittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_clflush$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_clflush$MH,"_mm_clflush");
    }
    public static void _mm_clflush ( Addressable Address) {
        var mh$ = _mm_clflush$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_lfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_lfence$MH,"_mm_lfence");
    }
    public static void _mm_lfence () {
        var mh$ = _mm_lfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_mfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_mfence$MH,"_mm_mfence");
    }
    public static void _mm_mfence () {
        var mh$ = _mm_mfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_sfence$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_sfence$MH,"_mm_sfence");
    }
    public static void _mm_sfence () {
        var mh$ = _mm_sfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_pause$MH,"_mm_pause");
    }
    public static void _mm_pause () {
        var mh$ = _mm_pause$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_prefetch$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mm_prefetch$MH,"_mm_prefetch");
    }
    public static void _mm_prefetch ( Addressable a,  int sel) {
        var mh$ = _mm_prefetch$MH();
        try {
            mh$.invokeExact(a, sel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _m_prefetchw$MH() {
        return RuntimeHelper.requireNonNull(constants$5._m_prefetchw$MH,"_m_prefetchw");
    }
    public static void _m_prefetchw ( Addressable Source) {
        var mh$ = _m_prefetchw$MH();
        try {
            mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_getcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$5._mm_getcsr$MH,"_mm_getcsr");
    }
    public static int _mm_getcsr () {
        var mh$ = _mm_getcsr$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_setcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$5._mm_setcsr$MH,"_mm_setcsr");
    }
    public static void _mm_setcsr ( int MxCsr) {
        var mh$ = _mm_setcsr$MH();
        try {
            mh$.invokeExact(MxCsr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mul128$MH() {
        return RuntimeHelper.requireNonNull(constants$5._mul128$MH,"_mul128");
    }
    public static long _mul128 ( long Multiplier,  long Multiplicand,  Addressable HighProduct) {
        var mh$ = _mul128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _umul128$MH() {
        return RuntimeHelper.requireNonNull(constants$5._umul128$MH,"_umul128");
    }
    public static long _umul128 ( long Multiplier,  long Multiplicand,  Addressable HighProduct) {
        var mh$ = _umul128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultiplyExtract128$MH() {
        return RuntimeHelper.requireNonNull(constants$5.MultiplyExtract128$MH,"MultiplyExtract128");
    }
    public static long MultiplyExtract128 ( long Multiplier,  long Multiplicand,  byte Shift) {
        var mh$ = MultiplyExtract128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsignedMultiplyExtract128$MH() {
        return RuntimeHelper.requireNonNull(constants$6.UnsignedMultiplyExtract128$MH,"UnsignedMultiplyExtract128");
    }
    public static long UnsignedMultiplyExtract128 ( long Multiplier,  long Multiplicand,  byte Shift) {
        var mh$ = UnsignedMultiplyExtract128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PXMM_SAVE_AREA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRUNTIME_FUNCTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNWIND_HISTORY_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNWIND_HISTORY_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPATCHER_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKNONVOLATILE_CONTEXT_POINTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_ARM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_ARM64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLDT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ReadAcquire8$MH() {
        return RuntimeHelper.requireNonNull(constants$8.ReadAcquire8$MH,"ReadAcquire8");
    }
    public static byte ReadAcquire8 ( Addressable Source) {
        var mh$ = ReadAcquire8$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence8$MH() {
        return RuntimeHelper.requireNonNull(constants$8.ReadNoFence8$MH,"ReadNoFence8");
    }
    public static byte ReadNoFence8 ( Addressable Source) {
        var mh$ = ReadNoFence8$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease8$MH() {
        return RuntimeHelper.requireNonNull(constants$8.WriteRelease8$MH,"WriteRelease8");
    }
    public static void WriteRelease8 ( Addressable Destination,  byte Value) {
        var mh$ = WriteRelease8$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence8$MH() {
        return RuntimeHelper.requireNonNull(constants$8.WriteNoFence8$MH,"WriteNoFence8");
    }
    public static void WriteNoFence8 ( Addressable Destination,  byte Value) {
        var mh$ = WriteNoFence8$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire16$MH() {
        return RuntimeHelper.requireNonNull(constants$8.ReadAcquire16$MH,"ReadAcquire16");
    }
    public static short ReadAcquire16 ( Addressable Source) {
        var mh$ = ReadAcquire16$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence16$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ReadNoFence16$MH,"ReadNoFence16");
    }
    public static short ReadNoFence16 ( Addressable Source) {
        var mh$ = ReadNoFence16$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease16$MH() {
        return RuntimeHelper.requireNonNull(constants$9.WriteRelease16$MH,"WriteRelease16");
    }
    public static void WriteRelease16 ( Addressable Destination,  short Value) {
        var mh$ = WriteRelease16$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence16$MH() {
        return RuntimeHelper.requireNonNull(constants$9.WriteNoFence16$MH,"WriteNoFence16");
    }
    public static void WriteNoFence16 ( Addressable Destination,  short Value) {
        var mh$ = WriteNoFence16$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ReadAcquire$MH,"ReadAcquire");
    }
    public static int ReadAcquire ( Addressable Source) {
        var mh$ = ReadAcquire$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ReadNoFence$MH,"ReadNoFence");
    }
    public static int ReadNoFence ( Addressable Source) {
        var mh$ = ReadNoFence$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$9.WriteRelease$MH,"WriteRelease");
    }
    public static void WriteRelease ( Addressable Destination,  int Value) {
        var mh$ = WriteRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$10.WriteNoFence$MH,"WriteNoFence");
    }
    public static void WriteNoFence ( Addressable Destination,  int Value) {
        var mh$ = WriteNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire64$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ReadAcquire64$MH,"ReadAcquire64");
    }
    public static long ReadAcquire64 ( Addressable Source) {
        var mh$ = ReadAcquire64$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence64$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ReadNoFence64$MH,"ReadNoFence64");
    }
    public static long ReadNoFence64 ( Addressable Source) {
        var mh$ = ReadNoFence64$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease64$MH() {
        return RuntimeHelper.requireNonNull(constants$10.WriteRelease64$MH,"WriteRelease64");
    }
    public static void WriteRelease64 ( Addressable Destination,  long Value) {
        var mh$ = WriteRelease64$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence64$MH() {
        return RuntimeHelper.requireNonNull(constants$10.WriteNoFence64$MH,"WriteNoFence64");
    }
    public static void WriteNoFence64 ( Addressable Destination,  long Value) {
        var mh$ = WriteNoFence64$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw8$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ReadRaw8$MH,"ReadRaw8");
    }
    public static byte ReadRaw8 ( Addressable Source) {
        var mh$ = ReadRaw8$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw8$MH() {
        return RuntimeHelper.requireNonNull(constants$11.WriteRaw8$MH,"WriteRaw8");
    }
    public static void WriteRaw8 ( Addressable Destination,  byte Value) {
        var mh$ = WriteRaw8$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw16$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ReadRaw16$MH,"ReadRaw16");
    }
    public static short ReadRaw16 ( Addressable Source) {
        var mh$ = ReadRaw16$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw16$MH() {
        return RuntimeHelper.requireNonNull(constants$11.WriteRaw16$MH,"WriteRaw16");
    }
    public static void WriteRaw16 ( Addressable Destination,  short Value) {
        var mh$ = WriteRaw16$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ReadRaw$MH,"ReadRaw");
    }
    public static int ReadRaw ( Addressable Source) {
        var mh$ = ReadRaw$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$11.WriteRaw$MH,"WriteRaw");
    }
    public static void WriteRaw ( Addressable Destination,  int Value) {
        var mh$ = WriteRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw64$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ReadRaw64$MH,"ReadRaw64");
    }
    public static long ReadRaw64 ( Addressable Source) {
        var mh$ = ReadRaw64$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw64$MH() {
        return RuntimeHelper.requireNonNull(constants$12.WriteRaw64$MH,"WriteRaw64");
    }
    public static void WriteRaw64 ( Addressable Destination,  long Value) {
        var mh$ = WriteRaw64$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadUCharAcquire$MH,"ReadUCharAcquire");
    }
    public static byte ReadUCharAcquire ( Addressable Source) {
        var mh$ = ReadUCharAcquire$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadUCharNoFence$MH,"ReadUCharNoFence");
    }
    public static byte ReadUCharNoFence ( Addressable Source) {
        var mh$ = ReadUCharNoFence$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadBooleanAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadBooleanAcquire$MH,"ReadBooleanAcquire");
    }
    public static byte ReadBooleanAcquire ( Addressable Source) {
        var mh$ = ReadBooleanAcquire$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadBooleanNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadBooleanNoFence$MH,"ReadBooleanNoFence");
    }
    public static byte ReadBooleanNoFence ( Addressable Source) {
        var mh$ = ReadBooleanNoFence$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ReadUCharRaw$MH,"ReadUCharRaw");
    }
    public static byte ReadUCharRaw ( Addressable Source) {
        var mh$ = ReadUCharRaw$MH();
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteUCharRelease$MH,"WriteUCharRelease");
    }
    public static void WriteUCharRelease ( Addressable Destination,  byte Value) {
        var mh$ = WriteUCharRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteUCharNoFence$MH,"WriteUCharNoFence");
    }
    public static void WriteUCharNoFence ( Addressable Destination,  byte Value) {
        var mh$ = WriteUCharNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteBooleanRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteBooleanRelease$MH,"WriteBooleanRelease");
    }
    public static void WriteBooleanRelease ( Addressable Destination,  byte Value) {
        var mh$ = WriteBooleanRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteBooleanNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteBooleanNoFence$MH,"WriteBooleanNoFence");
    }
    public static void WriteBooleanNoFence ( Addressable Destination,  byte Value) {
        var mh$ = WriteBooleanNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$13.WriteUCharRaw$MH,"WriteUCharRaw");
    }
    public static void WriteUCharRaw ( Addressable Destination,  byte Value) {
        var mh$ = WriteUCharRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ReadUShortAcquire$MH,"ReadUShortAcquire");
    }
    public static short ReadUShortAcquire ( Addressable Source) {
        var mh$ = ReadUShortAcquire$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ReadUShortNoFence$MH,"ReadUShortNoFence");
    }
    public static short ReadUShortNoFence ( Addressable Source) {
        var mh$ = ReadUShortNoFence$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ReadUShortRaw$MH,"ReadUShortRaw");
    }
    public static short ReadUShortRaw ( Addressable Source) {
        var mh$ = ReadUShortRaw$MH();
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$14.WriteUShortRelease$MH,"WriteUShortRelease");
    }
    public static void WriteUShortRelease ( Addressable Destination,  short Value) {
        var mh$ = WriteUShortRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$14.WriteUShortNoFence$MH,"WriteUShortNoFence");
    }
    public static void WriteUShortNoFence ( Addressable Destination,  short Value) {
        var mh$ = WriteUShortNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$14.WriteUShortRaw$MH,"WriteUShortRaw");
    }
    public static void WriteUShortRaw ( Addressable Destination,  short Value) {
        var mh$ = WriteUShortRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ReadULongAcquire$MH,"ReadULongAcquire");
    }
    public static int ReadULongAcquire ( Addressable Source) {
        var mh$ = ReadULongAcquire$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ReadULongNoFence$MH,"ReadULongNoFence");
    }
    public static int ReadULongNoFence ( Addressable Source) {
        var mh$ = ReadULongNoFence$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ReadULongRaw$MH,"ReadULongRaw");
    }
    public static int ReadULongRaw ( Addressable Source) {
        var mh$ = ReadULongRaw$MH();
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$15.WriteULongRelease$MH,"WriteULongRelease");
    }
    public static void WriteULongRelease ( Addressable Destination,  int Value) {
        var mh$ = WriteULongRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$15.WriteULongNoFence$MH,"WriteULongNoFence");
    }
    public static void WriteULongNoFence ( Addressable Destination,  int Value) {
        var mh$ = WriteULongNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$15.WriteULongRaw$MH,"WriteULongRaw");
    }
    public static void WriteULongRaw ( Addressable Destination,  int Value) {
        var mh$ = WriteULongRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64Acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ReadULong64Acquire$MH,"ReadULong64Acquire");
    }
    public static long ReadULong64Acquire ( Addressable Source) {
        var mh$ = ReadULong64Acquire$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64NoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ReadULong64NoFence$MH,"ReadULong64NoFence");
    }
    public static long ReadULong64NoFence ( Addressable Source) {
        var mh$ = ReadULong64NoFence$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64Raw$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ReadULong64Raw$MH,"ReadULong64Raw");
    }
    public static long ReadULong64Raw ( Addressable Source) {
        var mh$ = ReadULong64Raw$MH();
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64Release$MH() {
        return RuntimeHelper.requireNonNull(constants$16.WriteULong64Release$MH,"WriteULong64Release");
    }
    public static void WriteULong64Release ( Addressable Destination,  long Value) {
        var mh$ = WriteULong64Release$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64NoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$16.WriteULong64NoFence$MH,"WriteULong64NoFence");
    }
    public static void WriteULong64NoFence ( Addressable Destination,  long Value) {
        var mh$ = WriteULong64NoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64Raw$MH() {
        return RuntimeHelper.requireNonNull(constants$16.WriteULong64Raw$MH,"WriteULong64Raw");
    }
    public static void WriteULong64Raw ( Addressable Destination,  long Value) {
        var mh$ = WriteULong64Raw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ReadPointerAcquire$MH,"ReadPointerAcquire");
    }
    public static MemoryAddress ReadPointerAcquire ( Addressable Source) {
        var mh$ = ReadPointerAcquire$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ReadPointerNoFence$MH,"ReadPointerNoFence");
    }
    public static MemoryAddress ReadPointerNoFence ( Addressable Source) {
        var mh$ = ReadPointerNoFence$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ReadPointerRaw$MH,"ReadPointerRaw");
    }
    public static MemoryAddress ReadPointerRaw ( Addressable Source) {
        var mh$ = ReadPointerRaw$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$17.WritePointerRelease$MH,"WritePointerRelease");
    }
    public static void WritePointerRelease ( Addressable Destination,  Addressable Value) {
        var mh$ = WritePointerRelease$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$17.WritePointerNoFence$MH,"WritePointerNoFence");
    }
    public static void WritePointerNoFence ( Addressable Destination,  Addressable Value) {
        var mh$ = WritePointerNoFence$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$17.WritePointerRaw$MH,"WritePointerRaw");
    }
    public static void WritePointerRaw ( Addressable Destination,  Addressable Value) {
        var mh$ = WritePointerRaw$MH();
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWOW64_FLOATING_SAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_LDT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_DESCRIPTOR_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_POINTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIMS_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_MASK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_MAPPING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID_AND_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID_AND_ATTRIBUTES_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_IDENTIFIER_AUTHORITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SID = Constants$root.C_POINTER$LAYOUT;
    public static int SidTypeUser() {
        return (int)1L;
    }
    public static int SidTypeGroup() {
        return (int)2L;
    }
    public static int SidTypeDomain() {
        return (int)3L;
    }
    public static int SidTypeAlias() {
        return (int)4L;
    }
    public static int SidTypeWellKnownGroup() {
        return (int)5L;
    }
    public static int SidTypeDeletedAccount() {
        return (int)6L;
    }
    public static int SidTypeInvalid() {
        return (int)7L;
    }
    public static int SidTypeUnknown() {
        return (int)8L;
    }
    public static int SidTypeComputer() {
        return (int)9L;
    }
    public static int SidTypeLabel() {
        return (int)10L;
    }
    public static int SidTypeLogonSession() {
        return (int)11L;
    }
    public static OfAddress PSID_NAME_USE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_HASH_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES_HASH = Constants$root.C_POINTER$LAYOUT;
    public static int WinNullSid() {
        return (int)0L;
    }
    public static int WinWorldSid() {
        return (int)1L;
    }
    public static int WinLocalSid() {
        return (int)2L;
    }
    public static int WinCreatorOwnerSid() {
        return (int)3L;
    }
    public static int WinCreatorGroupSid() {
        return (int)4L;
    }
    public static int WinCreatorOwnerServerSid() {
        return (int)5L;
    }
    public static int WinCreatorGroupServerSid() {
        return (int)6L;
    }
    public static int WinNtAuthoritySid() {
        return (int)7L;
    }
    public static int WinDialupSid() {
        return (int)8L;
    }
    public static int WinNetworkSid() {
        return (int)9L;
    }
    public static int WinBatchSid() {
        return (int)10L;
    }
    public static int WinInteractiveSid() {
        return (int)11L;
    }
    public static int WinServiceSid() {
        return (int)12L;
    }
    public static int WinAnonymousSid() {
        return (int)13L;
    }
    public static int WinProxySid() {
        return (int)14L;
    }
    public static int WinEnterpriseControllersSid() {
        return (int)15L;
    }
    public static int WinSelfSid() {
        return (int)16L;
    }
    public static int WinAuthenticatedUserSid() {
        return (int)17L;
    }
    public static int WinRestrictedCodeSid() {
        return (int)18L;
    }
    public static int WinTerminalServerSid() {
        return (int)19L;
    }
    public static int WinRemoteLogonIdSid() {
        return (int)20L;
    }
    public static int WinLogonIdsSid() {
        return (int)21L;
    }
    public static int WinLocalSystemSid() {
        return (int)22L;
    }
    public static int WinLocalServiceSid() {
        return (int)23L;
    }
    public static int WinNetworkServiceSid() {
        return (int)24L;
    }
    public static int WinBuiltinDomainSid() {
        return (int)25L;
    }
    public static int WinBuiltinAdministratorsSid() {
        return (int)26L;
    }
    public static int WinBuiltinUsersSid() {
        return (int)27L;
    }
    public static int WinBuiltinGuestsSid() {
        return (int)28L;
    }
    public static int WinBuiltinPowerUsersSid() {
        return (int)29L;
    }
    public static int WinBuiltinAccountOperatorsSid() {
        return (int)30L;
    }
    public static int WinBuiltinSystemOperatorsSid() {
        return (int)31L;
    }
    public static int WinBuiltinPrintOperatorsSid() {
        return (int)32L;
    }
    public static int WinBuiltinBackupOperatorsSid() {
        return (int)33L;
    }
    public static int WinBuiltinReplicatorSid() {
        return (int)34L;
    }
    public static int WinBuiltinPreWindows2000CompatibleAccessSid() {
        return (int)35L;
    }
    public static int WinBuiltinRemoteDesktopUsersSid() {
        return (int)36L;
    }
    public static int WinBuiltinNetworkConfigurationOperatorsSid() {
        return (int)37L;
    }
    public static int WinAccountAdministratorSid() {
        return (int)38L;
    }
    public static int WinAccountGuestSid() {
        return (int)39L;
    }
    public static int WinAccountKrbtgtSid() {
        return (int)40L;
    }
    public static int WinAccountDomainAdminsSid() {
        return (int)41L;
    }
    public static int WinAccountDomainUsersSid() {
        return (int)42L;
    }
    public static int WinAccountDomainGuestsSid() {
        return (int)43L;
    }
    public static int WinAccountComputersSid() {
        return (int)44L;
    }
    public static int WinAccountControllersSid() {
        return (int)45L;
    }
    public static int WinAccountCertAdminsSid() {
        return (int)46L;
    }
    public static int WinAccountSchemaAdminsSid() {
        return (int)47L;
    }
    public static int WinAccountEnterpriseAdminsSid() {
        return (int)48L;
    }
    public static int WinAccountPolicyAdminsSid() {
        return (int)49L;
    }
    public static int WinAccountRasAndIasServersSid() {
        return (int)50L;
    }
    public static int WinNTLMAuthenticationSid() {
        return (int)51L;
    }
    public static int WinDigestAuthenticationSid() {
        return (int)52L;
    }
    public static int WinSChannelAuthenticationSid() {
        return (int)53L;
    }
    public static int WinThisOrganizationSid() {
        return (int)54L;
    }
    public static int WinOtherOrganizationSid() {
        return (int)55L;
    }
    public static int WinBuiltinIncomingForestTrustBuildersSid() {
        return (int)56L;
    }
    public static int WinBuiltinPerfMonitoringUsersSid() {
        return (int)57L;
    }
    public static int WinBuiltinPerfLoggingUsersSid() {
        return (int)58L;
    }
    public static int WinBuiltinAuthorizationAccessSid() {
        return (int)59L;
    }
    public static int WinBuiltinTerminalServerLicenseServersSid() {
        return (int)60L;
    }
    public static int WinBuiltinDCOMUsersSid() {
        return (int)61L;
    }
    public static int WinBuiltinIUsersSid() {
        return (int)62L;
    }
    public static int WinIUserSid() {
        return (int)63L;
    }
    public static int WinBuiltinCryptoOperatorsSid() {
        return (int)64L;
    }
    public static int WinUntrustedLabelSid() {
        return (int)65L;
    }
    public static int WinLowLabelSid() {
        return (int)66L;
    }
    public static int WinMediumLabelSid() {
        return (int)67L;
    }
    public static int WinHighLabelSid() {
        return (int)68L;
    }
    public static int WinSystemLabelSid() {
        return (int)69L;
    }
    public static int WinWriteRestrictedCodeSid() {
        return (int)70L;
    }
    public static int WinCreatorOwnerRightsSid() {
        return (int)71L;
    }
    public static int WinCacheablePrincipalsGroupSid() {
        return (int)72L;
    }
    public static int WinNonCacheablePrincipalsGroupSid() {
        return (int)73L;
    }
    public static int WinEnterpriseReadonlyControllersSid() {
        return (int)74L;
    }
    public static int WinAccountReadonlyControllersSid() {
        return (int)75L;
    }
    public static int WinBuiltinEventLogReadersGroup() {
        return (int)76L;
    }
    public static int WinNewEnterpriseReadonlyControllersSid() {
        return (int)77L;
    }
    public static int WinBuiltinCertSvcDComAccessGroup() {
        return (int)78L;
    }
    public static int WinMediumPlusLabelSid() {
        return (int)79L;
    }
    public static int WinLocalLogonSid() {
        return (int)80L;
    }
    public static int WinConsoleLogonSid() {
        return (int)81L;
    }
    public static int WinThisOrganizationCertificateSid() {
        return (int)82L;
    }
    public static int WinApplicationPackageAuthoritySid() {
        return (int)83L;
    }
    public static int WinBuiltinAnyPackageSid() {
        return (int)84L;
    }
    public static int WinCapabilityInternetClientSid() {
        return (int)85L;
    }
    public static int WinCapabilityInternetClientServerSid() {
        return (int)86L;
    }
    public static int WinCapabilityPrivateNetworkClientServerSid() {
        return (int)87L;
    }
    public static int WinCapabilityPicturesLibrarySid() {
        return (int)88L;
    }
    public static int WinCapabilityVideosLibrarySid() {
        return (int)89L;
    }
    public static int WinCapabilityMusicLibrarySid() {
        return (int)90L;
    }
    public static int WinCapabilityDocumentsLibrarySid() {
        return (int)91L;
    }
    public static int WinCapabilitySharedUserCertificatesSid() {
        return (int)92L;
    }
    public static int WinCapabilityEnterpriseAuthenticationSid() {
        return (int)93L;
    }
    public static int WinCapabilityRemovableStorageSid() {
        return (int)94L;
    }
    public static int WinBuiltinRDSRemoteAccessServersSid() {
        return (int)95L;
    }
    public static int WinBuiltinRDSEndpointServersSid() {
        return (int)96L;
    }
    public static int WinBuiltinRDSManagementServersSid() {
        return (int)97L;
    }
    public static int WinUserModeDriversSid() {
        return (int)98L;
    }
    public static int WinBuiltinHyperVAdminsSid() {
        return (int)99L;
    }
    public static int WinAccountCloneableControllersSid() {
        return (int)100L;
    }
    public static int WinBuiltinAccessControlAssistanceOperatorsSid() {
        return (int)101L;
    }
    public static int WinBuiltinRemoteManagementUsersSid() {
        return (int)102L;
    }
    public static int WinAuthenticationAuthorityAssertedSid() {
        return (int)103L;
    }
    public static int WinAuthenticationServiceAssertedSid() {
        return (int)104L;
    }
    public static int WinLocalAccountSid() {
        return (int)105L;
    }
    public static int WinLocalAccountAndAdministratorSid() {
        return (int)106L;
    }
    public static int WinAccountProtectedUsersSid() {
        return (int)107L;
    }
    public static int WinCapabilityAppointmentsSid() {
        return (int)108L;
    }
    public static int WinCapabilityContactsSid() {
        return (int)109L;
    }
    public static int WinAccountDefaultSystemManagedSid() {
        return (int)110L;
    }
    public static int WinBuiltinDefaultSystemManagedGroupSid() {
        return (int)111L;
    }
    public static int WinBuiltinStorageReplicaAdminsSid() {
        return (int)112L;
    }
    public static int WinAccountKeyAdminsSid() {
        return (int)113L;
    }
    public static int WinAccountEnterpriseKeyAdminsSid() {
        return (int)114L;
    }
    public static int WinAuthenticationKeyTrustSid() {
        return (int)115L;
    }
    public static int WinAuthenticationKeyPropertyMFASid() {
        return (int)116L;
    }
    public static int WinAuthenticationKeyPropertyAttestationSid() {
        return (int)117L;
    }
    public static int WinAuthenticationFreshKeyAuthSid() {
        return (int)118L;
    }
    public static int WinBuiltinDeviceOwnersSid() {
        return (int)119L;
    }
    public static OfAddress PACL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACE_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_RESOURCE_ATTRIBUTE_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_SCOPED_POLICY_ID_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_MANDATORY_LABEL_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_PROCESS_TRUST_LABEL_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ACCESS_FILTER_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static int AclRevisionInformation() {
        return (int)1L;
    }
    public static int AclSizeInformation() {
        return (int)2L;
    }
    public static OfAddress PACL_REVISION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACL_SIZE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_DESCRIPTOR_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISECURITY_DESCRIPTOR_RELATIVE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_OBJECT_AI_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POBJECT_TYPE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static int AuditEventObjectAccess() {
        return (int)0L;
    }
    public static int AuditEventDirectoryServiceAccess() {
        return (int)1L;
    }
    public static OfAddress PAUDIT_EVENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRIVILEGE_SET = Constants$root.C_POINTER$LAYOUT;
    public static int AccessReasonNone() {
        return (int)0L;
    }
    public static int AccessReasonAllowedAce() {
        return (int)65536L;
    }
    public static int AccessReasonDeniedAce() {
        return (int)131072L;
    }
    public static int AccessReasonAllowedParentAce() {
        return (int)196608L;
    }
    public static int AccessReasonDeniedParentAce() {
        return (int)262144L;
    }
    public static int AccessReasonNotGrantedByCape() {
        return (int)327680L;
    }
    public static int AccessReasonNotGrantedByParentCape() {
        return (int)393216L;
    }
    public static int AccessReasonNotGrantedToAppContainer() {
        return (int)458752L;
    }
    public static int AccessReasonMissingPrivilege() {
        return (int)1048576L;
    }
    public static int AccessReasonFromPrivilege() {
        return (int)2097152L;
    }
    public static int AccessReasonIntegrityLevel() {
        return (int)3145728L;
    }
    public static int AccessReasonOwnership() {
        return (int)4194304L;
    }
    public static int AccessReasonNullDacl() {
        return (int)5242880L;
    }
    public static int AccessReasonEmptyDacl() {
        return (int)6291456L;
    }
    public static int AccessReasonNoSD() {
        return (int)7340032L;
    }
    public static int AccessReasonNoGrant() {
        return (int)8388608L;
    }
    public static int AccessReasonTrustLabel() {
        return (int)9437184L;
    }
    public static int AccessReasonFilterAce() {
        return (int)10485760L;
    }
    public static OfAddress PACCESS_REASONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_ACCESS_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_ACCESS_REPLY = Constants$root.C_POINTER$LAYOUT;
    public static int SecurityAnonymous() {
        return (int)0L;
    }
    public static int SecurityIdentification() {
        return (int)1L;
    }
    public static int SecurityImpersonation() {
        return (int)2L;
    }
    public static int SecurityDelegation() {
        return (int)3L;
    }
    public static OfAddress PSECURITY_IMPERSONATION_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int TokenPrimary() {
        return (int)1L;
    }
    public static int TokenImpersonation() {
        return (int)2L;
    }
    public static OfAddress PTOKEN_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int TokenElevationTypeDefault() {
        return (int)1L;
    }
    public static int TokenElevationTypeFull() {
        return (int)2L;
    }
    public static int TokenElevationTypeLimited() {
        return (int)3L;
    }
    public static OfAddress PTOKEN_ELEVATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int TokenUser() {
        return (int)1L;
    }
    public static int TokenGroups() {
        return (int)2L;
    }
    public static int TokenPrivileges() {
        return (int)3L;
    }
    public static int TokenOwner() {
        return (int)4L;
    }
    public static int TokenPrimaryGroup() {
        return (int)5L;
    }
    public static int TokenDefaultDacl() {
        return (int)6L;
    }
    public static int TokenSource() {
        return (int)7L;
    }
    public static int TokenType() {
        return (int)8L;
    }
    public static int TokenImpersonationLevel() {
        return (int)9L;
    }
    public static int TokenStatistics() {
        return (int)10L;
    }
    public static int TokenRestrictedSids() {
        return (int)11L;
    }
    public static int TokenSessionId() {
        return (int)12L;
    }
    public static int TokenGroupsAndPrivileges() {
        return (int)13L;
    }
    public static int TokenSessionReference() {
        return (int)14L;
    }
    public static int TokenSandBoxInert() {
        return (int)15L;
    }
    public static int TokenAuditPolicy() {
        return (int)16L;
    }
    public static int TokenOrigin() {
        return (int)17L;
    }
    public static int TokenElevationType() {
        return (int)18L;
    }
    public static int TokenLinkedToken() {
        return (int)19L;
    }
    public static int TokenElevation() {
        return (int)20L;
    }
    public static int TokenHasRestrictions() {
        return (int)21L;
    }
    public static int TokenAccessInformation() {
        return (int)22L;
    }
    public static int TokenVirtualizationAllowed() {
        return (int)23L;
    }
    public static int TokenVirtualizationEnabled() {
        return (int)24L;
    }
    public static int TokenIntegrityLevel() {
        return (int)25L;
    }
    public static int TokenUIAccess() {
        return (int)26L;
    }
    public static int TokenMandatoryPolicy() {
        return (int)27L;
    }
    public static int TokenLogonSid() {
        return (int)28L;
    }
    public static int TokenIsAppContainer() {
        return (int)29L;
    }
    public static int TokenCapabilities() {
        return (int)30L;
    }
    public static int TokenAppContainerSid() {
        return (int)31L;
    }
    public static int TokenAppContainerNumber() {
        return (int)32L;
    }
    public static int TokenUserClaimAttributes() {
        return (int)33L;
    }
    public static int TokenDeviceClaimAttributes() {
        return (int)34L;
    }
    public static int TokenRestrictedUserClaimAttributes() {
        return (int)35L;
    }
    public static int TokenRestrictedDeviceClaimAttributes() {
        return (int)36L;
    }
    public static int TokenDeviceGroups() {
        return (int)37L;
    }
    public static int TokenRestrictedDeviceGroups() {
        return (int)38L;
    }
    public static int TokenSecurityAttributes() {
        return (int)39L;
    }
    public static int TokenIsRestricted() {
        return (int)40L;
    }
    public static int TokenProcessTrustLevel() {
        return (int)41L;
    }
    public static int TokenPrivateNameSpace() {
        return (int)42L;
    }
    public static int TokenSingletonAttributes() {
        return (int)43L;
    }
    public static int TokenBnoIsolation() {
        return (int)44L;
    }
    public static int TokenChildProcessFlags() {
        return (int)45L;
    }
    public static int TokenIsLessPrivilegedAppContainer() {
        return (int)46L;
    }
    public static int TokenIsSandboxed() {
        return (int)47L;
    }
    public static int TokenOriginatingProcessTrustLevel() {
        return (int)48L;
    }
    public static int MaxTokenInfoClass() {
        return (int)49L;
    }
    public static OfAddress PTOKEN_INFORMATION_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_USER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_GROUPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_PRIVILEGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_OWNER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_PRIMARY_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_DEFAULT_DACL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_USER_CLAIMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_DEVICE_CLAIMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_GROUPS_AND_PRIVILEGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_LINKED_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ELEVATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_MANDATORY_LABEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_MANDATORY_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_ATTRIBUTES_OPAQUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ACCESS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_AUDIT_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_SOURCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ORIGIN = Constants$root.C_POINTER$LAYOUT;
    public static int MandatoryLevelUntrusted() {
        return (int)0L;
    }
    public static int MandatoryLevelLow() {
        return (int)1L;
    }
    public static int MandatoryLevelMedium() {
        return (int)2L;
    }
    public static int MandatoryLevelHigh() {
        return (int)3L;
    }
    public static int MandatoryLevelSystem() {
        return (int)4L;
    }
    public static int MandatoryLevelSecureProcess() {
        return (int)5L;
    }
    public static int MandatoryLevelCount() {
        return (int)6L;
    }
    public static OfAddress PMANDATORY_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_APPCONTAINER_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_SID_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_BNO_ISOLATION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_CONTEXT_TRACKING_MODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_QUALITY_OF_SERVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_IMPERSONATION_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SIGNING_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int SeImageSignatureNone() {
        return (int)0L;
    }
    public static int SeImageSignatureEmbedded() {
        return (int)1L;
    }
    public static int SeImageSignatureCache() {
        return (int)2L;
    }
    public static int SeImageSignatureCatalogCached() {
        return (int)3L;
    }
    public static int SeImageSignatureCatalogNotCached() {
        return (int)4L;
    }
    public static int SeImageSignatureCatalogHint() {
        return (int)5L;
    }
    public static int SeImageSignaturePackageCatalog() {
        return (int)6L;
    }
    public static OfAddress PSE_IMAGE_SIGNATURE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int SeLearningModeInvalidType() {
        return (int)0L;
    }
    public static int SeLearningModeSettings() {
        return (int)1L;
    }
    public static int SeLearningModeMax() {
        return (int)2L;
    }
    public static OfAddress PSECURITY_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSECURITY_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_SET_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_REGISTRATION_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUMS_CREATE_THREAD_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUOTA_LIMITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRATE_QUOTA_LIMIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUOTA_LIMITS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIO_COUNTERS = Constants$root.C_POINTER$LAYOUT;
    public static int PMCCounter() {
        return (int)0L;
    }
    public static int MaxHardwareCounterType() {
        return (int)1L;
    }
    public static OfAddress PHARDWARE_COUNTER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int ProcessDEPPolicy() {
        return (int)0L;
    }
    public static int ProcessASLRPolicy() {
        return (int)1L;
    }
    public static int ProcessDynamicCodePolicy() {
        return (int)2L;
    }
    public static int ProcessStrictHandleCheckPolicy() {
        return (int)3L;
    }
    public static int ProcessSystemCallDisablePolicy() {
        return (int)4L;
    }
    public static int ProcessMitigationOptionsMask() {
        return (int)5L;
    }
    public static int ProcessExtensionPointDisablePolicy() {
        return (int)6L;
    }
    public static int ProcessControlFlowGuardPolicy() {
        return (int)7L;
    }
    public static int ProcessSignaturePolicy() {
        return (int)8L;
    }
    public static int ProcessFontDisablePolicy() {
        return (int)9L;
    }
    public static int ProcessImageLoadPolicy() {
        return (int)10L;
    }
    public static int ProcessSystemCallFilterPolicy() {
        return (int)11L;
    }
    public static int ProcessPayloadRestrictionPolicy() {
        return (int)12L;
    }
    public static int ProcessChildProcessPolicy() {
        return (int)13L;
    }
    public static int ProcessSideChannelIsolationPolicy() {
        return (int)14L;
    }
    public static int ProcessUserShadowStackPolicy() {
        return (int)15L;
    }
    public static int MaxProcessMitigationPolicy() {
        return (int)16L;
    }
    public static OfAddress PPROCESS_MITIGATION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_ASLR_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_DEP_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_FONT_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_CHILD_PROCESS_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_PROCESS_ID_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_UI_RESTRICTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_SECURITY_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_JOBSET_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ToleranceLow() {
        return (int)1L;
    }
    public static int ToleranceMedium() {
        return (int)2L;
    }
    public static int ToleranceHigh() {
        return (int)3L;
    }
    public static OfAddress PJOBOBJECT_RATE_CONTROL_TOLERANCE = Constants$root.C_POINTER$LAYOUT;
    public static int ToleranceIntervalShort() {
        return (int)1L;
    }
    public static int ToleranceIntervalMedium() {
        return (int)2L;
    }
    public static int ToleranceIntervalLong() {
        return (int)3L;
    }
    public static OfAddress PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int JOB_OBJECT_NET_RATE_CONTROL_ENABLE() {
        return (int)1L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH() {
        return (int)2L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG() {
        return (int)4L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS() {
        return (int)7L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_ENABLE() {
        return (int)1L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME() {
        return (int)2L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL() {
        return (int)4L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP() {
        return (int)8L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS() {
        return (int)15L;
    }
    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE() {
        return (int)1L;
    }
}


