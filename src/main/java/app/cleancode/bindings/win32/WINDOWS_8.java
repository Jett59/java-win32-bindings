// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class WINDOWS_8 extends WINDOWS_7 {

    public static int CERT_NAME_STR_NO_QUOTING_FLAG() {
        return (int)268435456L;
    }
    public static int CERT_NAME_STR_CRLF_FLAG() {
        return (int)134217728L;
    }
    public static int CERT_NAME_STR_COMMA_FLAG() {
        return (int)67108864L;
    }
    public static int CERT_NAME_STR_REVERSE_FLAG() {
        return (int)33554432L;
    }
    public static int CERT_NAME_STR_FORWARD_FLAG() {
        return (int)16777216L;
    }
    public static int CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG() {
        return (int)65536L;
    }
    public static int CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG() {
        return (int)131072L;
    }
    public static int CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG() {
        return (int)262144L;
    }
    public static int CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG() {
        return (int)524288L;
    }
    public static int CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG() {
        return (int)1048576L;
    }
    public static int CERT_NAME_STR_ENABLE_PUNYCODE_FLAG() {
        return (int)2097152L;
    }
    public static int CERT_NAME_EMAIL_TYPE() {
        return (int)1L;
    }
    public static int CERT_NAME_RDN_TYPE() {
        return (int)2L;
    }
    public static int CERT_NAME_ATTR_TYPE() {
        return (int)3L;
    }
    public static int CERT_NAME_SIMPLE_DISPLAY_TYPE() {
        return (int)4L;
    }
    public static int CERT_NAME_FRIENDLY_DISPLAY_TYPE() {
        return (int)5L;
    }
    public static int CERT_NAME_DNS_TYPE() {
        return (int)6L;
    }
    public static int CERT_NAME_URL_TYPE() {
        return (int)7L;
    }
    public static int CERT_NAME_UPN_TYPE() {
        return (int)8L;
    }
    public static int CERT_NAME_ISSUER_FLAG() {
        return (int)1L;
    }
    public static int CERT_NAME_DISABLE_IE4_UTF8_FLAG() {
        return (int)65536L;
    }
    public static int CERT_NAME_SEARCH_ALL_NAMES_FLAG() {
        return (int)2L;
    }
    public static int CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG() {
        return (int)1L;
    }
    public static int CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG() {
        return (int)2L;
    }
    public static int CRYPT_MESSAGE_KEYID_SIGNER_FLAG() {
        return (int)4L;
    }
    public static int CRYPT_MESSAGE_SILENT_KEYSET_FLAG() {
        return (int)64L;
    }
    public static int CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG() {
        return (int)4L;
    }
    public static int CERT_QUERY_OBJECT_FILE() {
        return (int)1L;
    }
    public static int CERT_QUERY_OBJECT_BLOB() {
        return (int)2L;
    }
    public static int CERT_QUERY_CONTENT_CERT() {
        return (int)1L;
    }
    public static int CERT_QUERY_CONTENT_CTL() {
        return (int)2L;
    }
    public static int CERT_QUERY_CONTENT_CRL() {
        return (int)3L;
    }
    public static int CERT_QUERY_CONTENT_SERIALIZED_STORE() {
        return (int)4L;
    }
    public static int CERT_QUERY_CONTENT_SERIALIZED_CERT() {
        return (int)5L;
    }
    public static int CERT_QUERY_CONTENT_SERIALIZED_CTL() {
        return (int)6L;
    }
    public static int CERT_QUERY_CONTENT_SERIALIZED_CRL() {
        return (int)7L;
    }
    public static int CERT_QUERY_CONTENT_PKCS7_SIGNED() {
        return (int)8L;
    }
    public static int CERT_QUERY_CONTENT_PKCS7_UNSIGNED() {
        return (int)9L;
    }
    public static int CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED() {
        return (int)10L;
    }
    public static int CERT_QUERY_CONTENT_PKCS10() {
        return (int)11L;
    }
    public static int CERT_QUERY_CONTENT_PFX() {
        return (int)12L;
    }
    public static int CERT_QUERY_CONTENT_CERT_PAIR() {
        return (int)13L;
    }
    public static int CERT_QUERY_CONTENT_PFX_AND_LOAD() {
        return (int)14L;
    }
    public static int CERT_QUERY_FORMAT_BINARY() {
        return (int)1L;
    }
    public static int CERT_QUERY_FORMAT_BASE64_ENCODED() {
        return (int)2L;
    }
    public static int CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED() {
        return (int)3L;
    }
    public static int CRYPT_RETRIEVE_MULTIPLE_OBJECTS() {
        return (int)1L;
    }
    public static int CRYPT_CACHE_ONLY_RETRIEVAL() {
        return (int)2L;
    }
    public static int CRYPT_WIRE_ONLY_RETRIEVAL() {
        return (int)4L;
    }
    public static int CRYPT_DONT_CACHE_RESULT() {
        return (int)8L;
    }
    public static int CRYPT_ASYNC_RETRIEVAL() {
        return (int)16L;
    }
    public static int CRYPT_STICKY_CACHE_RETRIEVAL() {
        return (int)4096L;
    }
    public static int CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL() {
        return (int)8192L;
    }
    public static int CRYPT_OFFLINE_CHECK_RETRIEVAL() {
        return (int)16384L;
    }
    public static int CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE() {
        return (int)32768L;
    }
    public static int CRYPT_LDAP_SIGN_RETRIEVAL() {
        return (int)65536L;
    }
    public static int CRYPT_NO_AUTH_RETRIEVAL() {
        return (int)131072L;
    }
    public static int CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL() {
        return (int)262144L;
    }
    public static int CRYPT_AIA_RETRIEVAL() {
        return (int)524288L;
    }
    public static int CRYPT_HTTP_POST_RETRIEVAL() {
        return (int)1048576L;
    }
    public static int CRYPT_PROXY_CACHE_RETRIEVAL() {
        return (int)2097152L;
    }
    public static int CRYPT_NOT_MODIFIED_RETRIEVAL() {
        return (int)4194304L;
    }
    public static int CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL() {
        return (int)8388608L;
    }
    public static int CRYPT_RANDOM_QUERY_STRING_RETRIEVAL() {
        return (int)67108864L;
    }
    public static int CRYPT_ENABLE_FILE_RETRIEVAL() {
        return (int)134217728L;
    }
    public static int CRYPT_CREATE_NEW_FLUSH_ENTRY() {
        return (int)268435456L;
    }
    public static int CRYPT_VERIFY_CONTEXT_SIGNATURE() {
        return (int)32L;
    }
    public static int CRYPT_VERIFY_DATA_HASH() {
        return (int)64L;
    }
    public static int CRYPT_KEEP_TIME_VALID() {
        return (int)128L;
    }
    public static int CRYPT_DONT_VERIFY_SIGNATURE() {
        return (int)256L;
    }
    public static int CRYPT_DONT_CHECK_TIME_VALIDITY() {
        return (int)512L;
    }
    public static int CRYPT_CHECK_FRESHNESS_TIME_VALIDITY() {
        return (int)1024L;
    }
    public static int CRYPT_ACCUMULATIVE_TIMEOUT() {
        return (int)2048L;
    }
    public static int CRYPT_OCSP_ONLY_RETRIEVAL() {
        return (int)16777216L;
    }
    public static int CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL() {
        return (int)33554432L;
    }
    public static int CRYPTNET_URL_CACHE_PRE_FETCH_NONE() {
        return (int)0L;
    }
    public static int CRYPTNET_URL_CACHE_PRE_FETCH_BLOB() {
        return (int)1L;
    }
    public static int CRYPTNET_URL_CACHE_PRE_FETCH_CRL() {
        return (int)2L;
    }
    public static int CRYPTNET_URL_CACHE_PRE_FETCH_OCSP() {
        return (int)3L;
    }
    public static int CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB() {
        return (int)5L;
    }
    public static int CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB() {
        return (int)6L;
    }
    public static int CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB() {
        return (int)7L;
    }
    public static int CRYPTNET_URL_CACHE_DEFAULT_FLUSH() {
        return (int)0L;
    }
    public static int CRYPTNET_URL_CACHE_RESPONSE_NONE() {
        return (int)0L;
    }
    public static int CRYPTNET_URL_CACHE_RESPONSE_HTTP() {
        return (int)1L;
    }
    public static int CRYPTNET_URL_CACHE_RESPONSE_VALIDATED() {
        return (int)32768L;
    }
    public static int CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH() {
        return (int)4096L;
    }
    public static int CRYPT_GET_URL_FROM_PROPERTY() {
        return (int)1L;
    }
    public static int CRYPT_GET_URL_FROM_EXTENSION() {
        return (int)2L;
    }
    public static int CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE() {
        return (int)4L;
    }
    public static int CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE() {
        return (int)8L;
    }
    public static int CERT_CREATE_SELFSIGN_NO_SIGN() {
        return (int)1L;
    }
    public static int CERT_CREATE_SELFSIGN_NO_KEY_INFO() {
        return (int)2L;
    }
    public static int CRYPT_KEYID_MACHINE_FLAG() {
        return (int)32L;
    }
    public static int CRYPT_KEYID_ALLOC_FLAG() {
        return (int)32768L;
    }
    public static int CRYPT_KEYID_DELETE_FLAG() {
        return (int)16L;
    }
    public static int CRYPT_KEYID_SET_NEW_FLAG() {
        return (int)8192L;
    }
    public static int CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT() {
        return (int)5L;
    }
    public static int CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT() {
        return (int)3L;
    }
    public static int CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT() {
        return (int)100000L;
    }
    public static int CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT() {
        return (int)10L;
    }
    public static int CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT() {
        return (int)5L;
    }
    public static int CERT_CHAIN_ENABLE_MD2_MD4_FLAG() {
        return (int)1L;
    }
    public static int CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG() {
        return (int)2L;
    }
    public static int CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG() {
        return (int)4L;
    }
    public static int CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG() {
        return (int)8L;
    }
    public static int CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT() {
        return (int)1023L;
    }
    public static int CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG() {
        return (int)65536L;
    }
    public static int CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG() {
        return (int)131072L;
    }
    public static int CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG() {
        return (int)262144L;
    }
    public static int CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG() {
        return (int)1048576L;
    }
    public static int CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG() {
        return (int)2097152L;
    }
    public static int CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG() {
        return (int)4194304L;
    }
    public static int CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG() {
        return (int)8388608L;
    }
    public static int CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG() {
        return (int)16777216L;
    }
    public static int CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG() {
        return (int)33554432L;
    }
    public static int CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG() {
        return (int)67108864L;
    }
    public static int CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG() {
        return (int)134217728L;
    }
    public static int CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG() {
        return (int)268435456L;
    }
    public static int CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG() {
        return (int)536870912L;
    }
    public static int CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG() {
        return (int)1073741824L;
    }
    public static int CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG() {
        return (int)4096L;
    }
    public static int CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG() {
        return (int)8192L;
    }
    public static int CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG() {
        return (int)16384L;
    }
    public static int CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG() {
        return (int)32768L;
    }
    public static int CERT_CHAIN_AUTO_CURRENT_USER() {
        return (int)1L;
    }
    public static int CERT_CHAIN_AUTO_LOCAL_MACHINE() {
        return (int)2L;
    }
    public static int CERT_CHAIN_AUTO_IMPERSONATED() {
        return (int)3L;
    }
    public static int CERT_CHAIN_AUTO_PROCESS_INFO() {
        return (int)4L;
    }
    public static int CERT_CHAIN_AUTO_PINRULE_INFO() {
        return (int)5L;
    }
    public static int CERT_CHAIN_AUTO_NETWORK_INFO() {
        return (int)6L;
    }
    public static int CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE() {
        return (int)7L;
    }
    public static int CERT_CHAIN_AUTO_HPKP_RULE_INFO() {
        return (int)8L;
    }
    public static int CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG() {
        return (int)1L;
    }
    public static int CERT_CHAIN_AUTO_LOG_CREATE_FLAG() {
        return (int)2L;
    }
    public static int CERT_CHAIN_AUTO_LOG_FREE_FLAG() {
        return (int)4L;
    }
    public static int CERT_CHAIN_AUTO_LOG_FLUSH_FLAG() {
        return (int)8L;
    }
    public static int CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT() {
        return (int)5L;
    }
    public static int CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT() {
        return (int)500L;
    }
    public static int CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT() {
        return (int)10L;
    }
    public static int CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT() {
        return (int)20L;
    }
    public static int CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT() {
        return (int)10L;
    }
    public static int CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT() {
        return (int)60L;
    }
    public static int CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT() {
        return (int)50L;
    }
    public static int CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL() {
        return (int)2L;
    }
    public static int CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL() {
        return (int)4L;
    }
    public static int CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT() {
        return (int)12L;
    }
    public static int CERT_CHAIN_CACHE_END_CERT() {
        return (int)1L;
    }
    public static int CERT_CHAIN_THREAD_STORE_SYNC() {
        return (int)2L;
    }
    public static int CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL() {
        return (int)4L;
    }
    public static int CERT_CHAIN_USE_LOCAL_MACHINE_STORE() {
        return (int)8L;
    }
    public static int CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE() {
        return (int)16L;
    }
    public static int CERT_CHAIN_ENABLE_SHARE_STORE() {
        return (int)32L;
    }
    public static int CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG() {
        return (int)1L;
    }
    public static int CERT_TRUST_NO_ERROR() {
        return (int)0L;
    }
    public static int CERT_TRUST_IS_NOT_TIME_VALID() {
        return (int)1L;
    }
    public static int CERT_TRUST_IS_NOT_TIME_NESTED() {
        return (int)2L;
    }
    public static int CERT_TRUST_IS_REVOKED() {
        return (int)4L;
    }
    public static int CERT_TRUST_IS_NOT_SIGNATURE_VALID() {
        return (int)8L;
    }
    public static int CERT_TRUST_IS_NOT_VALID_FOR_USAGE() {
        return (int)16L;
    }
    public static int CERT_TRUST_IS_UNTRUSTED_ROOT() {
        return (int)32L;
    }
    public static int CERT_TRUST_REVOCATION_STATUS_UNKNOWN() {
        return (int)64L;
    }
    public static int CERT_TRUST_IS_CYCLIC() {
        return (int)128L;
    }
    public static int CERT_TRUST_INVALID_EXTENSION() {
        return (int)256L;
    }
    public static int CERT_TRUST_INVALID_POLICY_CONSTRAINTS() {
        return (int)512L;
    }
    public static int CERT_TRUST_INVALID_BASIC_CONSTRAINTS() {
        return (int)1024L;
    }
    public static int CERT_TRUST_INVALID_NAME_CONSTRAINTS() {
        return (int)2048L;
    }
    public static int CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT() {
        return (int)4096L;
    }
    public static int CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT() {
        return (int)8192L;
    }
    public static int CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT() {
        return (int)16384L;
    }
    public static int CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT() {
        return (int)32768L;
    }
    public static int CERT_TRUST_IS_OFFLINE_REVOCATION() {
        return (int)16777216L;
    }
    public static int CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY() {
        return (int)33554432L;
    }
    public static int CERT_TRUST_IS_EXPLICIT_DISTRUST() {
        return (int)67108864L;
    }
    public static int CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT() {
        return (int)134217728L;
    }
    public static int CERT_TRUST_HAS_WEAK_SIGNATURE() {
        return (int)1048576L;
    }
    public static int CERT_TRUST_HAS_WEAK_HYGIENE() {
        return (int)2097152L;
    }
    public static int CERT_TRUST_IS_PARTIAL_CHAIN() {
        return (int)65536L;
    }
    public static int CERT_TRUST_CTL_IS_NOT_TIME_VALID() {
        return (int)131072L;
    }
    public static int CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID() {
        return (int)262144L;
    }
    public static int CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE() {
        return (int)524288L;
    }
    public static int CERT_TRUST_HAS_EXACT_MATCH_ISSUER() {
        return (int)1L;
    }
    public static int CERT_TRUST_HAS_KEY_MATCH_ISSUER() {
        return (int)2L;
    }
    public static int CERT_TRUST_HAS_NAME_MATCH_ISSUER() {
        return (int)4L;
    }
    public static int CERT_TRUST_IS_SELF_SIGNED() {
        return (int)8L;
    }
    public static int CERT_TRUST_AUTO_UPDATE_CA_REVOCATION() {
        return (int)16L;
    }
    public static int CERT_TRUST_AUTO_UPDATE_END_REVOCATION() {
        return (int)32L;
    }
    public static int CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL() {
        return (int)64L;
    }
    public static int CERT_TRUST_IS_KEY_ROLLOVER() {
        return (int)128L;
    }
    public static int CERT_TRUST_SSL_HANDSHAKE_OCSP() {
        return (int)262144L;
    }
    public static int CERT_TRUST_SSL_TIME_VALID_OCSP() {
        return (int)524288L;
    }
    public static int CERT_TRUST_SSL_RECONNECT_OCSP() {
        return (int)1048576L;
    }
    public static int CERT_TRUST_HAS_PREFERRED_ISSUER() {
        return (int)256L;
    }
    public static int CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY() {
        return (int)512L;
    }
    public static int CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS() {
        return (int)1024L;
    }
    public static int CERT_TRUST_IS_PEER_TRUSTED() {
        return (int)2048L;
    }
    public static int CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED() {
        return (int)4096L;
    }
    public static int CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE() {
        return (int)8192L;
    }
    public static int CERT_TRUST_IS_CA_TRUSTED() {
        return (int)16384L;
    }
    public static int CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE() {
        return (int)32768L;
    }
    public static int CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE() {
        return (int)131072L;
    }
    public static int CERT_TRUST_IS_COMPLEX_CHAIN() {
        return (int)65536L;
    }
    public static int CERT_TRUST_SSL_TIME_VALID() {
        return (int)16777216L;
    }
    public static int CERT_TRUST_NO_TIME_CHECK() {
        return (int)33554432L;
    }
    public static int USAGE_MATCH_TYPE_AND() {
        return (int)0L;
    }
    public static int USAGE_MATCH_TYPE_OR() {
        return (int)1L;
    }
    public static int CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG() {
        return (int)1L;
    }
    public static int CERT_CHAIN_REVOCATION_CHECK_END_CERT() {
        return (int)268435456L;
    }
    public static int CERT_CHAIN_REVOCATION_CHECK_CHAIN() {
        return (int)536870912L;
    }
    public static int CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT() {
        return (int)1073741824L;
    }
    public static int CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT() {
        return (int)134217728L;
    }
    public static int CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT() {
        return (int)67108864L;
    }
    public static int CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING() {
        return (int)64L;
    }
    public static int CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS() {
        return (int)128L;
    }
    public static int CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE() {
        return (int)256L;
    }
    public static int CERT_CHAIN_TIMESTAMP_TIME() {
        return (int)512L;
    }
    public static int CERT_CHAIN_ENABLE_PEER_TRUST() {
        return (int)1024L;
    }
    public static int CERT_CHAIN_DISABLE_MY_PEER_TRUST() {
        return (int)2048L;
    }
    public static int CERT_CHAIN_DISABLE_MD2_MD4() {
        return (int)4096L;
    }
    public static int CERT_CHAIN_DISABLE_AIA() {
        return (int)8192L;
    }
    public static int CERT_CHAIN_HAS_MOTW() {
        return (int)16384L;
    }
    public static int CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT() {
        return (int)32768L;
    }
    public static int CERT_CHAIN_OPT_IN_WEAK_SIGNATURE() {
        return (int)65536L;
    }
    public static int CERT_CHAIN_FIND_BY_ISSUER() {
        return (int)1L;
    }
    public static int CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG() {
        return (int)1L;
    }
    public static int CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG() {
        return (int)2L;
    }
    public static int CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG() {
        return (int)4L;
    }
    public static int CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG() {
        return (int)8L;
    }
    public static int CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG() {
        return (int)16384L;
    }
    public static int CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG() {
        return (int)32768L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG() {
        return (int)1L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG() {
        return (int)2L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG() {
        return (int)4L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG() {
        return (int)8L;
    }
    public static int CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG() {
        return (int)16L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG() {
        return (int)32L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG() {
        return (int)64L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG() {
        return (int)128L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG() {
        return (int)256L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG() {
        return (int)512L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG() {
        return (int)1024L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG() {
        return (int)2048L;
    }
    public static int CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG() {
        return (int)32768L;
    }
    public static int CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG() {
        return (int)16384L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG() {
        return (int)8192L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG() {
        return (int)4096L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG() {
        return (int)134217728L;
    }
    public static int AUTHTYPE_CLIENT() {
        return (int)1L;
    }
    public static int AUTHTYPE_SERVER() {
        return (int)2L;
    }
    public static int BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG() {
        return (int)1073741824L;
    }
    public static int MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG() {
        return (int)65536L;
    }
    public static int MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG() {
        return (int)131072L;
    }
    public static int MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG() {
        return (int)262144L;
    }
    public static int SSL_F12_ERROR_TEXT_LENGTH() {
        return (int)256L;
    }
    public static int CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL() {
        return (int)0L;
    }
    public static int CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL() {
        return (int)1L;
    }
    public static int CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL() {
        return (int)2L;
    }
    public static int CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY() {
        return (int)0L;
    }
    public static int CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY() {
        return (int)1L;
    }
    public static int CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY() {
        return (int)2L;
    }
    public static int SSL_HPKP_PKP_HEADER_INDEX() {
        return (int)0L;
    }
    public static int SSL_HPKP_PKP_RO_HEADER_INDEX() {
        return (int)1L;
    }
    public static int SSL_HPKP_HEADER_COUNT() {
        return (int)2L;
    }
    public static int SSL_KEY_PIN_ERROR_TEXT_LENGTH() {
        return (int)512L;
    }
    public static int CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS() {
        return (int)0L;
    }
    public static int CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING() {
        return (int)1L;
    }
    public static int CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING() {
        return (int)2L;
    }
    public static int CRYPT_STRING_BASE64HEADER() {
        return (int)0L;
    }
    public static int CRYPT_STRING_BASE64() {
        return (int)1L;
    }
    public static int CRYPT_STRING_BINARY() {
        return (int)2L;
    }
    public static int CRYPT_STRING_BASE64REQUESTHEADER() {
        return (int)3L;
    }
    public static int CRYPT_STRING_HEX() {
        return (int)4L;
    }
    public static int CRYPT_STRING_HEXASCII() {
        return (int)5L;
    }
    public static int CRYPT_STRING_BASE64_ANY() {
        return (int)6L;
    }
    public static int CRYPT_STRING_ANY() {
        return (int)7L;
    }
    public static int CRYPT_STRING_HEX_ANY() {
        return (int)8L;
    }
    public static int CRYPT_STRING_BASE64X509CRLHEADER() {
        return (int)9L;
    }
    public static int CRYPT_STRING_HEXADDR() {
        return (int)10L;
    }
    public static int CRYPT_STRING_HEXASCIIADDR() {
        return (int)11L;
    }
    public static int CRYPT_STRING_HEXRAW() {
        return (int)12L;
    }
    public static int CRYPT_STRING_BASE64URI() {
        return (int)13L;
    }
    public static int CRYPT_STRING_ENCODEMASK() {
        return (int)255L;
    }
    public static int CRYPT_STRING_RESERVED100() {
        return (int)256L;
    }
    public static int CRYPT_STRING_RESERVED200() {
        return (int)512L;
    }
    public static int CRYPT_STRING_PERCENTESCAPE() {
        return (int)134217728L;
    }
    public static int CRYPT_STRING_HASHDATA() {
        return (int)268435456L;
    }
    public static int CRYPT_STRING_STRICT() {
        return (int)536870912L;
    }
    public static int CRYPT_STRING_NOCRLF() {
        return (int)1073741824L;
    }
    public static int PKCS12_IMPORT_SILENT() {
        return (int)64L;
    }
    public static int CRYPT_USER_KEYSET() {
        return (int)4096L;
    }
    public static int PKCS12_PREFER_CNG_KSP() {
        return (int)256L;
    }
    public static int PKCS12_ALWAYS_CNG_KSP() {
        return (int)512L;
    }
    public static int PKCS12_ONLY_CERTIFICATES() {
        return (int)1024L;
    }
    public static int PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES() {
        return (int)2048L;
    }
    public static int PKCS12_ALLOW_OVERWRITE_KEY() {
        return (int)16384L;
    }
    public static int PKCS12_NO_PERSIST_KEY() {
        return (int)32768L;
    }
    public static int PKCS12_VIRTUAL_ISOLATION_KEY() {
        return (int)65536L;
    }
    public static int PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE() {
        return (int)0L;
    }
    public static int REPORT_NO_PRIVATE_KEY() {
        return (int)1L;
    }
    public static int REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY() {
        return (int)2L;
    }
    public static int EXPORT_PRIVATE_KEYS() {
        return (int)4L;
    }
    public static int PKCS12_INCLUDE_EXTENDED_PROPERTIES() {
        return (int)16L;
    }
    public static int PKCS12_PROTECT_TO_DOMAIN_SIDS() {
        return (int)32L;
    }
    public static int PKCS12_EXPORT_SILENT() {
        return (int)64L;
    }
    public static int PKCS12_EXPORT_PBES2_PARAMS() {
        return (int)128L;
    }
    public static int PKCS12_DISABLE_ENCRYPT_CERTIFICATES() {
        return (int)256L;
    }
    public static int PKCS12_ENCRYPT_CERTIFICATES() {
        return (int)512L;
    }
    public static int PKCS12_EXPORT_ECC_CURVE_PARAMETERS() {
        return (int)4096L;
    }
    public static int PKCS12_EXPORT_ECC_CURVE_OID() {
        return (int)8192L;
    }
    public static int CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG() {
        return (int)1L;
    }
    public static int CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG() {
        return (int)2L;
    }
    public static int CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG() {
        return (int)1L;
    }
    public static int CERT_SELECT_MAX_PARA() {
        return (int)500L;
    }
    public static int CERT_SELECT_BY_ENHKEY_USAGE() {
        return (int)1L;
    }
    public static int CERT_SELECT_BY_KEY_USAGE() {
        return (int)2L;
    }
    public static int CERT_SELECT_BY_POLICY_OID() {
        return (int)3L;
    }
    public static int CERT_SELECT_BY_PROV_NAME() {
        return (int)4L;
    }
    public static int CERT_SELECT_BY_EXTENSION() {
        return (int)5L;
    }
    public static int CERT_SELECT_BY_SUBJECT_HOST_NAME() {
        return (int)6L;
    }
    public static int CERT_SELECT_BY_ISSUER_ATTR() {
        return (int)7L;
    }
    public static int CERT_SELECT_BY_SUBJECT_ATTR() {
        return (int)8L;
    }
    public static int CERT_SELECT_BY_ISSUER_NAME() {
        return (int)9L;
    }
    public static int CERT_SELECT_BY_PUBLIC_KEY() {
        return (int)10L;
    }
    public static int CERT_SELECT_BY_TLS_SIGNATURES() {
        return (int)11L;
    }
    public static int CERT_SELECT_BY_ISSUER_DISPLAYNAME() {
        return (int)12L;
    }
    public static int CERT_SELECT_BY_FRIENDLYNAME() {
        return (int)13L;
    }
    public static int CERT_SELECT_BY_THUMBPRINT() {
        return (int)14L;
    }
    public static int CERT_SELECT_ALLOW_EXPIRED() {
        return (int)1L;
    }
    public static int CERT_SELECT_TRUSTED_ROOT() {
        return (int)2L;
    }
    public static int CERT_SELECT_DISALLOW_SELFSIGNED() {
        return (int)4L;
    }
    public static int CERT_SELECT_HAS_PRIVATE_KEY() {
        return (int)8L;
    }
    public static int CERT_SELECT_HAS_KEY_FOR_SIGNATURE() {
        return (int)16L;
    }
    public static int CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE() {
        return (int)32L;
    }
    public static int CERT_SELECT_HARDWARE_ONLY() {
        return (int)64L;
    }
    public static int CERT_SELECT_ALLOW_DUPLICATES() {
        return (int)128L;
    }
    public static int CERT_SELECT_IGNORE_AUTOSELECT() {
        return (int)256L;
    }
    public static int TIMESTAMP_VERSION() {
        return (int)1L;
    }
    public static int TIMESTAMP_STATUS_GRANTED() {
        return (int)0L;
    }
    public static int TIMESTAMP_STATUS_GRANTED_WITH_MODS() {
        return (int)1L;
    }
    public static int TIMESTAMP_STATUS_REJECTED() {
        return (int)2L;
    }
    public static int TIMESTAMP_STATUS_WAITING() {
        return (int)3L;
    }
    public static int TIMESTAMP_STATUS_REVOCATION_WARNING() {
        return (int)4L;
    }
    public static int TIMESTAMP_STATUS_REVOKED() {
        return (int)5L;
    }
    public static int TIMESTAMP_FAILURE_BAD_ALG() {
        return (int)0L;
    }
    public static int TIMESTAMP_FAILURE_BAD_REQUEST() {
        return (int)2L;
    }
    public static int TIMESTAMP_FAILURE_BAD_FORMAT() {
        return (int)5L;
    }
    public static int TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE() {
        return (int)14L;
    }
    public static int TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED() {
        return (int)15L;
    }
    public static int TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED() {
        return (int)16L;
    }
    public static int TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE() {
        return (int)17L;
    }
    public static int TIMESTAMP_FAILURE_SYSTEM_FAILURE() {
        return (int)25L;
    }
    public static int TIMESTAMP_DONT_HASH_DATA() {
        return (int)1L;
    }
    public static int TIMESTAMP_VERIFY_CONTEXT_SIGNATURE() {
        return (int)32L;
    }
    public static int TIMESTAMP_NO_AUTH_RETRIEVAL() {
        return (int)131072L;
    }
    public static int CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE() {
        return (int)1L;
    }
    public static int CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE() {
        return (int)32L;
    }
    public static int CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE() {
        return (int)33L;
    }
    public static int CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE() {
        return (int)65535L;
    }
    public static int CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN() {
        return (int)1L;
    }
    public static int CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP() {
        return (int)2L;
    }
    public static int CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT() {
        return (int)3L;
    }
    public static int CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD() {
        return (int)4L;
    }
    public static int CERT_FILE_HASH_USE_TYPE() {
        return (int)1L;
    }
    public static int CERT_TIMESTAMP_HASH_USE_TYPE() {
        return (int)2L;
    }
    public static int WINEFS_SETUSERKEY_SET_CAPABILITIES() {
        return (int)1L;
    }
    public static int EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR() {
        return (int)5L;
    }
    public static int EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR() {
        return (int)6L;
    }
    public static int EFS_SUBVER_UNKNOWN() {
        return (int)0L;
    }
    public static int EFS_EFS_SUBVER_EFS_CERT() {
        return (int)1L;
    }
    public static int EFS_PFILE_SUBVER_RMS() {
        return (int)2L;
    }
    public static int EFS_PFILE_SUBVER_APPX() {
        return (int)3L;
    }
    public static int MAX_SID_SIZE() {
        return (int)256L;
    }
    public static int EFS_METADATA_ADD_USER() {
        return (int)1L;
    }
    public static int EFS_METADATA_REMOVE_USER() {
        return (int)2L;
    }
    public static int EFS_METADATA_REPLACE_USER() {
        return (int)4L;
    }
    public static int EFS_METADATA_GENERAL_OP() {
        return (int)8L;
    }
    public static int FILE_DEVICE_BEEP() {
        return (int)1L;
    }
    public static int FILE_DEVICE_CD_ROM() {
        return (int)2L;
    }
    public static int FILE_DEVICE_CD_ROM_FILE_SYSTEM() {
        return (int)3L;
    }
    public static int FILE_DEVICE_CONTROLLER() {
        return (int)4L;
    }
    public static int FILE_DEVICE_DATALINK() {
        return (int)5L;
    }
    public static int FILE_DEVICE_DFS() {
        return (int)6L;
    }
    public static int FILE_DEVICE_DISK() {
        return (int)7L;
    }
    public static int FILE_DEVICE_DISK_FILE_SYSTEM() {
        return (int)8L;
    }
    public static int FILE_DEVICE_FILE_SYSTEM() {
        return (int)9L;
    }
    public static int FILE_DEVICE_INPORT_PORT() {
        return (int)10L;
    }
    public static int FILE_DEVICE_KEYBOARD() {
        return (int)11L;
    }
    public static int FILE_DEVICE_MAILSLOT() {
        return (int)12L;
    }
    public static int FILE_DEVICE_MIDI_IN() {
        return (int)13L;
    }
    public static int FILE_DEVICE_MIDI_OUT() {
        return (int)14L;
    }
    public static int FILE_DEVICE_MOUSE() {
        return (int)15L;
    }
    public static int FILE_DEVICE_MULTI_UNC_PROVIDER() {
        return (int)16L;
    }
    public static int FILE_DEVICE_NAMED_PIPE() {
        return (int)17L;
    }
    public static int FILE_DEVICE_NETWORK() {
        return (int)18L;
    }
    public static int FILE_DEVICE_NETWORK_BROWSER() {
        return (int)19L;
    }
    public static int FILE_DEVICE_NETWORK_FILE_SYSTEM() {
        return (int)20L;
    }
    public static int FILE_DEVICE_NULL() {
        return (int)21L;
    }
    public static int FILE_DEVICE_PARALLEL_PORT() {
        return (int)22L;
    }
    public static int FILE_DEVICE_PHYSICAL_NETCARD() {
        return (int)23L;
    }
    public static int FILE_DEVICE_PRINTER() {
        return (int)24L;
    }
    public static int FILE_DEVICE_SCANNER() {
        return (int)25L;
    }
    public static int FILE_DEVICE_SERIAL_MOUSE_PORT() {
        return (int)26L;
    }
    public static int FILE_DEVICE_SERIAL_PORT() {
        return (int)27L;
    }
    public static int FILE_DEVICE_SCREEN() {
        return (int)28L;
    }
    public static int FILE_DEVICE_SOUND() {
        return (int)29L;
    }
    public static int FILE_DEVICE_STREAMS() {
        return (int)30L;
    }
    public static int FILE_DEVICE_TAPE() {
        return (int)31L;
    }
    public static int FILE_DEVICE_TAPE_FILE_SYSTEM() {
        return (int)32L;
    }
    public static int FILE_DEVICE_TRANSPORT() {
        return (int)33L;
    }
    public static int FILE_DEVICE_UNKNOWN() {
        return (int)34L;
    }
    public static int FILE_DEVICE_VIDEO() {
        return (int)35L;
    }
    public static int FILE_DEVICE_VIRTUAL_DISK() {
        return (int)36L;
    }
    public static int FILE_DEVICE_WAVE_IN() {
        return (int)37L;
    }
    public static int FILE_DEVICE_WAVE_OUT() {
        return (int)38L;
    }
    public static int FILE_DEVICE_8042_PORT() {
        return (int)39L;
    }
    public static int FILE_DEVICE_NETWORK_REDIRECTOR() {
        return (int)40L;
    }
    public static int FILE_DEVICE_BATTERY() {
        return (int)41L;
    }
    public static int FILE_DEVICE_BUS_EXTENDER() {
        return (int)42L;
    }
    public static int FILE_DEVICE_MODEM() {
        return (int)43L;
    }
    public static int FILE_DEVICE_VDM() {
        return (int)44L;
    }
    public static int FILE_DEVICE_MASS_STORAGE() {
        return (int)45L;
    }
    public static int FILE_DEVICE_SMB() {
        return (int)46L;
    }
    public static int FILE_DEVICE_KS() {
        return (int)47L;
    }
    public static int FILE_DEVICE_CHANGER() {
        return (int)48L;
    }
    public static int FILE_DEVICE_SMARTCARD() {
        return (int)49L;
    }
    public static int FILE_DEVICE_ACPI() {
        return (int)50L;
    }
    public static int FILE_DEVICE_DVD() {
        return (int)51L;
    }
    public static int FILE_DEVICE_FULLSCREEN_VIDEO() {
        return (int)52L;
    }
    public static int FILE_DEVICE_DFS_FILE_SYSTEM() {
        return (int)53L;
    }
    public static int FILE_DEVICE_DFS_VOLUME() {
        return (int)54L;
    }
    public static int FILE_DEVICE_SERENUM() {
        return (int)55L;
    }
    public static int FILE_DEVICE_TERMSRV() {
        return (int)56L;
    }
    public static int FILE_DEVICE_KSEC() {
        return (int)57L;
    }
    public static int FILE_DEVICE_FIPS() {
        return (int)58L;
    }
    public static int FILE_DEVICE_INFINIBAND() {
        return (int)59L;
    }
    public static int FILE_DEVICE_VMBUS() {
        return (int)62L;
    }
    public static int FILE_DEVICE_CRYPT_PROVIDER() {
        return (int)63L;
    }
    public static int FILE_DEVICE_WPD() {
        return (int)64L;
    }
    public static int FILE_DEVICE_BLUETOOTH() {
        return (int)65L;
    }
    public static int FILE_DEVICE_MT_COMPOSITE() {
        return (int)66L;
    }
    public static int FILE_DEVICE_MT_TRANSPORT() {
        return (int)67L;
    }
    public static int FILE_DEVICE_BIOMETRIC() {
        return (int)68L;
    }
    public static int FILE_DEVICE_PMI() {
        return (int)69L;
    }
    public static int FILE_DEVICE_EHSTOR() {
        return (int)70L;
    }
    public static int FILE_DEVICE_DEVAPI() {
        return (int)71L;
    }
    public static int FILE_DEVICE_GPIO() {
        return (int)72L;
    }
    public static int FILE_DEVICE_USBEX() {
        return (int)73L;
    }
    public static int FILE_DEVICE_CONSOLE() {
        return (int)80L;
    }
    public static int FILE_DEVICE_NFP() {
        return (int)81L;
    }
    public static int FILE_DEVICE_SYSENV() {
        return (int)82L;
    }
    public static int FILE_DEVICE_VIRTUAL_BLOCK() {
        return (int)83L;
    }
    public static int FILE_DEVICE_POINT_OF_SERVICE() {
        return (int)84L;
    }
    public static int FILE_DEVICE_STORAGE_REPLICATION() {
        return (int)85L;
    }
    public static int FILE_DEVICE_TRUST_ENV() {
        return (int)86L;
    }
    public static int FILE_DEVICE_UCM() {
        return (int)87L;
    }
    public static int FILE_DEVICE_UCMTCPCI() {
        return (int)88L;
    }
    public static int FILE_DEVICE_PERSISTENT_MEMORY() {
        return (int)89L;
    }
    public static int FILE_DEVICE_NVDIMM() {
        return (int)90L;
    }
    public static int FILE_DEVICE_HOLOGRAPHIC() {
        return (int)91L;
    }
    public static int FILE_DEVICE_SDFXHCI() {
        return (int)92L;
    }
    public static int FILE_DEVICE_UCMUCSI() {
        return (int)93L;
    }
    public static int METHOD_BUFFERED() {
        return (int)0L;
    }
    public static int METHOD_IN_DIRECT() {
        return (int)1L;
    }
    public static int METHOD_OUT_DIRECT() {
        return (int)2L;
    }
    public static int METHOD_NEITHER() {
        return (int)3L;
    }
    public static int FILE_ANY_ACCESS() {
        return (int)0L;
    }
    public static int STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_CONFLICT() {
        return (int)1L;
    }
    public static int STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_NOHWID() {
        return (int)2L;
    }
    public static int STORAGE_DEVICE_FLAGS_PAGE_83_DEVICEGUID() {
        return (int)4L;
    }
    public static int RECOVERED_WRITES_VALID() {
        return (int)1L;
    }
    public static int UNRECOVERED_WRITES_VALID() {
        return (int)2L;
    }
    public static int RECOVERED_READS_VALID() {
        return (int)4L;
    }
    public static int UNRECOVERED_READS_VALID() {
        return (int)8L;
    }
    public static int WRITE_COMPRESSION_INFO_VALID() {
        return (int)16L;
    }
    public static int READ_COMPRESSION_INFO_VALID() {
        return (int)32L;
    }
    public static int MEDIA_ERASEABLE() {
        return (int)1L;
    }
    public static int MEDIA_WRITE_ONCE() {
        return (int)2L;
    }
    public static int MEDIA_READ_ONLY() {
        return (int)4L;
    }
    public static int MEDIA_READ_WRITE() {
        return (int)8L;
    }
    public static int MEDIA_WRITE_PROTECTED() {
        return (int)256L;
    }
    public static int STORAGE_FAILURE_PREDICTION_CONFIG_V1() {
        return (int)1L;
    }
    public static int SRB_TYPE_SCSI_REQUEST_BLOCK() {
        return (int)0L;
    }
    public static int SRB_TYPE_STORAGE_REQUEST_BLOCK() {
        return (int)1L;
    }
    public static int STORAGE_ADDRESS_TYPE_BTL8() {
        return (int)0L;
    }
    public static int STORAGE_RPMB_DESCRIPTOR_VERSION_1() {
        return (int)1L;
    }
    public static int STORAGE_RPMB_MINIMUM_RELIABLE_WRITE_SIZE() {
        return (int)512L;
    }
    public static int STORAGE_CRYPTO_CAPABILITY_VERSION_1() {
        return (int)1L;
    }
    public static int STORAGE_CRYPTO_DESCRIPTOR_VERSION_1() {
        return (int)1L;
    }
    public static int STORAGE_TEMPERATURE_VALUE_NOT_REPORTED() {
        return (int)32768L;
    }
    public static int STORAGE_TEMPERATURE_THRESHOLD_FLAG_ADAPTER_REQUEST() {
        return (int)1L;
    }
    public static int STORAGE_COMPONENT_ROLE_CACHE() {
        return (int)1L;
    }
    public static int STORAGE_COMPONENT_ROLE_TIERING() {
        return (int)2L;
    }
    public static int STORAGE_COMPONENT_ROLE_DATA() {
        return (int)4L;
    }
    public static int STORAGE_ATTRIBUTE_BYTE_ADDRESSABLE_IO() {
        return (int)1L;
    }
    public static int STORAGE_ATTRIBUTE_BLOCK_IO() {
        return (int)2L;
    }
    public static int STORAGE_ATTRIBUTE_DYNAMIC_PERSISTENCE() {
        return (int)4L;
    }
    public static int STORAGE_ATTRIBUTE_VOLATILE() {
        return (int)8L;
    }
    public static int STORAGE_ATTRIBUTE_ASYNC_EVENT_NOTIFICATION() {
        return (int)16L;
    }
    public static int STORAGE_ATTRIBUTE_PERF_SIZE_INDEPENDENT() {
        return (int)32L;
    }
    public static int STORAGE_DEVICE_MAX_OPERATIONAL_STATUS() {
        return (int)16L;
    }
    public static int DEVICE_DSM_FLAG_ENTIRE_DATA_SET_RANGE() {
        return (int)1L;
    }
    public static int DEVICE_DSM_FLAG_TRIM_BYPASS_RZAT() {
        return (int)1073741824L;
    }
    public static int DEVICE_DSM_NOTIFY_FLAG_BEGIN() {
        return (int)1L;
    }
    public static int DEVICE_DSM_NOTIFY_FLAG_END() {
        return (int)2L;
    }
    public static int STORAGE_OFFLOAD_MAX_TOKEN_LENGTH() {
        return (int)512L;
    }
    public static int STORAGE_OFFLOAD_TOKEN_ID_LENGTH() {
        return (int)504L;
    }
    public static int STORAGE_OFFLOAD_READ_RANGE_TRUNCATED() {
        return (int)1L;
    }
    public static int STORAGE_OFFLOAD_WRITE_RANGE_TRUNCATED() {
        return (int)1L;
    }
    public static int STORAGE_OFFLOAD_TOKEN_INVALID() {
        return (int)2L;
    }
    public static int DEVICE_DSM_FLAG_ALLOCATION_CONSOLIDATEABLE_ONLY() {
        return (int)1073741824L;
    }
    public static int DEVICE_DSM_PARAMETERS_V1() {
        return (int)1L;
    }
    public static int DEVICE_DSM_FLAG_REPAIR_INPUT_TOPOLOGY_ID_PRESENT() {
        return (int)1073741824L;
    }
    public static int DEVICE_DSM_FLAG_REPAIR_OUTPUT_PARITY_EXTENT() {
        return (int)536870912L;
    }
    public static int DEVICE_DSM_FLAG_SCRUB_SKIP_IN_SYNC() {
        return (int)268435456L;
    }
    public static int DEVICE_DSM_FLAG_SCRUB_OUTPUT_PARITY_EXTENT() {
        return (int)536870912L;
    }
    public static int DEVICE_DSM_FLAG_PHYSICAL_ADDRESSES_OMIT_TOTAL_RANGES() {
        return (int)268435456L;
    }
    public static int DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1() {
        return (int)1L;
    }
    public static int DEVICE_STORAGE_NO_ERRORS() {
        return (int)1L;
    }
    public static int DEVICE_DSM_RANGE_ERROR_OUTPUT_V1() {
        return (int)1L;
    }
    public static int IOCTL_STORAGE_BC_VERSION() {
        return (int)1L;
    }
    public static int STORAGE_PRIORITY_HINT_SUPPORTED() {
        return (int)1L;
    }
    public static int ERROR_HISTORY_DIRECTORY_ENTRY_DEFAULT_COUNT() {
        return (int)8L;
    }
    public static int DEVICEDUMP_STRUCTURE_VERSION_V1() {
        return (int)1L;
    }
    public static int DEVICEDUMP_MAX_IDSTRING() {
        return (int)32L;
    }
    public static int MAX_FW_BUCKET_ID_LENGTH() {
        return (int)132L;
    }
    public static int DDUMP_FLAG_DATA_READ_FROM_DEVICE() {
        return (int)1L;
    }
    public static int FW_ISSUEID_NO_ISSUE() {
        return (int)0L;
    }
    public static int TC_PUBLIC_DEVICEDUMP_CONTENT_SMART() {
        return (int)1L;
    }
    public static int TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG() {
        return (int)2L;
    }
    public static int TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX() {
        return (int)16L;
    }
    public static int TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH() {
        return (int)16L;
    }
    public static int CDB_SIZE() {
        return (int)16L;
    }
    public static int TELEMETRY_COMMAND_SIZE() {
        return (int)16L;
    }
    public static int DEVICEDUMP_CAP_PRIVATE_SECTION() {
        return (int)1L;
    }
    public static int DEVICEDUMP_CAP_RESTRICTED_SECTION() {
        return (int)2L;
    }
    public static int STORAGE_IDLE_POWERUP_REASON_VERSION_V1() {
        return (int)1L;
    }
    public static int STORAGE_DEVICE_POWER_CAP_VERSION_V1() {
        return (int)1L;
    }
    public static int STORAGE_EVENT_NOTIFICATION_VERSION_V1() {
        return (int)1L;
    }
    public static int STORAGE_EVENT_MEDIA_STATUS() {
        return (int)1L;
    }
    public static int STORAGE_EVENT_DEVICE_STATUS() {
        return (int)2L;
    }
    public static int STORAGE_EVENT_DEVICE_OPERATION() {
        return (int)4L;
    }
    public static int READ_COPY_NUMBER_KEY() {
        return (int)1380142592L;
    }
    public static int READ_COPY_NUMBER_BYPASS_CACHE_FLAG() {
        return (int)256L;
    }
    public static int STORAGE_HW_FIRMWARE_REQUEST_FLAG_CONTROLLER() {
        return (int)1L;
    }
    public static int STORAGE_HW_FIRMWARE_REQUEST_FLAG_LAST_SEGMENT() {
        return (int)2L;
    }
    public static int STORAGE_HW_FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT() {
        return (int)4L;
    }
    public static int STORAGE_HW_FIRMWARE_INVALID_SLOT() {
        return (int)255L;
    }
    public static int STORAGE_HW_FIRMWARE_REVISION_LENGTH() {
        return (int)16L;
    }
    public static int STORAGE_PROTOCOL_STRUCTURE_VERSION() {
        return (int)1L;
    }
    public static int STORAGE_PROTOCOL_STATUS_PENDING() {
        return (int)0L;
    }
    public static int STORAGE_PROTOCOL_STATUS_SUCCESS() {
        return (int)1L;
    }
    public static int STORAGE_PROTOCOL_STATUS_ERROR() {
        return (int)2L;
    }
    public static int STORAGE_PROTOCOL_STATUS_INVALID_REQUEST() {
        return (int)3L;
    }
    public static int STORAGE_PROTOCOL_STATUS_NO_DEVICE() {
        return (int)4L;
    }
    public static int STORAGE_PROTOCOL_STATUS_BUSY() {
        return (int)5L;
    }
    public static int STORAGE_PROTOCOL_STATUS_DATA_OVERRUN() {
        return (int)6L;
    }
    public static int STORAGE_PROTOCOL_STATUS_INSUFFICIENT_RESOURCES() {
        return (int)7L;
    }
    public static int STORAGE_PROTOCOL_STATUS_THROTTLED_REQUEST() {
        return (int)8L;
    }
    public static int STORAGE_PROTOCOL_STATUS_NOT_SUPPORTED() {
        return (int)255L;
    }
    public static int STORAGE_PROTOCOL_COMMAND_LENGTH_NVME() {
        return (int)64L;
    }
    public static int STORAGE_PROTOCOL_SPECIFIC_NVME_ADMIN_COMMAND() {
        return (int)1L;
    }
    public static int STORAGE_PROTOCOL_SPECIFIC_NVME_NVM_COMMAND() {
        return (int)2L;
    }
    public static int STORATTRIBUTE_NONE() {
        return (int)0L;
    }
    public static int STORATTRIBUTE_MANAGEMENT_STATE() {
        return (int)1L;
    }
    public static int IOCTL_SCMBUS_DEVICE_FUNCTION_BASE() {
        return (int)0L;
    }
    public static int IOCTL_SCM_LOGICAL_DEVICE_FUNCTION_BASE() {
        return (int)768L;
    }
    public static int IOCTL_SCM_PHYSICAL_DEVICE_FUNCTION_BASE() {
        return (int)1536L;
    }
    public static int SCM_MAX_SYMLINK_LEN_IN_CHARS() {
        return (int)256L;
    }
    public static int MAX_INTERFACE_CODES() {
        return (int)8L;
    }
    public static int SCM_PD_FIRMWARE_REVISION_LENGTH_BYTES() {
        return (int)32L;
    }
    public static int SCM_PD_PROPERTY_NAME_LENGTH_IN_CHARS() {
        return (int)128L;
    }
    public static int SCM_PD_MAX_OPERATIONAL_STATUS() {
        return (int)16L;
    }
    public static int SCM_PD_FIRMWARE_LAST_DOWNLOAD() {
        return (int)1L;
    }
    public static int PARTITION_ENTRY_UNUSED() {
        return (int)0L;
    }
    public static int PARTITION_FAT_12() {
        return (int)1L;
    }
    public static int PARTITION_XENIX_1() {
        return (int)2L;
    }
    public static int PARTITION_XENIX_2() {
        return (int)3L;
    }
    public static int PARTITION_FAT_16() {
        return (int)4L;
    }
    public static int PARTITION_EXTENDED() {
        return (int)5L;
    }
    public static int PARTITION_HUGE() {
        return (int)6L;
    }
    public static int PARTITION_IFS() {
        return (int)7L;
    }
    public static int PARTITION_OS2BOOTMGR() {
        return (int)10L;
    }
    public static int PARTITION_FAT32() {
        return (int)11L;
    }
    public static int PARTITION_FAT32_XINT13() {
        return (int)12L;
    }
    public static int PARTITION_XINT13() {
        return (int)14L;
    }
    public static int PARTITION_XINT13_EXTENDED() {
        return (int)15L;
    }
    public static int PARTITION_MSFT_RECOVERY() {
        return (int)39L;
    }
    public static int PARTITION_MAIN_OS() {
        return (int)40L;
    }
    public static int PARTIITON_OS_DATA() {
        return (int)41L;
    }
    public static int PARTITION_PRE_INSTALLED() {
        return (int)42L;
    }
    public static int PARTITION_BSP() {
        return (int)43L;
    }
    public static int PARTITION_DPP() {
        return (int)44L;
    }
    public static int PARTITION_WINDOWS_SYSTEM() {
        return (int)45L;
    }
    public static int PARTITION_PREP() {
        return (int)65L;
    }
    public static int PARTITION_LDM() {
        return (int)66L;
    }
    public static int PARTITION_DM() {
        return (int)84L;
    }
    public static int PARTITION_EZDRIVE() {
        return (int)85L;
    }
    public static int PARTITION_UNIX() {
        return (int)99L;
    }
    public static int PARTITION_SPACES_DATA() {
        return (int)215L;
    }
    public static int PARTITION_SPACES() {
        return (int)231L;
    }
    public static int PARTITION_GPT() {
        return (int)238L;
    }
    public static int PARTITION_SYSTEM() {
        return (int)239L;
    }
    public static int VALID_NTFT() {
        return (int)192L;
    }
    public static int PARTITION_NTFT() {
        return (int)128L;
    }
    public static int HIST_NO_OF_BUCKETS() {
        return (int)24L;
    }
    public static int DISK_LOGGING_START() {
        return (int)0L;
    }
    public static int DISK_LOGGING_STOP() {
        return (int)1L;
    }
    public static int DISK_LOGGING_DUMP() {
        return (int)2L;
    }
    public static int DISK_BINNING() {
        return (int)3L;
    }
    public static int CAP_ATA_ID_CMD() {
        return (int)1L;
    }
    public static int CAP_ATAPI_ID_CMD() {
        return (int)2L;
    }
    public static int CAP_SMART_CMD() {
        return (int)4L;
    }
    public static int ATAPI_ID_CMD() {
        return (int)161L;
    }
    public static int ID_CMD() {
        return (int)236L;
    }
    public static int SMART_CMD() {
        return (int)176L;
    }
    public static int SMART_CYL_LOW() {
        return (int)79L;
    }
    public static int SMART_CYL_HI() {
        return (int)194L;
    }
    public static int SMART_NO_ERROR() {
        return (int)0L;
    }
    public static int SMART_IDE_ERROR() {
        return (int)1L;
    }
    public static int SMART_INVALID_FLAG() {
        return (int)2L;
    }
    public static int SMART_INVALID_COMMAND() {
        return (int)3L;
    }
    public static int SMART_INVALID_BUFFER() {
        return (int)4L;
    }
    public static int SMART_INVALID_DRIVE() {
        return (int)5L;
    }
    public static int SMART_INVALID_IOCTL() {
        return (int)6L;
    }
    public static int SMART_ERROR_NO_MEM() {
        return (int)7L;
    }
    public static int SMART_INVALID_REGISTER() {
        return (int)8L;
    }
    public static int SMART_NOT_SUPPORTED() {
        return (int)9L;
    }
    public static int SMART_NO_IDE_DEVICE() {
        return (int)10L;
    }
    public static int SMART_OFFLINE_ROUTINE_OFFLINE() {
        return (int)0L;
    }
    public static int SMART_SHORT_SELFTEST_OFFLINE() {
        return (int)1L;
    }
    public static int SMART_EXTENDED_SELFTEST_OFFLINE() {
        return (int)2L;
    }
    public static int SMART_ABORT_OFFLINE_SELFTEST() {
        return (int)127L;
    }
    public static int SMART_SHORT_SELFTEST_CAPTIVE() {
        return (int)129L;
    }
    public static int SMART_EXTENDED_SELFTEST_CAPTIVE() {
        return (int)130L;
    }
    public static int READ_ATTRIBUTE_BUFFER_SIZE() {
        return (int)512L;
    }
    public static int IDENTIFY_BUFFER_SIZE() {
        return (int)512L;
    }
    public static int READ_THRESHOLD_BUFFER_SIZE() {
        return (int)512L;
    }
    public static int SMART_LOG_SECTOR_SIZE() {
        return (int)512L;
    }
    public static int READ_ATTRIBUTES() {
        return (int)208L;
    }
    public static int READ_THRESHOLDS() {
        return (int)209L;
    }
    public static int ENABLE_DISABLE_AUTOSAVE() {
        return (int)210L;
    }
    public static int SAVE_ATTRIBUTE_VALUES() {
        return (int)211L;
    }
    public static int EXECUTE_OFFLINE_DIAGS() {
        return (int)212L;
    }
    public static int SMART_READ_LOG() {
        return (int)213L;
    }
    public static int SMART_WRITE_LOG() {
        return (int)214L;
    }
    public static int ENABLE_SMART() {
        return (int)216L;
    }
    public static int DISABLE_SMART() {
        return (int)217L;
    }
    public static int RETURN_SMART_STATUS() {
        return (int)218L;
    }
    public static int ENABLE_DISABLE_AUTO_OFFLINE() {
        return (int)219L;
    }
    public static int DISK_ATTRIBUTE_OFFLINE() {
        return (int)1L;
    }
    public static int DISK_ATTRIBUTE_READ_ONLY() {
        return (int)2L;
    }
    public static int MAX_VOLUME_ID_SIZE() {
        return (int)36L;
    }
    public static int MAX_VOLUME_TEMPLATE_SIZE() {
        return (int)40L;
    }
    public static int VENDOR_ID_LENGTH() {
        return (int)8L;
    }
    public static int PRODUCT_ID_LENGTH() {
        return (int)16L;
    }
    public static int REVISION_LENGTH() {
        return (int)4L;
    }
    public static int SERIAL_NUMBER_LENGTH() {
        return (int)32L;
    }
    public static int CHANGER_BAR_CODE_SCANNER_INSTALLED() {
        return (int)1L;
    }
    public static int CHANGER_INIT_ELEM_STAT_WITH_RANGE() {
        return (int)2L;
    }
    public static int CHANGER_CLOSE_IEPORT() {
        return (int)4L;
    }
    public static int CHANGER_OPEN_IEPORT() {
        return (int)8L;
    }
    public static int CHANGER_STATUS_NON_VOLATILE() {
        return (int)16L;
    }
    public static int CHANGER_EXCHANGE_MEDIA() {
        return (int)32L;
    }
    public static int CHANGER_CLEANER_SLOT() {
        return (int)64L;
    }
    public static int CHANGER_LOCK_UNLOCK() {
        return (int)128L;
    }
    public static int CHANGER_CARTRIDGE_MAGAZINE() {
        return (int)256L;
    }
    public static int CHANGER_MEDIUM_FLIP() {
        return (int)512L;
    }
    public static int CHANGER_POSITION_TO_ELEMENT() {
        return (int)1024L;
    }
    public static int CHANGER_REPORT_IEPORT_STATE() {
        return (int)2048L;
    }
    public static int CHANGER_STORAGE_DRIVE() {
        return (int)4096L;
    }
    public static int CHANGER_STORAGE_IEPORT() {
        return (int)8192L;
    }
    public static int CHANGER_STORAGE_SLOT() {
        return (int)16384L;
    }
    public static int CHANGER_STORAGE_TRANSPORT() {
        return (int)32768L;
    }
    public static int CHANGER_DRIVE_CLEANING_REQUIRED() {
        return (int)65536L;
    }
    public static int CHANGER_PREDISMOUNT_EJECT_REQUIRED() {
        return (int)131072L;
    }
    public static int CHANGER_CLEANER_ACCESS_NOT_VALID() {
        return (int)262144L;
    }
    public static int CHANGER_PREMOUNT_EJECT_REQUIRED() {
        return (int)524288L;
    }
    public static int CHANGER_VOLUME_IDENTIFICATION() {
        return (int)1048576L;
    }
    public static int CHANGER_VOLUME_SEARCH() {
        return (int)2097152L;
    }
    public static int CHANGER_VOLUME_ASSERT() {
        return (int)4194304L;
    }
    public static int CHANGER_VOLUME_REPLACE() {
        return (int)8388608L;
    }
    public static int CHANGER_VOLUME_UNDEFINE() {
        return (int)16777216L;
    }
    public static int CHANGER_SERIAL_NUMBER_VALID() {
        return (int)67108864L;
    }
    public static int CHANGER_DEVICE_REINITIALIZE_CAPABLE() {
        return (int)134217728L;
    }
    public static int CHANGER_KEYPAD_ENABLE_DISABLE() {
        return (int)268435456L;
    }
    public static int CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS() {
        return (int)536870912L;
    }
    public static int CHANGER_TO_TRANSPORT() {
        return (int)1L;
    }
    public static int CHANGER_TO_SLOT() {
        return (int)2L;
    }
    public static int CHANGER_TO_IEPORT() {
        return (int)4L;
    }
    public static int CHANGER_TO_DRIVE() {
        return (int)8L;
    }
    public static int LOCK_UNLOCK_IEPORT() {
        return (int)1L;
    }
    public static int LOCK_UNLOCK_DOOR() {
        return (int)2L;
    }
    public static int LOCK_UNLOCK_KEYPAD() {
        return (int)4L;
    }
    public static int LOCK_ELEMENT() {
        return (int)0L;
    }
    public static int UNLOCK_ELEMENT() {
        return (int)1L;
    }
    public static int EXTEND_IEPORT() {
        return (int)2L;
    }
    public static int RETRACT_IEPORT() {
        return (int)3L;
    }
    public static int ELEMENT_STATUS_FULL() {
        return (int)1L;
    }
    public static int ELEMENT_STATUS_IMPEXP() {
        return (int)2L;
    }
    public static int ELEMENT_STATUS_EXCEPT() {
        return (int)4L;
    }
    public static int ELEMENT_STATUS_ACCESS() {
        return (int)8L;
    }
    public static int ELEMENT_STATUS_EXENAB() {
        return (int)16L;
    }
    public static int ELEMENT_STATUS_INENAB() {
        return (int)32L;
    }
    public static int ELEMENT_STATUS_PRODUCT_DATA() {
        return (int)64L;
    }
    public static int ELEMENT_STATUS_LUN_VALID() {
        return (int)4096L;
    }
    public static int ELEMENT_STATUS_ID_VALID() {
        return (int)8192L;
    }
    public static int ELEMENT_STATUS_NOT_BUS() {
        return (int)32768L;
    }
    public static int ELEMENT_STATUS_INVERT() {
        return (int)4194304L;
    }
    public static int ELEMENT_STATUS_SVALID() {
        return (int)8388608L;
    }
    public static int ELEMENT_STATUS_PVOLTAG() {
        return (int)268435456L;
    }
    public static int ELEMENT_STATUS_AVOLTAG() {
        return (int)536870912L;
    }
    public static int ERROR_LABEL_UNREADABLE() {
        return (int)1L;
    }
    public static int ERROR_LABEL_QUESTIONABLE() {
        return (int)2L;
    }
    public static int ERROR_SLOT_NOT_PRESENT() {
        return (int)4L;
    }
    public static int ERROR_DRIVE_NOT_INSTALLED() {
        return (int)8L;
    }
    public static int ERROR_TRAY_MALFUNCTION() {
        return (int)16L;
    }
    public static int ERROR_INIT_STATUS_NEEDED() {
        return (int)17L;
    }
    public static int SEARCH_ALL() {
        return (int)0L;
    }
    public static int SEARCH_PRIMARY() {
        return (int)1L;
    }
    public static int SEARCH_ALTERNATE() {
        return (int)2L;
    }
    public static int SEARCH_ALL_NO_SEQ() {
        return (int)4L;
    }
    public static int SEARCH_PRI_NO_SEQ() {
        return (int)5L;
    }
    public static int SEARCH_ALT_NO_SEQ() {
        return (int)6L;
    }
    public static int ASSERT_PRIMARY() {
        return (int)8L;
    }
    public static int ASSERT_ALTERNATE() {
        return (int)9L;
    }
    public static int REPLACE_PRIMARY() {
        return (int)10L;
    }
    public static int REPLACE_ALTERNATE() {
        return (int)11L;
    }
    public static int UNDEFINE_PRIMARY() {
        return (int)12L;
    }
    public static int UNDEFINE_ALTERNATE() {
        return (int)13L;
    }
    public static int GET_VOLUME_BITMAP_FLAG_MASK_METADATA() {
        return (int)1L;
    }
    public static int FLAG_USN_TRACK_MODIFIED_RANGES_ENABLE() {
        return (int)1L;
    }
    public static int FILE_PREFETCH_TYPE_FOR_CREATE() {
        return (int)1L;
    }
    public static int FILE_PREFETCH_TYPE_FOR_DIRENUM() {
        return (int)2L;
    }
    public static int FILE_PREFETCH_TYPE_FOR_CREATE_EX() {
        return (int)3L;
    }
    public static int FILE_PREFETCH_TYPE_FOR_DIRENUM_EX() {
        return (int)4L;
    }
    public static int FILE_PREFETCH_TYPE_MAX() {
        return (int)4L;
    }
    public static int FILESYSTEM_STATISTICS_TYPE_NTFS() {
        return (int)1L;
    }
    public static int FILESYSTEM_STATISTICS_TYPE_FAT() {
        return (int)2L;
    }
    public static int FILESYSTEM_STATISTICS_TYPE_EXFAT() {
        return (int)3L;
    }
    public static int FILESYSTEM_STATISTICS_TYPE_REFS() {
        return (int)4L;
    }
    public static int FILE_SET_ENCRYPTION() {
        return (int)1L;
    }
    public static int FILE_CLEAR_ENCRYPTION() {
        return (int)2L;
    }
    public static int STREAM_SET_ENCRYPTION() {
        return (int)3L;
    }
    public static int STREAM_CLEAR_ENCRYPTION() {
        return (int)4L;
    }
    public static int MAXIMUM_ENCRYPTION_VALUE() {
        return (int)4L;
    }
    public static int ENCRYPTED_DATA_INFO_SPARSE_FILE() {
        return (int)1L;
    }
    public static int COPYFILE_SIS_LINK() {
        return (int)1L;
    }
    public static int COPYFILE_SIS_REPLACE() {
        return (int)2L;
    }
    public static int COPYFILE_SIS_FLAGS() {
        return (int)3L;
    }
    public static int TXFS_RM_FLAG_LOGGING_MODE() {
        return (int)1L;
    }
    public static int TXFS_RM_FLAG_RENAME_RM() {
        return (int)2L;
    }
    public static int TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX() {
        return (int)4L;
    }
    public static int TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN() {
        return (int)8L;
    }
    public static int TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS() {
        return (int)16L;
    }
    public static int TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT() {
        return (int)32L;
    }
    public static int TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE() {
        return (int)64L;
    }
    public static int TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX() {
        return (int)128L;
    }
    public static int TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN() {
        return (int)256L;
    }
    public static int TXFS_RM_FLAG_GROW_LOG() {
        return (int)1024L;
    }
    public static int TXFS_RM_FLAG_SHRINK_LOG() {
        return (int)2048L;
    }
    public static int TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE() {
        return (int)4096L;
    }
    public static int TXFS_RM_FLAG_PRESERVE_CHANGES() {
        return (int)8192L;
    }
    public static int TXFS_RM_FLAG_RESET_RM_AT_NEXT_START() {
        return (int)16384L;
    }
    public static int TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START() {
        return (int)32768L;
    }
    public static int TXFS_RM_FLAG_PREFER_CONSISTENCY() {
        return (int)65536L;
    }
    public static int TXFS_RM_FLAG_PREFER_AVAILABILITY() {
        return (int)131072L;
    }
    public static int TXFS_TRANSACTION_STATE_NONE() {
        return (int)0L;
    }
    public static int TXFS_TRANSACTION_STATE_ACTIVE() {
        return (int)1L;
    }
    public static int TXFS_TRANSACTION_STATE_PREPARED() {
        return (int)2L;
    }
    public static int TXFS_TRANSACTION_STATE_NOTACTIVE() {
        return (int)3L;
    }
    public static int TXFS_RM_STATE_NOT_STARTED() {
        return (int)0L;
    }
    public static int TXFS_RM_STATE_STARTING() {
        return (int)1L;
    }
    public static int TXFS_RM_STATE_ACTIVE() {
        return (int)2L;
    }
    public static int TXFS_RM_STATE_SHUTTING_DOWN() {
        return (int)3L;
    }
    public static int TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN() {
        return (int)1L;
    }
    public static int TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK() {
        return (int)2L;
    }
    public static int TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX() {
        return (int)1L;
    }
    public static int TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN() {
        return (int)2L;
    }
    public static int TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE() {
        return (int)4L;
    }
    public static int TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS() {
        return (int)8L;
    }
    public static int TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT() {
        return (int)16L;
    }
    public static int TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE() {
        return (int)32L;
    }
    public static int TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX() {
        return (int)64L;
    }
    public static int TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN() {
        return (int)128L;
    }
    public static int TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT() {
        return (int)512L;
    }
    public static int TXFS_START_RM_FLAG_LOGGING_MODE() {
        return (int)1024L;
    }
    public static int TXFS_START_RM_FLAG_PRESERVE_CHANGES() {
        return (int)2048L;
    }
    public static int TXFS_START_RM_FLAG_PREFER_CONSISTENCY() {
        return (int)4096L;
    }
    public static int TXFS_START_RM_FLAG_PREFER_AVAILABILITY() {
        return (int)8192L;
    }
    public static int TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_CREATED() {
        return (int)1L;
    }
    public static int TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_DELETED() {
        return (int)2L;
    }
    public static int TXFS_SAVEPOINT_SET() {
        return (int)1L;
    }
    public static int TXFS_SAVEPOINT_ROLLBACK() {
        return (int)2L;
    }
    public static int TXFS_SAVEPOINT_CLEAR() {
        return (int)4L;
    }
    public static int TXFS_SAVEPOINT_CLEAR_ALL() {
        return (int)16L;
    }
    public static int REQUEST_OPLOCK_CURRENT_VERSION() {
        return (int)1L;
    }
    public static int QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_HOST_VOLUMES() {
        return (int)1L;
    }
    public static int QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_GUEST_VOLUMES() {
        return (int)2L;
    }
    public static int SD_GLOBAL_CHANGE_TYPE_MACHINE_SID() {
        return (int)1L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_PAGE_FILE() {
        return (int)1L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_DENY_DEFRAG_SET() {
        return (int)2L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_FS_SYSTEM_FILE() {
        return (int)4L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_TXF_SYSTEM_FILE() {
        return (int)8L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_DATA() {
        return (int)16777216L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_INDEX() {
        return (int)33554432L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_SYSTEM() {
        return (int)50331648L;
    }
    public static int FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN() {
        return (int)1L;
    }
    public static int FILE_TYPE_NOTIFICATION_FLAG_USAGE_END() {
        return (int)2L;
    }
    public static int CSV_MGMTLOCK_CHECK_VOLUME_REDIRECTED() {
        return (int)1L;
    }
    public static int CSV_QUERY_MDS_PATH_V2_VERSION_1() {
        return (int)1L;
    }
    public static int CSV_QUERY_MDS_PATH_FLAG_STORAGE_ON_THIS_NODE_IS_CONNECTED() {
        return (int)1L;
    }
    public static int CSV_QUERY_MDS_PATH_FLAG_CSV_DIRECT_IO_ENABLED() {
        return (int)2L;
    }
    public static int CSV_QUERY_MDS_PATH_FLAG_SMB_BYPASS_CSV_ENABLED() {
        return (int)4L;
    }
    public static int SET_PURGE_FAILURE_MODE_ENABLED() {
        return (int)1L;
    }
    public static int SET_PURGE_FAILURE_MODE_DISABLED() {
        return (int)2L;
    }
    public static int FILE_REGION_USAGE_VALID_CACHED_DATA() {
        return (int)1L;
    }
    public static int FILE_REGION_USAGE_VALID_NONCACHED_DATA() {
        return (int)2L;
    }
    public static int FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT() {
        return (int)4L;
    }
    public static int FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT() {
        return (int)8L;
    }
    public static int FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT() {
        return (int)16L;
    }
    public static int QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ() {
        return (int)1073741824L;
    }
    public static int QUERY_STORAGE_CLASSES_FLAGS_NO_DEFRAG_VOLUME() {
        return (int)536870912L;
    }
    public static int DUPLICATE_EXTENTS_DATA_EX_SOURCE_ATOMIC() {
        return (int)1L;
    }
    public static int DUPLICATE_EXTENTS_DATA_EX_ASYNC() {
        return (int)2L;
    }
    public static int REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1() {
        return (int)1L;
    }
    public static int REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1() {
        return (int)1L;
    }
    public static int WIM_PROVIDER_HASH_SIZE() {
        return (int)20L;
    }
    public static int PROJFS_PROTOCOL_VERSION() {
        return (int)3L;
    }
    public static int IOCTL_VOLUME_BASE() {
        return (int)86L;
    }
    public static int EFS_TRACKED_OFFSET_HEADER_FLAG() {
        return (int)1L;
    }
    public static int SPACES_TRACKED_OFFSET_HEADER_FLAG() {
        return (int)2L;
    }
    public static int SCARD_ATR_LENGTH() {
        return (int)33L;
    }
    public static int SCARD_PROTOCOL_UNDEFINED() {
        return (int)0L;
    }
    public static int SCARD_PROTOCOL_T0() {
        return (int)1L;
    }
    public static int SCARD_PROTOCOL_T1() {
        return (int)2L;
    }
    public static int SCARD_PROTOCOL_RAW() {
        return (int)65536L;
    }
    public static int SCARD_PROTOCOL_OPTIMAL() {
        return (int)0L;
    }
    public static int SCARD_POWER_DOWN() {
        return (int)0L;
    }
    public static int SCARD_COLD_RESET() {
        return (int)1L;
    }
    public static int SCARD_WARM_RESET() {
        return (int)2L;
    }
    public static int MAXIMUM_ATTR_STRING_LENGTH() {
        return (int)32L;
    }
    public static int MAXIMUM_SMARTCARD_READERS() {
        return (int)10L;
    }
    public static int SCARD_CLASS_VENDOR_INFO() {
        return (int)1L;
    }
    public static int SCARD_CLASS_COMMUNICATIONS() {
        return (int)2L;
    }
    public static int SCARD_CLASS_PROTOCOL() {
        return (int)3L;
    }
    public static int SCARD_CLASS_POWER_MGMT() {
        return (int)4L;
    }
    public static int SCARD_CLASS_SECURITY() {
        return (int)5L;
    }
    public static int SCARD_CLASS_MECHANICAL() {
        return (int)6L;
    }
    public static int SCARD_CLASS_VENDOR_DEFINED() {
        return (int)7L;
    }
    public static int SCARD_CLASS_IFD_PROTOCOL() {
        return (int)8L;
    }
    public static int SCARD_CLASS_ICC_STATE() {
        return (int)9L;
    }
    public static int SCARD_CLASS_PERF() {
        return (int)32766L;
    }
    public static int SCARD_CLASS_SYSTEM() {
        return (int)32767L;
    }
    public static int SCARD_T0_HEADER_LENGTH() {
        return (int)7L;
    }
    public static int SCARD_T0_CMD_LENGTH() {
        return (int)5L;
    }
    public static int SCARD_T1_PROLOGUE_LENGTH() {
        return (int)3L;
    }
    public static int SCARD_T1_EPILOGUE_LENGTH() {
        return (int)2L;
    }
    public static int SCARD_T1_EPILOGUE_LENGTH_LRC() {
        return (int)1L;
    }
    public static int SCARD_T1_MAX_IFS() {
        return (int)254L;
    }
    public static int SCARD_UNKNOWN() {
        return (int)0L;
    }
    public static int SCARD_ABSENT() {
        return (int)1L;
    }
    public static int SCARD_PRESENT() {
        return (int)2L;
    }
    public static int SCARD_SWALLOWED() {
        return (int)3L;
    }
    public static int SCARD_POWERED() {
        return (int)4L;
    }
    public static int SCARD_NEGOTIABLE() {
        return (int)5L;
    }
    public static int SCARD_SPECIFIC() {
        return (int)6L;
    }
    public static int SCARD_READER_SWALLOWS() {
        return (int)1L;
    }
    public static int SCARD_READER_EJECTS() {
        return (int)2L;
    }
    public static int SCARD_READER_CONFISCATES() {
        return (int)4L;
    }
    public static int SCARD_READER_CONTACTLESS() {
        return (int)8L;
    }
    public static int SCARD_READER_TYPE_SERIAL() {
        return (int)1L;
    }
    public static int SCARD_READER_TYPE_PARALELL() {
        return (int)2L;
    }
    public static int SCARD_READER_TYPE_KEYBOARD() {
        return (int)4L;
    }
    public static int SCARD_READER_TYPE_SCSI() {
        return (int)8L;
    }
    public static int SCARD_READER_TYPE_IDE() {
        return (int)16L;
    }
    public static int SCARD_READER_TYPE_USB() {
        return (int)32L;
    }
    public static int SCARD_READER_TYPE_PCMCIA() {
        return (int)64L;
    }
    public static int SCARD_READER_TYPE_TPM() {
        return (int)128L;
    }
    public static int SCARD_READER_TYPE_NFC() {
        return (int)256L;
    }
    public static int SCARD_READER_TYPE_UICC() {
        return (int)512L;
    }
    public static int SCARD_READER_TYPE_NGC() {
        return (int)1024L;
    }
    public static int SCARD_READER_TYPE_EMBEDDEDSE() {
        return (int)2048L;
    }
    public static int SCARD_READER_TYPE_VENDOR() {
        return (int)240L;
    }
    public static int SCARD_SCOPE_USER() {
        return (int)0L;
    }
    public static int SCARD_SCOPE_TERMINAL() {
        return (int)1L;
    }
    public static int SCARD_SCOPE_SYSTEM() {
        return (int)2L;
    }
    public static int SCARD_PROVIDER_PRIMARY() {
        return (int)1L;
    }
    public static int SCARD_PROVIDER_CSP() {
        return (int)2L;
    }
    public static int SCARD_PROVIDER_KSP() {
        return (int)3L;
    }
    public static int SCARD_STATE_UNAWARE() {
        return (int)0L;
    }
    public static int SCARD_STATE_IGNORE() {
        return (int)1L;
    }
    public static int SCARD_STATE_CHANGED() {
        return (int)2L;
    }
    public static int SCARD_STATE_UNKNOWN() {
        return (int)4L;
    }
    public static int SCARD_STATE_UNAVAILABLE() {
        return (int)8L;
    }
    public static int SCARD_STATE_EMPTY() {
        return (int)16L;
    }
    public static int SCARD_STATE_PRESENT() {
        return (int)32L;
    }
    public static int SCARD_STATE_ATRMATCH() {
        return (int)64L;
    }
    public static int SCARD_STATE_EXCLUSIVE() {
        return (int)128L;
    }
    public static int SCARD_STATE_INUSE() {
        return (int)256L;
    }
    public static int SCARD_STATE_MUTE() {
        return (int)512L;
    }
    public static int SCARD_STATE_UNPOWERED() {
        return (int)1024L;
    }
    public static int SCARD_SHARE_EXCLUSIVE() {
        return (int)1L;
    }
    public static int SCARD_SHARE_SHARED() {
        return (int)2L;
    }
    public static int SCARD_SHARE_DIRECT() {
        return (int)3L;
    }
    public static int SCARD_LEAVE_CARD() {
        return (int)0L;
    }
    public static int SCARD_RESET_CARD() {
        return (int)1L;
    }
    public static int SCARD_UNPOWER_CARD() {
        return (int)2L;
    }
    public static int SCARD_EJECT_CARD() {
        return (int)3L;
    }
    public static int SC_DLG_MINIMAL_UI() {
        return (int)1L;
    }
    public static int SC_DLG_NO_UI() {
        return (int)2L;
    }
    public static int SC_DLG_FORCE_UI() {
        return (int)4L;
    }
    public static int SCERR_NOCARDNAME() {
        return (int)16384L;
    }
    public static int SCERR_NOGUIDS() {
        return (int)32768L;
    }
    public static int SCARD_AUDIT_CHV_FAILURE() {
        return (int)0L;
    }
    public static int SCARD_AUDIT_CHV_SUCCESS() {
        return (int)1L;
    }
    public static int DSPRINT_PUBLISH() {
        return (int)1L;
    }
    public static int DSPRINT_UPDATE() {
        return (int)2L;
    }
    public static int DSPRINT_UNPUBLISH() {
        return (int)4L;
    }
    public static int DSPRINT_REPUBLISH() {
        return (int)8L;
    }
    public static int PRINTER_CONTROL_PAUSE() {
        return (int)1L;
    }
    public static int PRINTER_CONTROL_RESUME() {
        return (int)2L;
    }
    public static int PRINTER_CONTROL_PURGE() {
        return (int)3L;
    }
    public static int PRINTER_CONTROL_SET_STATUS() {
        return (int)4L;
    }
    public static int PRINTER_STATUS_PAUSED() {
        return (int)1L;
    }
    public static int PRINTER_STATUS_ERROR() {
        return (int)2L;
    }
    public static int PRINTER_STATUS_PENDING_DELETION() {
        return (int)4L;
    }
    public static int PRINTER_STATUS_PAPER_JAM() {
        return (int)8L;
    }
    public static int PRINTER_STATUS_PAPER_OUT() {
        return (int)16L;
    }
    public static int PRINTER_STATUS_MANUAL_FEED() {
        return (int)32L;
    }
    public static int PRINTER_STATUS_PAPER_PROBLEM() {
        return (int)64L;
    }
    public static int PRINTER_STATUS_OFFLINE() {
        return (int)128L;
    }
    public static int PRINTER_STATUS_IO_ACTIVE() {
        return (int)256L;
    }
    public static int PRINTER_STATUS_BUSY() {
        return (int)512L;
    }
    public static int PRINTER_STATUS_PRINTING() {
        return (int)1024L;
    }
    public static int PRINTER_STATUS_OUTPUT_BIN_FULL() {
        return (int)2048L;
    }
    public static int PRINTER_STATUS_NOT_AVAILABLE() {
        return (int)4096L;
    }
    public static int PRINTER_STATUS_WAITING() {
        return (int)8192L;
    }
    public static int PRINTER_STATUS_PROCESSING() {
        return (int)16384L;
    }
    public static int PRINTER_STATUS_INITIALIZING() {
        return (int)32768L;
    }
    public static int PRINTER_STATUS_WARMING_UP() {
        return (int)65536L;
    }
    public static int PRINTER_STATUS_TONER_LOW() {
        return (int)131072L;
    }
    public static int PRINTER_STATUS_NO_TONER() {
        return (int)262144L;
    }
    public static int PRINTER_STATUS_PAGE_PUNT() {
        return (int)524288L;
    }
    public static int PRINTER_STATUS_USER_INTERVENTION() {
        return (int)1048576L;
    }
    public static int PRINTER_STATUS_OUT_OF_MEMORY() {
        return (int)2097152L;
    }
    public static int PRINTER_STATUS_DOOR_OPEN() {
        return (int)4194304L;
    }
    public static int PRINTER_STATUS_SERVER_UNKNOWN() {
        return (int)8388608L;
    }
    public static int PRINTER_STATUS_POWER_SAVE() {
        return (int)16777216L;
    }
    public static int PRINTER_STATUS_SERVER_OFFLINE() {
        return (int)33554432L;
    }
    public static int PRINTER_STATUS_DRIVER_UPDATE_NEEDED() {
        return (int)67108864L;
    }
    public static int PRINTER_ATTRIBUTE_QUEUED() {
        return (int)1L;
    }
    public static int PRINTER_ATTRIBUTE_DIRECT() {
        return (int)2L;
    }
    public static int PRINTER_ATTRIBUTE_DEFAULT() {
        return (int)4L;
    }
    public static int PRINTER_ATTRIBUTE_SHARED() {
        return (int)8L;
    }
    public static int PRINTER_ATTRIBUTE_NETWORK() {
        return (int)16L;
    }
    public static int PRINTER_ATTRIBUTE_HIDDEN() {
        return (int)32L;
    }
    public static int PRINTER_ATTRIBUTE_LOCAL() {
        return (int)64L;
    }
    public static int PRINTER_ATTRIBUTE_ENABLE_DEVQ() {
        return (int)128L;
    }
    public static int PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS() {
        return (int)256L;
    }
    public static int PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST() {
        return (int)512L;
    }
    public static int PRINTER_ATTRIBUTE_WORK_OFFLINE() {
        return (int)1024L;
    }
    public static int PRINTER_ATTRIBUTE_ENABLE_BIDI() {
        return (int)2048L;
    }
    public static int PRINTER_ATTRIBUTE_RAW_ONLY() {
        return (int)4096L;
    }
    public static int PRINTER_ATTRIBUTE_PUBLISHED() {
        return (int)8192L;
    }
    public static int PRINTER_ATTRIBUTE_FAX() {
        return (int)16384L;
    }
    public static int PRINTER_ATTRIBUTE_TS() {
        return (int)32768L;
    }
    public static int PRINTER_ATTRIBUTE_PUSHED_USER() {
        return (int)131072L;
    }
    public static int PRINTER_ATTRIBUTE_PUSHED_MACHINE() {
        return (int)262144L;
    }
    public static int PRINTER_ATTRIBUTE_MACHINE() {
        return (int)524288L;
    }
    public static int PRINTER_ATTRIBUTE_FRIENDLY_NAME() {
        return (int)1048576L;
    }
    public static int PRINTER_ATTRIBUTE_TS_GENERIC_DRIVER() {
        return (int)2097152L;
    }
    public static int PRINTER_ATTRIBUTE_PER_USER() {
        return (int)4194304L;
    }
    public static int PRINTER_ATTRIBUTE_ENTERPRISE_CLOUD() {
        return (int)8388608L;
    }
    public static int NO_PRIORITY() {
        return (int)0L;
    }
    public static int MAX_PRIORITY() {
        return (int)99L;
    }
    public static int MIN_PRIORITY() {
        return (int)1L;
    }
    public static int DEF_PRIORITY() {
        return (int)1L;
    }
    public static int JOB_CONTROL_PAUSE() {
        return (int)1L;
    }
    public static int JOB_CONTROL_RESUME() {
        return (int)2L;
    }
    public static int JOB_CONTROL_CANCEL() {
        return (int)3L;
    }
    public static int JOB_CONTROL_RESTART() {
        return (int)4L;
    }
    public static int JOB_CONTROL_DELETE() {
        return (int)5L;
    }
    public static int JOB_CONTROL_SENT_TO_PRINTER() {
        return (int)6L;
    }
    public static int JOB_CONTROL_LAST_PAGE_EJECTED() {
        return (int)7L;
    }
    public static int JOB_CONTROL_RETAIN() {
        return (int)8L;
    }
    public static int JOB_CONTROL_RELEASE() {
        return (int)9L;
    }
    public static int JOB_STATUS_PAUSED() {
        return (int)1L;
    }
    public static int JOB_STATUS_ERROR() {
        return (int)2L;
    }
    public static int JOB_STATUS_DELETING() {
        return (int)4L;
    }
    public static int JOB_STATUS_SPOOLING() {
        return (int)8L;
    }
    public static int JOB_STATUS_PRINTING() {
        return (int)16L;
    }
    public static int JOB_STATUS_OFFLINE() {
        return (int)32L;
    }
    public static int JOB_STATUS_PAPEROUT() {
        return (int)64L;
    }
    public static int JOB_STATUS_PRINTED() {
        return (int)128L;
    }
    public static int JOB_STATUS_DELETED() {
        return (int)256L;
    }
    public static int JOB_STATUS_BLOCKED_DEVQ() {
        return (int)512L;
    }
    public static int JOB_STATUS_USER_INTERVENTION() {
        return (int)1024L;
    }
    public static int JOB_STATUS_RESTART() {
        return (int)2048L;
    }
    public static int JOB_STATUS_COMPLETE() {
        return (int)4096L;
    }
    public static int JOB_STATUS_RETAINED() {
        return (int)8192L;
    }
}


