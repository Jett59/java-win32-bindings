// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PGET_RUNTIME_FUNCTION_CALLBACK {

    java.lang.foreign.Addressable apply(long _x0, java.lang.foreign.MemoryAddress _x1);
    static MemorySegment allocate(PGET_RUNTIME_FUNCTION_CALLBACK fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PGET_RUNTIME_FUNCTION_CALLBACK.class, fi, constants$6.PGET_RUNTIME_FUNCTION_CALLBACK$FUNC, session);
    }
    static PGET_RUNTIME_FUNCTION_CALLBACK ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (long __x0, java.lang.foreign.MemoryAddress __x1) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$6.PGET_RUNTIME_FUNCTION_CALLBACK$MH.invokeExact((Addressable)symbol, __x0, (java.lang.foreign.Addressable)__x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


