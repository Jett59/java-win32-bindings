// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagGESTURENOTIFYSTRUCT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndTarget"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("x"),
            Constants$root.C_SHORT$LAYOUT.withName("y")
        ).withName("ptsLocation"),
        Constants$root.C_LONG$LAYOUT.withName("dwInstanceID")
    ).withName("tagGESTURENOTIFYSTRUCT");
    public static MemoryLayout $LAYOUT() {
        return tagGESTURENOTIFYSTRUCT.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagGESTURENOTIFYSTRUCT.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagGESTURENOTIFYSTRUCT.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        tagGESTURENOTIFYSTRUCT.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagGESTURENOTIFYSTRUCT.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagGESTURENOTIFYSTRUCT.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return tagGESTURENOTIFYSTRUCT.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)tagGESTURENOTIFYSTRUCT.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        tagGESTURENOTIFYSTRUCT.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)tagGESTURENOTIFYSTRUCT.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        tagGESTURENOTIFYSTRUCT.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndTarget$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndTarget"));
    public static VarHandle hwndTarget$VH() {
        return tagGESTURENOTIFYSTRUCT.hwndTarget$VH;
    }
    public static MemoryAddress hwndTarget$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagGESTURENOTIFYSTRUCT.hwndTarget$VH.get(seg);
    }
    public static void hwndTarget$set( MemorySegment seg, MemoryAddress x) {
        tagGESTURENOTIFYSTRUCT.hwndTarget$VH.set(seg, x);
    }
    public static MemoryAddress hwndTarget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagGESTURENOTIFYSTRUCT.hwndTarget$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndTarget$set(MemorySegment seg, long index, MemoryAddress x) {
        tagGESTURENOTIFYSTRUCT.hwndTarget$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ptsLocation$slice(MemorySegment seg) {
        return seg.asSlice(16, 4);
    }
    static final VarHandle dwInstanceID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwInstanceID"));
    public static VarHandle dwInstanceID$VH() {
        return tagGESTURENOTIFYSTRUCT.dwInstanceID$VH;
    }
    public static int dwInstanceID$get(MemorySegment seg) {
        return (int)tagGESTURENOTIFYSTRUCT.dwInstanceID$VH.get(seg);
    }
    public static void dwInstanceID$set( MemorySegment seg, int x) {
        tagGESTURENOTIFYSTRUCT.dwInstanceID$VH.set(seg, x);
    }
    public static int dwInstanceID$get(MemorySegment seg, long index) {
        return (int)tagGESTURENOTIFYSTRUCT.dwInstanceID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwInstanceID$set(MemorySegment seg, long index, int x) {
        tagGESTURENOTIFYSTRUCT.dwInstanceID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


