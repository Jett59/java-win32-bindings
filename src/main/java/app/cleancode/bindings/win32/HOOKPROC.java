// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface HOOKPROC {

    long apply(int code, long wParam, long lParam);
    static MemorySegment allocate(HOOKPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(HOOKPROC.class, fi, constants$328.HOOKPROC$FUNC, session);
    }
    static HOOKPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _code, long _wParam, long _lParam) -> {
            try {
                return (long)constants$328.HOOKPROC$MH.invokeExact((Addressable)symbol, _code, _wParam, _lParam);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


