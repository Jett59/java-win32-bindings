// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$9 {

    static final FunctionDescriptor ReadNoFence16$FUNC = FunctionDescriptor.of(Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadNoFence16$MH = RuntimeHelper.downcallHandle(
        "ReadNoFence16",
        constants$9.ReadNoFence16$FUNC
    );
    static final FunctionDescriptor WriteRelease16$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle WriteRelease16$MH = RuntimeHelper.downcallHandle(
        "WriteRelease16",
        constants$9.WriteRelease16$FUNC
    );
    static final FunctionDescriptor WriteNoFence16$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle WriteNoFence16$MH = RuntimeHelper.downcallHandle(
        "WriteNoFence16",
        constants$9.WriteNoFence16$FUNC
    );
    static final FunctionDescriptor ReadAcquire$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadAcquire$MH = RuntimeHelper.downcallHandle(
        "ReadAcquire",
        constants$9.ReadAcquire$FUNC
    );
    static final FunctionDescriptor ReadNoFence$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadNoFence$MH = RuntimeHelper.downcallHandle(
        "ReadNoFence",
        constants$9.ReadNoFence$FUNC
    );
    static final FunctionDescriptor WriteRelease$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle WriteRelease$MH = RuntimeHelper.downcallHandle(
        "WriteRelease",
        constants$9.WriteRelease$FUNC
    );
}


