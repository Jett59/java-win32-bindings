// Generated by jextract

package app.cleancode.bindings.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class WINDOWS_26 extends WINDOWS_25 {

    public static MemorySegment szOID_RDN_DUMMY_SIGNER() {
        return constants$650.szOID_RDN_DUMMY_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_APPLICATION_CERT_POLICIES() {
        return constants$651.szOID_APPLICATION_CERT_POLICIES$SEGMENT;
    }
    public static MemorySegment szOID_APPLICATION_POLICY_MAPPINGS() {
        return constants$651.szOID_APPLICATION_POLICY_MAPPINGS$SEGMENT;
    }
    public static MemorySegment szOID_APPLICATION_POLICY_CONSTRAINTS() {
        return constants$651.szOID_APPLICATION_POLICY_CONSTRAINTS$SEGMENT;
    }
    public static MemorySegment szOID_ARCHIVED_KEY_ATTR() {
        return constants$651.szOID_ARCHIVED_KEY_ATTR$SEGMENT;
    }
    public static MemorySegment szOID_CRL_SELF_CDP() {
        return constants$651.szOID_CRL_SELF_CDP$SEGMENT;
    }
    public static MemorySegment szOID_REQUIRE_CERT_CHAIN_POLICY() {
        return constants$651.szOID_REQUIRE_CERT_CHAIN_POLICY$SEGMENT;
    }
    public static MemorySegment szOID_ARCHIVED_KEY_CERT_HASH() {
        return constants$652.szOID_ARCHIVED_KEY_CERT_HASH$SEGMENT;
    }
    public static MemorySegment szOID_ISSUED_CERT_HASH() {
        return constants$652.szOID_ISSUED_CERT_HASH$SEGMENT;
    }
    public static MemorySegment szOID_DS_EMAIL_REPLICATION() {
        return constants$652.szOID_DS_EMAIL_REPLICATION$SEGMENT;
    }
    public static MemorySegment szOID_REQUEST_CLIENT_INFO() {
        return constants$652.szOID_REQUEST_CLIENT_INFO$SEGMENT;
    }
    public static MemorySegment szOID_ENCRYPTED_KEY_HASH() {
        return constants$652.szOID_ENCRYPTED_KEY_HASH$SEGMENT;
    }
    public static MemorySegment szOID_CERTSRV_CROSSCA_VERSION() {
        return constants$652.szOID_CERTSRV_CROSSCA_VERSION$SEGMENT;
    }
    public static MemorySegment szOID_NTDS_REPLICATION() {
        return constants$653.szOID_NTDS_REPLICATION$SEGMENT;
    }
    public static MemorySegment szOID_SUBJECT_DIR_ATTRS() {
        return constants$653.szOID_SUBJECT_DIR_ATTRS$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP() {
        return constants$653.szOID_PKIX_KP$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_SERVER_AUTH() {
        return constants$653.szOID_PKIX_KP_SERVER_AUTH$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_CLIENT_AUTH() {
        return constants$653.szOID_PKIX_KP_CLIENT_AUTH$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_CODE_SIGNING() {
        return constants$653.szOID_PKIX_KP_CODE_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_EMAIL_PROTECTION() {
        return constants$654.szOID_PKIX_KP_EMAIL_PROTECTION$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_IPSEC_END_SYSTEM() {
        return constants$654.szOID_PKIX_KP_IPSEC_END_SYSTEM$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_IPSEC_TUNNEL() {
        return constants$654.szOID_PKIX_KP_IPSEC_TUNNEL$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_IPSEC_USER() {
        return constants$654.szOID_PKIX_KP_IPSEC_USER$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_TIMESTAMP_SIGNING() {
        return constants$654.szOID_PKIX_KP_TIMESTAMP_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_KP_OCSP_SIGNING() {
        return constants$654.szOID_PKIX_KP_OCSP_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_OCSP_NOCHECK() {
        return constants$655.szOID_PKIX_OCSP_NOCHECK$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_OCSP_NONCE() {
        return constants$655.szOID_PKIX_OCSP_NONCE$SEGMENT;
    }
    public static MemorySegment szOID_IPSEC_KP_IKE_INTERMEDIATE() {
        return constants$655.szOID_IPSEC_KP_IKE_INTERMEDIATE$SEGMENT;
    }
    public static MemorySegment szOID_PKINIT_KP_KDC() {
        return constants$655.szOID_PKINIT_KP_KDC$SEGMENT;
    }
    public static MemorySegment szOID_KP_CTL_USAGE_SIGNING() {
        return constants$655.szOID_KP_CTL_USAGE_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_KP_TIME_STAMP_SIGNING() {
        return constants$655.szOID_KP_TIME_STAMP_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_SERVER_GATED_CRYPTO() {
        return constants$656.szOID_SERVER_GATED_CRYPTO$SEGMENT;
    }
    public static MemorySegment szOID_SGC_NETSCAPE() {
        return constants$656.szOID_SGC_NETSCAPE$SEGMENT;
    }
    public static MemorySegment szOID_KP_EFS() {
        return constants$656.szOID_KP_EFS$SEGMENT;
    }
    public static MemorySegment szOID_EFS_RECOVERY() {
        return constants$656.szOID_EFS_RECOVERY$SEGMENT;
    }
    public static MemorySegment szOID_WHQL_CRYPTO() {
        return constants$656.szOID_WHQL_CRYPTO$SEGMENT;
    }
    public static MemorySegment szOID_ATTEST_WHQL_CRYPTO() {
        return constants$656.szOID_ATTEST_WHQL_CRYPTO$SEGMENT;
    }
    public static MemorySegment szOID_NT5_CRYPTO() {
        return constants$657.szOID_NT5_CRYPTO$SEGMENT;
    }
    public static MemorySegment szOID_OEM_WHQL_CRYPTO() {
        return constants$657.szOID_OEM_WHQL_CRYPTO$SEGMENT;
    }
    public static MemorySegment szOID_EMBEDDED_NT_CRYPTO() {
        return constants$657.szOID_EMBEDDED_NT_CRYPTO$SEGMENT;
    }
    public static MemorySegment szOID_ROOT_LIST_SIGNER() {
        return constants$657.szOID_ROOT_LIST_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_KP_QUALIFIED_SUBORDINATION() {
        return constants$657.szOID_KP_QUALIFIED_SUBORDINATION$SEGMENT;
    }
    public static MemorySegment szOID_KP_KEY_RECOVERY() {
        return constants$657.szOID_KP_KEY_RECOVERY$SEGMENT;
    }
    public static MemorySegment szOID_KP_DOCUMENT_SIGNING() {
        return constants$658.szOID_KP_DOCUMENT_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_KP_LIFETIME_SIGNING() {
        return constants$658.szOID_KP_LIFETIME_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_KP_MOBILE_DEVICE_SOFTWARE() {
        return constants$658.szOID_KP_MOBILE_DEVICE_SOFTWARE$SEGMENT;
    }
    public static MemorySegment szOID_KP_SMART_DISPLAY() {
        return constants$658.szOID_KP_SMART_DISPLAY$SEGMENT;
    }
    public static MemorySegment szOID_KP_CSP_SIGNATURE() {
        return constants$658.szOID_KP_CSP_SIGNATURE$SEGMENT;
    }
    public static MemorySegment szOID_KP_FLIGHT_SIGNING() {
        return constants$658.szOID_KP_FLIGHT_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_PLATFORM_MANIFEST_BINARY_ID() {
        return constants$659.szOID_PLATFORM_MANIFEST_BINARY_ID$SEGMENT;
    }
    public static MemorySegment szOID_DRM() {
        return constants$659.szOID_DRM$SEGMENT;
    }
    public static MemorySegment szOID_DRM_INDIVIDUALIZATION() {
        return constants$659.szOID_DRM_INDIVIDUALIZATION$SEGMENT;
    }
    public static MemorySegment szOID_LICENSES() {
        return constants$659.szOID_LICENSES$SEGMENT;
    }
    public static MemorySegment szOID_LICENSE_SERVER() {
        return constants$659.szOID_LICENSE_SERVER$SEGMENT;
    }
    public static MemorySegment szOID_KP_SMARTCARD_LOGON() {
        return constants$659.szOID_KP_SMARTCARD_LOGON$SEGMENT;
    }
    public static MemorySegment szOID_KP_KERNEL_MODE_CODE_SIGNING() {
        return constants$660.szOID_KP_KERNEL_MODE_CODE_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING() {
        return constants$660.szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_REVOKED_LIST_SIGNER() {
        return constants$660.szOID_REVOKED_LIST_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_WINDOWS_KITS_SIGNER() {
        return constants$660.szOID_WINDOWS_KITS_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_WINDOWS_RT_SIGNER() {
        return constants$660.szOID_WINDOWS_RT_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_PROTECTED_PROCESS_LIGHT_SIGNER() {
        return constants$660.szOID_PROTECTED_PROCESS_LIGHT_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_WINDOWS_TCB_SIGNER() {
        return constants$661.szOID_WINDOWS_TCB_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_PROTECTED_PROCESS_SIGNER() {
        return constants$661.szOID_PROTECTED_PROCESS_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER() {
        return constants$661.szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER() {
        return constants$661.szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_DISALLOWED_LIST() {
        return constants$661.szOID_DISALLOWED_LIST$SEGMENT;
    }
    public static MemorySegment szOID_PIN_RULES_SIGNER() {
        return constants$661.szOID_PIN_RULES_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_PIN_RULES_CTL() {
        return constants$662.szOID_PIN_RULES_CTL$SEGMENT;
    }
    public static MemorySegment szOID_PIN_RULES_EXT() {
        return constants$662.szOID_PIN_RULES_EXT$SEGMENT;
    }
    public static MemorySegment szOID_PIN_RULES_DOMAIN_NAME() {
        return constants$662.szOID_PIN_RULES_DOMAIN_NAME$SEGMENT;
    }
    public static MemorySegment szOID_PIN_RULES_LOG_END_DATE_EXT() {
        return constants$662.szOID_PIN_RULES_LOG_END_DATE_EXT$SEGMENT;
    }
    public static MemorySegment szOID_IUM_SIGNING() {
        return constants$662.szOID_IUM_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_EV_WHQL_CRYPTO() {
        return constants$662.szOID_EV_WHQL_CRYPTO$SEGMENT;
    }
    public static MemorySegment szOID_BIOMETRIC_SIGNING() {
        return constants$663.szOID_BIOMETRIC_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_ENCLAVE_SIGNING() {
        return constants$663.szOID_ENCLAVE_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_SYNC_ROOT_CTL_EXT() {
        return constants$663.szOID_SYNC_ROOT_CTL_EXT$SEGMENT;
    }
    public static MemorySegment szOID_HPKP_DOMAIN_NAME_CTL() {
        return constants$663.szOID_HPKP_DOMAIN_NAME_CTL$SEGMENT;
    }
    public static MemorySegment szOID_HPKP_HEADER_VALUE_CTL() {
        return constants$663.szOID_HPKP_HEADER_VALUE_CTL$SEGMENT;
    }
    public static MemorySegment szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING() {
        return constants$663.szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING$SEGMENT;
    }
    public static MemorySegment szOID_WINDOWS_STORE_SIGNER() {
        return constants$664.szOID_WINDOWS_STORE_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_DYNAMIC_CODE_GEN_SIGNER() {
        return constants$664.szOID_DYNAMIC_CODE_GEN_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_MICROSOFT_PUBLISHER_SIGNER() {
        return constants$664.szOID_MICROSOFT_PUBLISHER_SIGNER$SEGMENT;
    }
    public static MemorySegment szOID_YESNO_TRUST_ATTR() {
        return constants$664.szOID_YESNO_TRUST_ATTR$SEGMENT;
    }
    public static MemorySegment szOID_SITE_PIN_RULES_INDEX_ATTR() {
        return constants$664.szOID_SITE_PIN_RULES_INDEX_ATTR$SEGMENT;
    }
    public static MemorySegment szOID_SITE_PIN_RULES_FLAGS_ATTR() {
        return constants$664.szOID_SITE_PIN_RULES_FLAGS_ATTR$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_POLICY_QUALIFIER_CPS() {
        return constants$665.szOID_PKIX_POLICY_QUALIFIER_CPS$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_POLICY_QUALIFIER_USERNOTICE() {
        return constants$665.szOID_PKIX_POLICY_QUALIFIER_USERNOTICE$SEGMENT;
    }
    public static MemorySegment szOID_ROOT_PROGRAM_FLAGS() {
        return constants$665.szOID_ROOT_PROGRAM_FLAGS$SEGMENT;
    }
    public static MemorySegment szOID_CERT_POLICIES_95_QUALIFIER1() {
        return constants$665.szOID_CERT_POLICIES_95_QUALIFIER1$SEGMENT;
    }
    public static MemorySegment szOID_RDN_TPM_MANUFACTURER() {
        return constants$665.szOID_RDN_TPM_MANUFACTURER$SEGMENT;
    }
    public static MemorySegment szOID_RDN_TPM_MODEL() {
        return constants$665.szOID_RDN_TPM_MODEL$SEGMENT;
    }
    public static MemorySegment szOID_RDN_TPM_VERSION() {
        return constants$666.szOID_RDN_TPM_VERSION$SEGMENT;
    }
    public static MemorySegment szOID_RDN_TCG_PLATFORM_MANUFACTURER() {
        return constants$666.szOID_RDN_TCG_PLATFORM_MANUFACTURER$SEGMENT;
    }
    public static MemorySegment szOID_RDN_TCG_PLATFORM_MODEL() {
        return constants$666.szOID_RDN_TCG_PLATFORM_MODEL$SEGMENT;
    }
    public static MemorySegment szOID_RDN_TCG_PLATFORM_VERSION() {
        return constants$666.szOID_RDN_TCG_PLATFORM_VERSION$SEGMENT;
    }
    public static MemorySegment szOID_CT_CERT_SCTLIST() {
        return constants$666.szOID_CT_CERT_SCTLIST$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_EK_INFO() {
        return constants$666.szOID_ENROLL_EK_INFO$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_AIK_INFO() {
        return constants$667.szOID_ENROLL_AIK_INFO$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_ATTESTATION_STATEMENT() {
        return constants$667.szOID_ENROLL_ATTESTATION_STATEMENT$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_KSP_NAME() {
        return constants$667.szOID_ENROLL_KSP_NAME$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_EKPUB_CHALLENGE() {
        return constants$667.szOID_ENROLL_EKPUB_CHALLENGE$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_CAXCHGCERT_HASH() {
        return constants$667.szOID_ENROLL_CAXCHGCERT_HASH$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_ATTESTATION_CHALLENGE() {
        return constants$667.szOID_ENROLL_ATTESTATION_CHALLENGE$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_ENCRYPTION_ALGORITHM() {
        return constants$668.szOID_ENROLL_ENCRYPTION_ALGORITHM$SEGMENT;
    }
    public static MemorySegment szOID_KP_TPM_EK_CERTIFICATE() {
        return constants$668.szOID_KP_TPM_EK_CERTIFICATE$SEGMENT;
    }
    public static MemorySegment szOID_KP_TPM_PLATFORM_CERTIFICATE() {
        return constants$668.szOID_KP_TPM_PLATFORM_CERTIFICATE$SEGMENT;
    }
    public static MemorySegment szOID_KP_TPM_AIK_CERTIFICATE() {
        return constants$668.szOID_KP_TPM_AIK_CERTIFICATE$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_EKVERIFYKEY() {
        return constants$668.szOID_ENROLL_EKVERIFYKEY$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_EKVERIFYCERT() {
        return constants$668.szOID_ENROLL_EKVERIFYCERT$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_EKVERIFYCREDS() {
        return constants$669.szOID_ENROLL_EKVERIFYCREDS$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_SCEP_ERROR() {
        return constants$669.szOID_ENROLL_SCEP_ERROR$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_SCEP_SERVER_STATE() {
        return constants$669.szOID_ENROLL_SCEP_SERVER_STATE$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_SCEP_CHALLENGE_ANSWER() {
        return constants$669.szOID_ENROLL_SCEP_CHALLENGE_ANSWER$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_SCEP_CLIENT_REQUEST() {
        return constants$669.szOID_ENROLL_SCEP_CLIENT_REQUEST$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_SCEP_SERVER_MESSAGE() {
        return constants$669.szOID_ENROLL_SCEP_SERVER_MESSAGE$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_SCEP_SERVER_SECRET() {
        return constants$670.szOID_ENROLL_SCEP_SERVER_SECRET$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_KEY_AFFINITY() {
        return constants$670.szOID_ENROLL_KEY_AFFINITY$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_SCEP_SIGNER_HASH() {
        return constants$670.szOID_ENROLL_SCEP_SIGNER_HASH$SEGMENT;
    }
    public static MemorySegment szOID_ENROLL_EK_CA_KEYID() {
        return constants$670.szOID_ENROLL_EK_CA_KEYID$SEGMENT;
    }
    public static MemorySegment szOID_ATTR_SUPPORTED_ALGORITHMS() {
        return constants$670.szOID_ATTR_SUPPORTED_ALGORITHMS$SEGMENT;
    }
    public static MemorySegment szOID_ATTR_TPM_SPECIFICATION() {
        return constants$670.szOID_ATTR_TPM_SPECIFICATION$SEGMENT;
    }
    public static MemorySegment szOID_ATTR_PLATFORM_SPECIFICATION() {
        return constants$671.szOID_ATTR_PLATFORM_SPECIFICATION$SEGMENT;
    }
    public static MemorySegment szOID_ATTR_TPM_SECURITY_ASSERTIONS() {
        return constants$671.szOID_ATTR_TPM_SECURITY_ASSERTIONS$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_ACC_DESCR() {
        return constants$671.szOID_PKIX_ACC_DESCR$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_OCSP() {
        return constants$671.szOID_PKIX_OCSP$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_CA_ISSUERS() {
        return constants$671.szOID_PKIX_CA_ISSUERS$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_TIME_STAMPING() {
        return constants$671.szOID_PKIX_TIME_STAMPING$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_CA_REPOSITORY() {
        return constants$672.szOID_PKIX_CA_REPOSITORY$SEGMENT;
    }
    public static int CRL_DIST_POINT_ERR_CRL_ISSUER_BIT() {
        return (int)2147483648L;
    }
    public static int CERT_EXCLUDED_SUBTREE_BIT() {
        return (int)2147483648L;
    }
    public static int SORTED_CTL_EXT_FLAGS_OFFSET() {
        return (int)0L;
    }
    public static int SORTED_CTL_EXT_COUNT_OFFSET() {
        return (int)4L;
    }
    public static int SORTED_CTL_EXT_MAX_COLLISION_OFFSET() {
        return (int)8L;
    }
    public static int SORTED_CTL_EXT_HASH_BUCKET_OFFSET() {
        return (int)12L;
    }
    public static int CERT_DSS_SIGNATURE_LEN() {
        return (int)40L;
    }
    public static int CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN() {
        return (int)48L;
    }
    public static int CRYPT_X942_PUB_INFO_BYTE_LENGTH() {
        return (int)64L;
    }
    public static MemorySegment szOID_QC_EU_COMPLIANCE() {
        return constants$672.szOID_QC_EU_COMPLIANCE$SEGMENT;
    }
    public static MemorySegment szOID_QC_SSCD() {
        return constants$672.szOID_QC_SSCD$SEGMENT;
    }
    public static MemorySegment szOID_VERISIGN_PRIVATE_6_9() {
        return constants$672.szOID_VERISIGN_PRIVATE_6_9$SEGMENT;
    }
    public static MemorySegment szOID_VERISIGN_ONSITE_JURISDICTION_HASH() {
        return constants$672.szOID_VERISIGN_ONSITE_JURISDICTION_HASH$SEGMENT;
    }
    public static MemorySegment szOID_VERISIGN_BITSTRING_6_13() {
        return constants$672.szOID_VERISIGN_BITSTRING_6_13$SEGMENT;
    }
    public static MemorySegment szOID_VERISIGN_ISS_STRONG_CRYPTO() {
        return constants$673.szOID_VERISIGN_ISS_STRONG_CRYPTO$SEGMENT;
    }
    public static MemorySegment szOIDVerisign_MessageType() {
        return constants$673.szOIDVerisign_MessageType$SEGMENT;
    }
    public static MemorySegment szOIDVerisign_PkiStatus() {
        return constants$673.szOIDVerisign_PkiStatus$SEGMENT;
    }
    public static MemorySegment szOIDVerisign_FailInfo() {
        return constants$673.szOIDVerisign_FailInfo$SEGMENT;
    }
    public static MemorySegment szOIDVerisign_SenderNonce() {
        return constants$673.szOIDVerisign_SenderNonce$SEGMENT;
    }
    public static MemorySegment szOIDVerisign_RecipientNonce() {
        return constants$673.szOIDVerisign_RecipientNonce$SEGMENT;
    }
    public static MemorySegment szOIDVerisign_TransactionID() {
        return constants$674.szOIDVerisign_TransactionID$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE() {
        return constants$674.szOID_NETSCAPE$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_CERT_EXTENSION() {
        return constants$674.szOID_NETSCAPE_CERT_EXTENSION$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_CERT_TYPE() {
        return constants$674.szOID_NETSCAPE_CERT_TYPE$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_BASE_URL() {
        return constants$674.szOID_NETSCAPE_BASE_URL$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_REVOCATION_URL() {
        return constants$674.szOID_NETSCAPE_REVOCATION_URL$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_CA_REVOCATION_URL() {
        return constants$675.szOID_NETSCAPE_CA_REVOCATION_URL$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_CERT_RENEWAL_URL() {
        return constants$675.szOID_NETSCAPE_CERT_RENEWAL_URL$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_CA_POLICY_URL() {
        return constants$675.szOID_NETSCAPE_CA_POLICY_URL$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_SSL_SERVER_NAME() {
        return constants$675.szOID_NETSCAPE_SSL_SERVER_NAME$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_COMMENT() {
        return constants$675.szOID_NETSCAPE_COMMENT$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_DATA_TYPE() {
        return constants$675.szOID_NETSCAPE_DATA_TYPE$SEGMENT;
    }
    public static MemorySegment szOID_NETSCAPE_CERT_SEQUENCE() {
        return constants$676.szOID_NETSCAPE_CERT_SEQUENCE$SEGMENT;
    }
    public static MemorySegment szOID_CT_PKI_DATA() {
        return constants$676.szOID_CT_PKI_DATA$SEGMENT;
    }
    public static MemorySegment szOID_CT_PKI_RESPONSE() {
        return constants$676.szOID_CT_PKI_RESPONSE$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_NO_SIGNATURE() {
        return constants$676.szOID_PKIX_NO_SIGNATURE$SEGMENT;
    }
    public static MemorySegment szOID_CMC() {
        return constants$676.szOID_CMC$SEGMENT;
    }
    public static MemorySegment szOID_CMC_STATUS_INFO() {
        return constants$676.szOID_CMC_STATUS_INFO$SEGMENT;
    }
    public static MemorySegment szOID_CMC_IDENTIFICATION() {
        return constants$677.szOID_CMC_IDENTIFICATION$SEGMENT;
    }
    public static MemorySegment szOID_CMC_IDENTITY_PROOF() {
        return constants$677.szOID_CMC_IDENTITY_PROOF$SEGMENT;
    }
    public static MemorySegment szOID_CMC_DATA_RETURN() {
        return constants$677.szOID_CMC_DATA_RETURN$SEGMENT;
    }
    public static MemorySegment szOID_CMC_TRANSACTION_ID() {
        return constants$677.szOID_CMC_TRANSACTION_ID$SEGMENT;
    }
    public static MemorySegment szOID_CMC_SENDER_NONCE() {
        return constants$677.szOID_CMC_SENDER_NONCE$SEGMENT;
    }
    public static MemorySegment szOID_CMC_RECIPIENT_NONCE() {
        return constants$677.szOID_CMC_RECIPIENT_NONCE$SEGMENT;
    }
    public static MemorySegment szOID_CMC_ADD_EXTENSIONS() {
        return constants$678.szOID_CMC_ADD_EXTENSIONS$SEGMENT;
    }
    public static MemorySegment szOID_CMC_ENCRYPTED_POP() {
        return constants$678.szOID_CMC_ENCRYPTED_POP$SEGMENT;
    }
    public static MemorySegment szOID_CMC_DECRYPTED_POP() {
        return constants$678.szOID_CMC_DECRYPTED_POP$SEGMENT;
    }
    public static MemorySegment szOID_CMC_LRA_POP_WITNESS() {
        return constants$678.szOID_CMC_LRA_POP_WITNESS$SEGMENT;
    }
    public static MemorySegment szOID_CMC_GET_CERT() {
        return constants$678.szOID_CMC_GET_CERT$SEGMENT;
    }
    public static MemorySegment szOID_CMC_GET_CRL() {
        return constants$678.szOID_CMC_GET_CRL$SEGMENT;
    }
    public static MemorySegment szOID_CMC_REVOKE_REQUEST() {
        return constants$679.szOID_CMC_REVOKE_REQUEST$SEGMENT;
    }
    public static MemorySegment szOID_CMC_REG_INFO() {
        return constants$679.szOID_CMC_REG_INFO$SEGMENT;
    }
    public static MemorySegment szOID_CMC_RESPONSE_INFO() {
        return constants$679.szOID_CMC_RESPONSE_INFO$SEGMENT;
    }
    public static MemorySegment szOID_CMC_QUERY_PENDING() {
        return constants$679.szOID_CMC_QUERY_PENDING$SEGMENT;
    }
    public static MemorySegment szOID_CMC_ID_POP_LINK_RANDOM() {
        return constants$679.szOID_CMC_ID_POP_LINK_RANDOM$SEGMENT;
    }
    public static MemorySegment szOID_CMC_ID_POP_LINK_WITNESS() {
        return constants$679.szOID_CMC_ID_POP_LINK_WITNESS$SEGMENT;
    }
    public static MemorySegment szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE() {
        return constants$680.szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE$SEGMENT;
    }
    public static MemorySegment szOID_CMC_ADD_ATTRIBUTES() {
        return constants$680.szOID_CMC_ADD_ATTRIBUTES$SEGMENT;
    }
    public static MemorySegment szOID_LOYALTY_OTHER_LOGOTYPE() {
        return constants$680.szOID_LOYALTY_OTHER_LOGOTYPE$SEGMENT;
    }
    public static MemorySegment szOID_BACKGROUND_OTHER_LOGOTYPE() {
        return constants$680.szOID_BACKGROUND_OTHER_LOGOTYPE$SEGMENT;
    }
    public static MemorySegment szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE() {
        return constants$680.szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_ENCODE_OBJECT_FUNC() {
        return constants$680.CRYPT_OID_ENCODE_OBJECT_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_DECODE_OBJECT_FUNC() {
        return constants$681.CRYPT_OID_DECODE_OBJECT_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_ENCODE_OBJECT_EX_FUNC() {
        return constants$681.CRYPT_OID_ENCODE_OBJECT_EX_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_DECODE_OBJECT_EX_FUNC() {
        return constants$681.CRYPT_OID_DECODE_OBJECT_EX_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_CREATE_COM_OBJECT_FUNC() {
        return constants$681.CRYPT_OID_CREATE_COM_OBJECT_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_VERIFY_REVOCATION_FUNC() {
        return constants$681.CRYPT_OID_VERIFY_REVOCATION_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_VERIFY_CTL_USAGE_FUNC() {
        return constants$681.CRYPT_OID_VERIFY_CTL_USAGE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_FORMAT_OBJECT_FUNC() {
        return constants$682.CRYPT_OID_FORMAT_OBJECT_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_FIND_OID_INFO_FUNC() {
        return constants$682.CRYPT_OID_FIND_OID_INFO_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_FIND_LOCALIZED_NAME_FUNC() {
        return constants$682.CRYPT_OID_FIND_LOCALIZED_NAME_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_REGPATH() {
        return constants$682.CRYPT_OID_REGPATH$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_REG_ENCODING_TYPE_PREFIX() {
        return constants$682.CRYPT_OID_REG_ENCODING_TYPE_PREFIX$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_REG_DLL_VALUE_NAME() {
        return constants$682.CRYPT_OID_REG_DLL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_REG_FUNC_NAME_VALUE_NAME() {
        return constants$683.CRYPT_OID_REG_FUNC_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A() {
        return constants$683.CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_REG_FLAGS_VALUE_NAME() {
        return constants$683.CRYPT_OID_REG_FLAGS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPT_DEFAULT_OID() {
        return constants$683.CRYPT_DEFAULT_OID$SEGMENT;
    }
    public static int CRYPT_REGISTER_LAST_INDEX() {
        return (int)4294967295L;
    }
    public static int CRYPT_MATCH_ANY_ENCODING_TYPE() {
        return (int)4294967295L;
    }
    public static int CALG_OID_INFO_CNG_ONLY() {
        return (int)4294967295L;
    }
    public static int CALG_OID_INFO_PARAMETERS() {
        return (int)4294967294L;
    }
    public static MemorySegment CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM() {
        return constants$683.CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM() {
        return constants$683.CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM() {
        return constants$684.CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_INFO_NO_SIGN_ALGORITHM() {
        return constants$684.CRYPT_OID_INFO_NO_SIGN_ALGORITHM$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM() {
        return constants$684.CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM() {
        return constants$684.CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM() {
        return constants$684.CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM$SEGMENT;
    }
    public static int CRYPT_FIRST_ALG_OID_GROUP_ID() {
        return (int)1L;
    }
    public static int CRYPT_LAST_ALG_OID_GROUP_ID() {
        return (int)4L;
    }
    public static int CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG() {
        return (int)2147483648L;
    }
    public static int CRYPT_OID_INFO_OID_KEY_FLAGS_MASK() {
        return (int)4294901760L;
    }
    public static int CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG() {
        return (int)2147483648L;
    }
    public static int CRYPT_OID_DISABLE_SEARCH_DS_FLAG() {
        return (int)2147483648L;
    }
    public static MemorySegment CRYPT_LOCALIZED_NAME_OID() {
        return constants$684.CRYPT_LOCALIZED_NAME_OID$SEGMENT;
    }
    public static MemorySegment CERT_STRONG_SIGN_ECDSA_ALGORITHM() {
        return constants$685.CERT_STRONG_SIGN_ECDSA_ALGORITHM$SEGMENT;
    }
    public static MemorySegment szOID_CERT_STRONG_SIGN_OS_PREFIX() {
        return constants$685.szOID_CERT_STRONG_SIGN_OS_PREFIX$SEGMENT;
    }
    public static MemorySegment szOID_CERT_STRONG_SIGN_OS_1() {
        return constants$685.szOID_CERT_STRONG_SIGN_OS_1$SEGMENT;
    }
    public static MemorySegment szOID_CERT_STRONG_SIGN_OS_CURRENT() {
        return constants$685.szOID_CERT_STRONG_SIGN_OS_CURRENT$SEGMENT;
    }
    public static MemorySegment szOID_CERT_STRONG_KEY_OS_PREFIX() {
        return constants$685.szOID_CERT_STRONG_KEY_OS_PREFIX$SEGMENT;
    }
    public static MemorySegment szOID_CERT_STRONG_KEY_OS_1() {
        return constants$685.szOID_CERT_STRONG_KEY_OS_1$SEGMENT;
    }
    public static MemorySegment szOID_CERT_STRONG_KEY_OS_CURRENT() {
        return constants$686.szOID_CERT_STRONG_KEY_OS_CURRENT$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_7_DATA() {
        return constants$686.szOID_PKCS_7_DATA$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_7_SIGNED() {
        return constants$686.szOID_PKCS_7_SIGNED$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_7_ENVELOPED() {
        return constants$686.szOID_PKCS_7_ENVELOPED$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_7_SIGNEDANDENVELOPED() {
        return constants$686.szOID_PKCS_7_SIGNEDANDENVELOPED$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_7_DIGESTED() {
        return constants$686.szOID_PKCS_7_DIGESTED$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_7_ENCRYPTED() {
        return constants$687.szOID_PKCS_7_ENCRYPTED$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_9_CONTENT_TYPE() {
        return constants$687.szOID_PKCS_9_CONTENT_TYPE$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_9_MESSAGE_DIGEST() {
        return constants$687.szOID_PKCS_9_MESSAGE_DIGEST$SEGMENT;
    }
    public static int CMSG_ALL_FLAGS() {
        return (int)4294967295L;
    }
    public static int CMSG_DATA_FLAG() {
        return (int)2L;
    }
    public static int CMSG_SIGNED_FLAG() {
        return (int)4L;
    }
    public static int CMSG_ENVELOPED_FLAG() {
        return (int)8L;
    }
    public static int CMSG_SIGNED_AND_ENVELOPED_FLAG() {
        return (int)16L;
    }
    public static int CMSG_HASHED_FLAG() {
        return (int)32L;
    }
    public static int CMSG_ENCRYPTED_FLAG() {
        return (int)64L;
    }
    public static int CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG() {
        return (int)2147483648L;
    }
    public static int CMSG_INDEFINITE_LENGTH() {
        return (int)4294967295L;
    }
    public static int CMSG_SIGNED_DATA_PKCS_1_5_VERSION() {
        return (int)1L;
    }
    public static int CMSG_SIGNED_DATA_CMS_VERSION() {
        return (int)3L;
    }
    public static int CMSG_SIGNER_INFO_PKCS_1_5_VERSION() {
        return (int)1L;
    }
    public static int CMSG_SIGNER_INFO_CMS_VERSION() {
        return (int)3L;
    }
    public static int CMSG_HASHED_DATA_PKCS_1_5_VERSION() {
        return (int)0L;
    }
    public static int CMSG_HASHED_DATA_CMS_VERSION() {
        return (int)2L;
    }
    public static int CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION() {
        return (int)0L;
    }
    public static int CMSG_ENVELOPED_DATA_CMS_VERSION() {
        return (int)2L;
    }
    public static int CMSG_KEY_TRANS_PKCS_1_5_VERSION() {
        return (int)0L;
    }
    public static int CMSG_KEY_TRANS_CMS_VERSION() {
        return (int)2L;
    }
    public static int CMSG_KEY_AGREE_VERSION() {
        return (int)3L;
    }
    public static int CMSG_MAIL_LIST_VERSION() {
        return (int)4L;
    }
    public static MemorySegment CMSG_OID_GEN_ENCRYPT_KEY_FUNC() {
        return constants$687.CMSG_OID_GEN_ENCRYPT_KEY_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC() {
        return constants$687.CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC() {
        return constants$687.CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC$SEGMENT;
    }
    public static MemoryAddress CMSG_DEFAULT_INSTALLABLE_FUNC_OID() {
        return constants$688.CMSG_DEFAULT_INSTALLABLE_FUNC_OID$ADDR;
    }
    public static MemorySegment CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC() {
        return constants$688.CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC() {
        return constants$688.CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC() {
        return constants$688.CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_EXPORT_KEY_TRANS_FUNC() {
        return constants$688.CMSG_OID_EXPORT_KEY_TRANS_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC() {
        return constants$688.CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC() {
        return constants$689.CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_EXPORT_KEY_AGREE_FUNC() {
        return constants$689.CMSG_OID_EXPORT_KEY_AGREE_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC() {
        return constants$689.CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC() {
        return constants$689.CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_EXPORT_MAIL_LIST_FUNC() {
        return constants$689.CMSG_OID_EXPORT_MAIL_LIST_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC() {
        return constants$689.CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_IMPORT_KEY_TRANS_FUNC() {
        return constants$690.CMSG_OID_IMPORT_KEY_TRANS_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC() {
        return constants$690.CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_IMPORT_KEY_AGREE_FUNC() {
        return constants$690.CMSG_OID_IMPORT_KEY_AGREE_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC() {
        return constants$690.CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_IMPORT_MAIL_LIST_FUNC() {
        return constants$690.CMSG_OID_IMPORT_MAIL_LIST_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC() {
        return constants$690.CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC() {
        return constants$691.CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC() {
        return constants$691.CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC$SEGMENT;
    }
    public static MemorySegment CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC() {
        return constants$691.CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC$SEGMENT;
    }
    public static int CERT_HASH_PROP_ID() {
        return (int)3L;
    }
    public static int CERT_CTL_USAGE_PROP_ID() {
        return (int)9L;
    }
    public static MemorySegment szOID_CERT_PROP_ID_PREFIX() {
        return constants$691.szOID_CERT_PROP_ID_PREFIX$SEGMENT;
    }
    public static MemorySegment szOID_CERT_KEY_IDENTIFIER_PROP_ID() {
        return constants$691.szOID_CERT_KEY_IDENTIFIER_PROP_ID$SEGMENT;
    }
    public static MemorySegment szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID() {
        return constants$691.szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID$SEGMENT;
    }
    public static MemorySegment szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID() {
        return constants$692.szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID$SEGMENT;
    }
    public static MemorySegment szOID_CERT_MD5_HASH_PROP_ID() {
        return constants$692.szOID_CERT_MD5_HASH_PROP_ID$SEGMENT;
    }
    public static MemorySegment szOID_CERT_SIGNATURE_HASH_PROP_ID() {
        return constants$692.szOID_CERT_SIGNATURE_HASH_PROP_ID$SEGMENT;
    }
    public static MemorySegment szOID_DISALLOWED_HASH() {
        return constants$692.szOID_DISALLOWED_HASH$SEGMENT;
    }
    public static MemorySegment szOID_CERT_DISALLOWED_FILETIME_PROP_ID() {
        return constants$692.szOID_CERT_DISALLOWED_FILETIME_PROP_ID$SEGMENT;
    }
    public static MemorySegment szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION() {
        return constants$692.szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION$SEGMENT;
    }
    public static MemorySegment szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION() {
        return constants$693.szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION$SEGMENT;
    }
    public static MemorySegment szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL() {
        return constants$693.szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL$SEGMENT;
    }
    public static int CERT_NCRYPT_KEY_SPEC() {
        return (int)4294967295L;
    }
    public static MemoryAddress CERT_STORE_PROV_MSG() {
        return constants$693.CERT_STORE_PROV_MSG$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_MEMORY() {
        return constants$693.CERT_STORE_PROV_MEMORY$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_FILE() {
        return constants$693.CERT_STORE_PROV_FILE$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_REG() {
        return constants$693.CERT_STORE_PROV_REG$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_PKCS7() {
        return constants$694.CERT_STORE_PROV_PKCS7$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SERIALIZED() {
        return constants$694.CERT_STORE_PROV_SERIALIZED$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_FILENAME_A() {
        return constants$694.CERT_STORE_PROV_FILENAME_A$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_FILENAME_W() {
        return constants$694.CERT_STORE_PROV_FILENAME_W$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_FILENAME() {
        return constants$694.CERT_STORE_PROV_FILENAME$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SYSTEM_A() {
        return constants$694.CERT_STORE_PROV_SYSTEM_A$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SYSTEM_W() {
        return constants$695.CERT_STORE_PROV_SYSTEM_W$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SYSTEM() {
        return constants$695.CERT_STORE_PROV_SYSTEM$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_COLLECTION() {
        return constants$695.CERT_STORE_PROV_COLLECTION$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SYSTEM_REGISTRY_A() {
        return constants$695.CERT_STORE_PROV_SYSTEM_REGISTRY_A$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SYSTEM_REGISTRY_W() {
        return constants$695.CERT_STORE_PROV_SYSTEM_REGISTRY_W$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SYSTEM_REGISTRY() {
        return constants$695.CERT_STORE_PROV_SYSTEM_REGISTRY$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_PHYSICAL_W() {
        return constants$696.CERT_STORE_PROV_PHYSICAL_W$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_PHYSICAL() {
        return constants$696.CERT_STORE_PROV_PHYSICAL$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SMART_CARD_W() {
        return constants$696.CERT_STORE_PROV_SMART_CARD_W$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_SMART_CARD() {
        return constants$696.CERT_STORE_PROV_SMART_CARD$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_LDAP_W() {
        return constants$696.CERT_STORE_PROV_LDAP_W$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_LDAP() {
        return constants$696.CERT_STORE_PROV_LDAP$ADDR;
    }
    public static MemoryAddress CERT_STORE_PROV_PKCS12() {
        return constants$697.CERT_STORE_PROV_PKCS12$ADDR;
    }
    public static MemorySegment sz_CERT_STORE_PROV_MEMORY() {
        return constants$697.sz_CERT_STORE_PROV_MEMORY$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_FILENAME_W() {
        return constants$697.sz_CERT_STORE_PROV_FILENAME_W$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_FILENAME() {
        return constants$697.sz_CERT_STORE_PROV_FILENAME$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_SYSTEM_W() {
        return constants$697.sz_CERT_STORE_PROV_SYSTEM_W$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_SYSTEM() {
        return constants$697.sz_CERT_STORE_PROV_SYSTEM$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_PKCS7() {
        return constants$698.sz_CERT_STORE_PROV_PKCS7$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_PKCS12() {
        return constants$698.sz_CERT_STORE_PROV_PKCS12$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_SERIALIZED() {
        return constants$698.sz_CERT_STORE_PROV_SERIALIZED$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_COLLECTION() {
        return constants$698.sz_CERT_STORE_PROV_COLLECTION$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W() {
        return constants$698.sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_SYSTEM_REGISTRY() {
        return constants$698.sz_CERT_STORE_PROV_SYSTEM_REGISTRY$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_PHYSICAL_W() {
        return constants$699.sz_CERT_STORE_PROV_PHYSICAL_W$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_PHYSICAL() {
        return constants$699.sz_CERT_STORE_PROV_PHYSICAL$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_SMART_CARD_W() {
        return constants$699.sz_CERT_STORE_PROV_SMART_CARD_W$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_SMART_CARD() {
        return constants$699.sz_CERT_STORE_PROV_SMART_CARD$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_LDAP_W() {
        return constants$699.sz_CERT_STORE_PROV_LDAP_W$SEGMENT;
    }
    public static MemorySegment sz_CERT_STORE_PROV_LDAP() {
        return constants$699.sz_CERT_STORE_PROV_LDAP$SEGMENT;
    }
    public static int CERT_SYSTEM_STORE_MASK() {
        return (int)4294901760L;
    }
    public static int CERT_SYSTEM_STORE_RELOCATE_FLAG() {
        return (int)2147483648L;
    }
    public static int CERT_SYSTEM_STORE_CURRENT_USER() {
        return (int)65536L;
    }
    public static int CERT_SYSTEM_STORE_LOCAL_MACHINE() {
        return (int)131072L;
    }
    public static int CERT_SYSTEM_STORE_CURRENT_SERVICE() {
        return (int)262144L;
    }
    public static int CERT_SYSTEM_STORE_SERVICES() {
        return (int)327680L;
    }
    public static int CERT_SYSTEM_STORE_USERS() {
        return (int)393216L;
    }
    public static int CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY() {
        return (int)458752L;
    }
    public static int CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY() {
        return (int)524288L;
    }
    public static int CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE() {
        return (int)589824L;
    }
    public static int CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS() {
        return (int)655360L;
    }
    public static MemorySegment CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH() {
        return constants$700.CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_EFSBLOB_REGPATH() {
        return constants$700.CERT_EFSBLOB_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_EFSBLOB_VALUE_NAME() {
        return constants$700.CERT_EFSBLOB_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PROT_ROOT_FLAGS_REGPATH() {
        return constants$700.CERT_PROT_ROOT_FLAGS_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_PROT_ROOT_FLAGS_VALUE_NAME() {
        return constants$700.CERT_PROT_ROOT_FLAGS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME() {
        return constants$700.CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A() {
        return constants$701.CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A$SEGMENT;
    }
    public static MemorySegment CERT_PROT_ROOT_PEER_USAGES_DEFAULT_A() {
        return constants$701.CERT_PROT_ROOT_PEER_USAGES_DEFAULT_A$SEGMENT;
    }
    public static MemorySegment CERT_TRUST_PUB_SAFER_GROUP_POLICY_REGPATH() {
        return constants$701.CERT_TRUST_PUB_SAFER_GROUP_POLICY_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH() {
        return constants$701.CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_TRUST_PUB_SAFER_LOCAL_MACHINE_REGPATH() {
        return constants$701.CERT_TRUST_PUB_SAFER_LOCAL_MACHINE_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME() {
        return constants$701.CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH() {
        return constants$702.CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME() {
        return constants$702.CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_DISABLE_ROOT_AUTO_UPDATE_REGPATH() {
        return constants$702.CERT_DISABLE_ROOT_AUTO_UPDATE_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME() {
        return constants$702.CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME() {
        return constants$702.CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME() {
        return constants$702.CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH() {
        return constants$703.CERT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME() {
        return constants$703.CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME() {
        return constants$703.CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH() {
        return constants$703.CERT_AUTH_ROOT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME() {
        return constants$703.CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME() {
        return constants$703.CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME() {
        return constants$704.CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME() {
        return constants$704.CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME() {
        return constants$704.CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_CTL_FILENAME() {
        return constants$704.CERT_AUTH_ROOT_CTL_FILENAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_CTL_FILENAME_A() {
        return constants$704.CERT_AUTH_ROOT_CTL_FILENAME_A$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_CAB_FILENAME() {
        return constants$704.CERT_AUTH_ROOT_CAB_FILENAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_SEQ_FILENAME() {
        return constants$705.CERT_AUTH_ROOT_SEQ_FILENAME$SEGMENT;
    }
    public static MemorySegment CERT_AUTH_ROOT_CERT_EXT() {
        return constants$705.CERT_AUTH_ROOT_CERT_EXT$SEGMENT;
    }
    public static MemorySegment CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME() {
        return constants$705.CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME() {
        return constants$705.CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME() {
        return constants$705.CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_DISALLOWED_CERT_CTL_FILENAME() {
        return constants$705.CERT_DISALLOWED_CERT_CTL_FILENAME$SEGMENT;
    }
    public static MemorySegment CERT_DISALLOWED_CERT_CTL_FILENAME_A() {
        return constants$706.CERT_DISALLOWED_CERT_CTL_FILENAME_A$SEGMENT;
    }
    public static MemorySegment CERT_DISALLOWED_CERT_CAB_FILENAME() {
        return constants$706.CERT_DISALLOWED_CERT_CAB_FILENAME$SEGMENT;
    }
    public static MemorySegment CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER() {
        return constants$706.CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER$SEGMENT;
    }
    public static MemorySegment CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME() {
        return constants$706.CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME() {
        return constants$706.CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME() {
        return constants$706.CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PIN_RULES_CTL_FILENAME() {
        return constants$707.CERT_PIN_RULES_CTL_FILENAME$SEGMENT;
    }
    public static MemorySegment CERT_PIN_RULES_CTL_FILENAME_A() {
        return constants$707.CERT_PIN_RULES_CTL_FILENAME_A$SEGMENT;
    }
    public static MemorySegment CERT_PIN_RULES_CAB_FILENAME() {
        return constants$707.CERT_PIN_RULES_CAB_FILENAME$SEGMENT;
    }
    public static MemorySegment CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER() {
        return constants$707.CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER$SEGMENT;
    }
    public static int CERT_REGISTRY_STORE_CLIENT_GPT_FLAG() {
        return (int)2147483648L;
    }
    public static MemorySegment CERT_IE_DIRTY_FLAGS_REGPATH() {
        return constants$707.CERT_IE_DIRTY_FLAGS_REGPATH$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_OPEN_STORE_PROV_FUNC() {
        return constants$707.CRYPT_OID_OPEN_STORE_PROV_FUNC$SEGMENT;
    }
    public static int CERT_STORE_SAVE_TO_FILENAME() {
        return (int)4L;
    }
    public static int CERT_COMPARE_HASH() {
        return (int)1L;
    }
    public static int CERT_COMPARE_CTL_USAGE() {
        return (int)10L;
    }
    public static int CERT_FIND_ANY() {
        return (int)0L;
    }
    public static int CERT_FIND_SHA1_HASH() {
        return (int)65536L;
    }
    public static int CERT_FIND_MD5_HASH() {
        return (int)262144L;
    }
    public static int CERT_FIND_SIGNATURE_HASH() {
        return (int)917504L;
    }
    public static int CERT_FIND_KEY_IDENTIFIER() {
        return (int)983040L;
    }
    public static int CERT_FIND_HASH() {
        return (int)65536L;
    }
    public static int CERT_FIND_PROPERTY() {
        return (int)327680L;
    }
    public static int CERT_FIND_PUBLIC_KEY() {
        return (int)393216L;
    }
    public static int CERT_FIND_SUBJECT_NAME() {
        return (int)131079L;
    }
    public static int CERT_FIND_SUBJECT_ATTR() {
        return (int)196615L;
    }
    public static int CERT_FIND_ISSUER_NAME() {
        return (int)131076L;
    }
    public static int CERT_FIND_ISSUER_ATTR() {
        return (int)196612L;
    }
    public static int CERT_FIND_SUBJECT_STR_A() {
        return (int)458759L;
    }
    public static int CERT_FIND_SUBJECT_STR_W() {
        return (int)524295L;
    }
    public static int CERT_FIND_SUBJECT_STR() {
        return (int)524295L;
    }
    public static int CERT_FIND_ISSUER_STR_A() {
        return (int)458756L;
    }
    public static int CERT_FIND_ISSUER_STR_W() {
        return (int)524292L;
    }
    public static int CERT_FIND_ISSUER_STR() {
        return (int)524292L;
    }
    public static int CERT_FIND_KEY_SPEC() {
        return (int)589824L;
    }
    public static int CERT_FIND_ENHKEY_USAGE() {
        return (int)655360L;
    }
    public static int CERT_FIND_CTL_USAGE() {
        return (int)655360L;
    }
    public static int CERT_FIND_SUBJECT_CERT() {
        return (int)720896L;
    }
    public static int CERT_FIND_ISSUER_OF() {
        return (int)786432L;
    }
    public static int CERT_FIND_EXISTING() {
        return (int)851968L;
    }
    public static int CERT_FIND_CERT_ID() {
        return (int)1048576L;
    }
    public static int CERT_FIND_CROSS_CERT_DIST_POINTS() {
        return (int)1114112L;
    }
    public static int CERT_FIND_PUBKEY_MD5_HASH() {
        return (int)1179648L;
    }
    public static int CERT_FIND_SUBJECT_INFO_ACCESS() {
        return (int)1245184L;
    }
    public static int CERT_FIND_HASH_STR() {
        return (int)1310720L;
    }
    public static int CERT_FIND_HAS_PRIVATE_KEY() {
        return (int)1376256L;
    }
    public static int CERT_FIND_OPTIONAL_CTL_USAGE_FLAG() {
        return (int)1L;
    }
    public static int CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG() {
        return (int)2L;
    }
    public static int CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG() {
        return (int)4L;
    }
    public static int CERT_FIND_NO_CTL_USAGE_FLAG() {
        return (int)8L;
    }
    public static int CERT_FIND_OR_CTL_USAGE_FLAG() {
        return (int)16L;
    }
    public static int CERT_FIND_VALID_CTL_USAGE_FLAG() {
        return (int)32L;
    }
    public static int CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG() {
        return (int)2147483648L;
    }
    public static int CERT_STORE_ALL_CONTEXT_FLAG() {
        return (int)4294967295L;
    }
    public static int CERT_STORE_CERTIFICATE_CONTEXT_FLAG() {
        return (int)2L;
    }
    public static int CERT_STORE_CRL_CONTEXT_FLAG() {
        return (int)4L;
    }
    public static int CERT_STORE_CTL_CONTEXT_FLAG() {
        return (int)8L;
    }
    public static int CTL_FIND_NO_LIST_ID_CBDATA() {
        return (int)4294967295L;
    }
    public static MemoryAddress CTL_FIND_NO_SIGNER_PTR() {
        return constants$708.CTL_FIND_NO_SIGNER_PTR$ADDR;
    }
    public static MemorySegment CERT_PHYSICAL_STORE_DEFAULT_NAME() {
        return constants$708.CERT_PHYSICAL_STORE_DEFAULT_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PHYSICAL_STORE_GROUP_POLICY_NAME() {
        return constants$708.CERT_PHYSICAL_STORE_GROUP_POLICY_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME() {
        return constants$708.CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME() {
        return constants$708.CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME() {
        return constants$708.CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PHYSICAL_STORE_ENTERPRISE_NAME() {
        return constants$709.CERT_PHYSICAL_STORE_ENTERPRISE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PHYSICAL_STORE_AUTH_ROOT_NAME() {
        return constants$709.CERT_PHYSICAL_STORE_AUTH_ROOT_NAME$SEGMENT;
    }
    public static MemorySegment CERT_PHYSICAL_STORE_SMART_CARD_NAME() {
        return constants$709.CERT_PHYSICAL_STORE_SMART_CARD_NAME$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC() {
        return constants$709.CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC() {
        return constants$709.CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC() {
        return constants$709.CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_ENUM_SYSTEM_STORE_FUNC() {
        return constants$710.CRYPT_OID_ENUM_SYSTEM_STORE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC() {
        return constants$710.CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC() {
        return constants$710.CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC() {
        return constants$710.CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME() {
        return constants$710.CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC() {
        return constants$710.CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC() {
        return constants$711.CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC() {
        return constants$711.CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC() {
        return constants$711.CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC() {
        return constants$711.CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC() {
        return constants$711.CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC() {
        return constants$711.CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC() {
        return constants$712.CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC() {
        return constants$712.CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC$SEGMENT;
    }
    public static MemorySegment CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC() {
        return constants$712.CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC$SEGMENT;
    }
    public static int CRYPT_DELETE_KEYSET() {
        return (int)16L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_CERT() {
        return (int)2L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_CTL() {
        return (int)4L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_CRL() {
        return (int)8L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE() {
        return (int)16L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT() {
        return (int)32L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL() {
        return (int)64L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL() {
        return (int)128L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED() {
        return (int)256L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED() {
        return (int)512L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED() {
        return (int)1024L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_PKCS10() {
        return (int)2048L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_PFX() {
        return (int)4096L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_CERT_PAIR() {
        return (int)8192L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD() {
        return (int)16384L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_ALL() {
        return (int)16382L;
    }
    public static int CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT() {
        return (int)818L;
    }
    public static int CERT_QUERY_FORMAT_FLAG_BINARY() {
        return (int)2L;
    }
    public static int CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED() {
        return (int)4L;
    }
    public static int CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED() {
        return (int)8L;
    }
    public static int CERT_QUERY_FORMAT_FLAG_ALL() {
        return (int)14L;
    }
    public static MemoryAddress CREDENTIAL_OID_PASSWORD_CREDENTIALS_A() {
        return constants$712.CREDENTIAL_OID_PASSWORD_CREDENTIALS_A$ADDR;
    }
    public static MemoryAddress CREDENTIAL_OID_PASSWORD_CREDENTIALS_W() {
        return constants$712.CREDENTIAL_OID_PASSWORD_CREDENTIALS_W$ADDR;
    }
    public static MemoryAddress CREDENTIAL_OID_PASSWORD_CREDENTIALS() {
        return constants$712.CREDENTIAL_OID_PASSWORD_CREDENTIALS$ADDR;
    }
    public static MemorySegment SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC() {
        return constants$713.SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC$SEGMENT;
    }
    public static MemorySegment SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC() {
        return constants$713.SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC$SEGMENT;
    }
    public static MemorySegment CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC() {
        return constants$713.CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC$SEGMENT;
    }
    public static MemoryAddress CONTEXT_OID_CERTIFICATE() {
        return constants$713.CONTEXT_OID_CERTIFICATE$ADDR;
    }
    public static MemoryAddress CONTEXT_OID_CRL() {
        return constants$713.CONTEXT_OID_CRL$ADDR;
    }
    public static MemoryAddress CONTEXT_OID_CTL() {
        return constants$713.CONTEXT_OID_CTL$ADDR;
    }
    public static MemoryAddress CONTEXT_OID_PKCS7() {
        return constants$714.CONTEXT_OID_PKCS7$ADDR;
    }
    public static MemoryAddress CONTEXT_OID_CAPI2_ANY() {
        return constants$714.CONTEXT_OID_CAPI2_ANY$ADDR;
    }
    public static MemoryAddress CONTEXT_OID_OCSP_RESP() {
        return constants$714.CONTEXT_OID_OCSP_RESP$ADDR;
    }
    public static int CRYPTNET_URL_CACHE_DISABLE_FLUSH() {
        return (int)4294967295L;
    }
    public static MemoryAddress CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION() {
        return constants$714.CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION$ADDR;
    }
    public static MemoryAddress CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL() {
        return constants$714.CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL$ADDR;
    }
    public static MemorySegment URL_OID_GET_OBJECT_URL_FUNC() {
        return constants$714.URL_OID_GET_OBJECT_URL_FUNC$SEGMENT;
    }
    public static MemoryAddress URL_OID_CERTIFICATE_ISSUER() {
        return constants$715.URL_OID_CERTIFICATE_ISSUER$ADDR;
    }
    public static MemoryAddress URL_OID_CERTIFICATE_CRL_DIST_POINT() {
        return constants$715.URL_OID_CERTIFICATE_CRL_DIST_POINT$ADDR;
    }
    public static MemoryAddress URL_OID_CTL_ISSUER() {
        return constants$715.URL_OID_CTL_ISSUER$ADDR;
    }
    public static MemoryAddress URL_OID_CTL_NEXT_UPDATE() {
        return constants$715.URL_OID_CTL_NEXT_UPDATE$ADDR;
    }
    public static MemoryAddress URL_OID_CRL_ISSUER() {
        return constants$715.URL_OID_CRL_ISSUER$ADDR;
    }
    public static MemoryAddress URL_OID_CERTIFICATE_FRESHEST_CRL() {
        return constants$715.URL_OID_CERTIFICATE_FRESHEST_CRL$ADDR;
    }
    public static MemoryAddress URL_OID_CRL_FRESHEST_CRL() {
        return constants$716.URL_OID_CRL_FRESHEST_CRL$ADDR;
    }
    public static MemoryAddress URL_OID_CROSS_CERT_DIST_POINT() {
        return constants$716.URL_OID_CROSS_CERT_DIST_POINT$ADDR;
    }
    public static MemoryAddress URL_OID_CERTIFICATE_OCSP() {
        return constants$716.URL_OID_CERTIFICATE_OCSP$ADDR;
    }
    public static MemoryAddress URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT() {
        return constants$716.URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT$ADDR;
    }
    public static MemoryAddress URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP() {
        return constants$716.URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP$ADDR;
    }
    public static MemoryAddress URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS() {
        return constants$716.URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS$ADDR;
    }
    public static MemoryAddress URL_OID_CERTIFICATE_ONLY_OCSP() {
        return constants$717.URL_OID_CERTIFICATE_ONLY_OCSP$ADDR;
    }
    public static MemorySegment TIME_VALID_OID_GET_OBJECT_FUNC() {
        return constants$717.TIME_VALID_OID_GET_OBJECT_FUNC$SEGMENT;
    }
    public static MemoryAddress TIME_VALID_OID_GET_CTL() {
        return constants$717.TIME_VALID_OID_GET_CTL$ADDR;
    }
    public static MemoryAddress TIME_VALID_OID_GET_CRL() {
        return constants$717.TIME_VALID_OID_GET_CRL$ADDR;
    }
    public static MemoryAddress TIME_VALID_OID_GET_CRL_FROM_CERT() {
        return constants$717.TIME_VALID_OID_GET_CRL_FROM_CERT$ADDR;
    }
    public static MemoryAddress TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT() {
        return constants$717.TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT$ADDR;
    }
    public static MemoryAddress TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL() {
        return constants$718.TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL$ADDR;
    }
    public static MemorySegment TIME_VALID_OID_FLUSH_OBJECT_FUNC() {
        return constants$718.TIME_VALID_OID_FLUSH_OBJECT_FUNC$SEGMENT;
    }
    public static MemoryAddress TIME_VALID_OID_FLUSH_CTL() {
        return constants$718.TIME_VALID_OID_FLUSH_CTL$ADDR;
    }
    public static MemoryAddress TIME_VALID_OID_FLUSH_CRL() {
        return constants$718.TIME_VALID_OID_FLUSH_CRL$ADDR;
    }
    public static MemoryAddress TIME_VALID_OID_FLUSH_CRL_FROM_CERT() {
        return constants$718.TIME_VALID_OID_FLUSH_CRL_FROM_CERT$ADDR;
    }
    public static MemoryAddress TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT() {
        return constants$718.TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT$ADDR;
    }
    public static MemoryAddress TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL() {
        return constants$719.TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL$ADDR;
    }
    public static MemorySegment CERT_CHAIN_CONFIG_REGPATH() {
        return constants$719.CERT_CHAIN_CONFIG_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME() {
        return constants$719.CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_DEFAULT() {
        return (int)104857600L;
    }
    public static MemorySegment CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME() {
        return constants$719.CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME() {
        return constants$719.CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME() {
        return constants$719.CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME() {
        return constants$720.CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME() {
        return constants$720.CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME() {
        return constants$720.CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME() {
        return constants$720.CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME() {
        return constants$720.CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME() {
        return constants$720.CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_OCSP_VALIDITY_SECONDS_DEFAULT() {
        return (int)43200L;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME() {
        return constants$721.CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME() {
        return constants$721.CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME() {
        return constants$721.CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME() {
        return constants$721.CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME() {
        return constants$721.CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME() {
        return constants$721.CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME() {
        return constants$722.CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME() {
        return constants$722.CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME$SEGMENT;
    }
    public static long CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_DEFAULT() {
        return 129067776000000000L;
    }
    public static MemorySegment CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME() {
        return constants$722.CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DEFAULT_CONFIG_SUBDIR() {
        return constants$722.CERT_CHAIN_DEFAULT_CONFIG_SUBDIR$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_PREFIX_NAME() {
        return constants$722.CERT_CHAIN_WEAK_PREFIX_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME() {
        return constants$722.CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_ALL_CONFIG_NAME() {
        return constants$723.CERT_CHAIN_WEAK_ALL_CONFIG_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_FLAGS_NAME() {
        return constants$723.CERT_CHAIN_WEAK_FLAGS_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_HYGIENE_NAME() {
        return constants$723.CERT_CHAIN_WEAK_HYGIENE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_AFTER_TIME_NAME() {
        return constants$723.CERT_CHAIN_WEAK_AFTER_TIME_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME() {
        return constants$723.CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME() {
        return constants$723.CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME() {
        return constants$724.CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_SHA256_ALLOW_NAME() {
        return constants$724.CERT_CHAIN_WEAK_SHA256_ALLOW_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE() {
        return (int)4294967295L;
    }
    public static int CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG() {
        return (int)2147483648L;
    }
    public static int CERT_CHAIN_DISABLE_WEAK_FLAGS() {
        return (int)215285760L;
    }
    public static int CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAGS() {
        return (int)12288L;
    }
    public static int CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAGS() {
        return (int)49152L;
    }
    public static int CERT_CHAIN_ENABLE_HYGIENE_FLAGS() {
        return (int)857866240L;
    }
    public static int CERT_CHAIN_MOTW_WEAK_FLAGS() {
        return (int)1786773504L;
    }
    public static int CERT_CHAIN_OPT_IN_WEAK_FLAGS() {
        return (int)262144L;
    }
    public static MemorySegment CERT_CHAIN_AUTO_FLAGS_VALUE_NAME() {
        return constants$724.CERT_CHAIN_AUTO_FLAGS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_AUTO_LOG_FLAGS() {
        return (int)14L;
    }
    public static MemorySegment CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME() {
        return constants$724.CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME() {
        return constants$724.CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_DEFAULT() {
        return (int)1800L;
    }
    public static MemorySegment CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME() {
        return constants$724.CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME() {
        return constants$725.CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME() {
        return constants$725.CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT() {
        return (int)600L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME() {
        return constants$725.CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT() {
        return (int)15000L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$725.CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)14400L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$725.CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)120L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$725.CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)60L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME() {
        return constants$726.CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME() {
        return constants$726.CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_DEFAULT() {
        return (int)3600L;
    }
    public static MemorySegment CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME() {
        return constants$726.CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_OCSP_AFTER_CRL_DISABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME() {
        return constants$726.CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_DEFAULT() {
        return (int)2419200L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME() {
        return constants$726.CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_DEFAULT() {
        return (int)3600L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME() {
        return constants$726.CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_DEFAULT() {
        return (int)1209600L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME() {
        return constants$727.CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_DEFAULT() {
        return (int)1209600L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME() {
        return constants$727.CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME() {
        return constants$727.CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME() {
        return constants$727.CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT() {
        return (int)3600L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME() {
        return constants$727.CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME() {
        return constants$727.CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT() {
        return (int)14400L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME() {
        return constants$728.CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT() {
        return (int)1800L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME() {
        return constants$728.CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_DEFAULT() {
        return (int)1800L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME() {
        return constants$728.CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_DEFAULT() {
        return (int)600L;
    }
    public static int CRYPTNET_PRE_FETCH_TRIGGER_DISABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME() {
        return constants$728.CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME() {
        return constants$728.CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH() {
        return constants$728.CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME() {
        return constants$729.CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME() {
        return constants$729.CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME() {
        return constants$729.CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME() {
        return constants$729.CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME() {
        return constants$729.CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME() {
        return constants$729.CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_DEFAULT() {
        return (int)7200L;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_MIN() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$730.CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)3600L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME() {
        return constants$730.CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$730.CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$730.CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH() {
        return constants$730.CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME() {
        return constants$730.CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT() {
        return (int)15000L;
    }
    public static MemorySegment CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME() {
        return constants$731.CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT() {
        return (int)20000L;
    }
    public static MemorySegment CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME() {
        return constants$731.CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME() {
        return constants$731.CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_RETR_BEHAVIOR_FILE_VALUE_NAME() {
        return constants$731.CERT_RETR_BEHAVIOR_FILE_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME() {
        return constants$731.CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME() {
        return constants$731.CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_BEFORE_OCSP_ENABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME() {
        return constants$732.CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_OPTIONS_VALUE_NAME() {
        return constants$732.CERT_CHAIN_OPTIONS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME() {
        return constants$732.CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_DEFAULT() {
        return (int)168L;
    }
    public static MemorySegment CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME() {
        return constants$732.CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME$SEGMENT;
    }
    public static MemoryAddress HCCE_CURRENT_USER() {
        return constants$732.HCCE_CURRENT_USER$ADDR;
    }
    public static MemoryAddress HCCE_LOCAL_MACHINE() {
        return constants$732.HCCE_LOCAL_MACHINE$ADDR;
    }
    public static MemoryAddress HCCE_SERIAL_LOCAL_MACHINE() {
        return constants$733.HCCE_SERIAL_LOCAL_MACHINE$ADDR;
    }
    public static int CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY() {
        return (int)2147483648L;
    }
    public static MemoryAddress REVOCATION_OID_CRL_REVOCATION() {
        return constants$733.REVOCATION_OID_CRL_REVOCATION$ADDR;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS() {
        return (int)7L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS() {
        return (int)3840L;
    }
    public static MemorySegment CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC() {
        return constants$733.CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC$SEGMENT;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_BASE() {
        return constants$733.CERT_CHAIN_POLICY_BASE$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_AUTHENTICODE() {
        return constants$733.CERT_CHAIN_POLICY_AUTHENTICODE$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_AUTHENTICODE_TS() {
        return constants$733.CERT_CHAIN_POLICY_AUTHENTICODE_TS$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_SSL() {
        return constants$734.CERT_CHAIN_POLICY_SSL$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_BASIC_CONSTRAINTS() {
        return constants$734.CERT_CHAIN_POLICY_BASIC_CONSTRAINTS$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_NT_AUTH() {
        return constants$734.CERT_CHAIN_POLICY_NT_AUTH$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_MICROSOFT_ROOT() {
        return constants$734.CERT_CHAIN_POLICY_MICROSOFT_ROOT$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_EV() {
        return constants$734.CERT_CHAIN_POLICY_EV$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_SSL_F12() {
        return constants$734.CERT_CHAIN_POLICY_SSL_F12$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_SSL_HPKP_HEADER() {
        return constants$735.CERT_CHAIN_POLICY_SSL_HPKP_HEADER$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_THIRD_PARTY_ROOT() {
        return constants$735.CERT_CHAIN_POLICY_THIRD_PARTY_ROOT$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_SSL_KEY_PIN() {
        return constants$735.CERT_CHAIN_POLICY_SSL_KEY_PIN$ADDR;
    }
    public static int BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG() {
        return (int)2147483648L;
    }
    public static int CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR() {
        return (int)-2L;
    }
    public static int CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR() {
        return (int)-1L;
    }
    public static int CRYPT_STRING_NOCR() {
        return (int)2147483648L;
    }
    public static MemorySegment szOID_PKCS_12_PbeIds() {
        return constants$735.szOID_PKCS_12_PbeIds$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And128BitRC4() {
        return constants$735.szOID_PKCS_12_pbeWithSHA1And128BitRC4$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And40BitRC4() {
        return constants$735.szOID_PKCS_12_pbeWithSHA1And40BitRC4$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES() {
        return constants$736.szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES() {
        return constants$736.szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And128BitRC2() {
        return constants$736.szOID_PKCS_12_pbeWithSHA1And128BitRC2$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And40BitRC2() {
        return constants$736.szOID_PKCS_12_pbeWithSHA1And40BitRC2$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_5_PBKDF2() {
        return constants$736.szOID_PKCS_5_PBKDF2$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_5_PBES2() {
        return constants$736.szOID_PKCS_5_PBES2$SEGMENT;
    }
    public static int PKCS12_IMPORT_RESERVED_MASK() {
        return (int)4294901760L;
    }
    public static int PKCS12_OBJECT_LOCATOR_ALL_IMPORT_FLAGS() {
        return (int)33360L;
    }
    public static MemorySegment PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME() {
        return constants$737.PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME$SEGMENT;
    }
    public static MemorySegment PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME() {
        return constants$737.PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME$SEGMENT;
    }
    public static int PKCS12_EXPORT_RESERVED_MASK() {
        return (int)4294901760L;
    }
    public static MemorySegment PKCS12_PBKDF2_ID_HMAC_SHA1() {
        return constants$737.PKCS12_PBKDF2_ID_HMAC_SHA1$SEGMENT;
    }
    public static MemorySegment PKCS12_PBKDF2_ID_HMAC_SHA256() {
        return constants$737.PKCS12_PBKDF2_ID_HMAC_SHA256$SEGMENT;
    }
    public static MemorySegment PKCS12_PBKDF2_ID_HMAC_SHA384() {
        return constants$737.PKCS12_PBKDF2_ID_HMAC_SHA384$SEGMENT;
    }
    public static MemorySegment PKCS12_PBKDF2_ID_HMAC_SHA512() {
        return constants$737.PKCS12_PBKDF2_ID_HMAC_SHA512$SEGMENT;
    }
    public static MemorySegment PKCS12_PBES2_ALG_AES256_SHA256() {
        return constants$738.PKCS12_PBES2_ALG_AES256_SHA256$SEGMENT;
    }
    public static MemorySegment PKCS12_CONFIG_REGPATH() {
        return constants$738.PKCS12_CONFIG_REGPATH$SEGMENT;
    }
    public static MemorySegment PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME() {
        return constants$738.PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME$SEGMENT;
    }
    public static MemoryAddress CERT_RETRIEVE_ISSUER_LOGO() {
        return constants$738.CERT_RETRIEVE_ISSUER_LOGO$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_SUBJECT_LOGO() {
        return constants$738.CERT_RETRIEVE_SUBJECT_LOGO$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_COMMUNITY_LOGO() {
        return constants$738.CERT_RETRIEVE_COMMUNITY_LOGO$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE() {
        return constants$739.CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE() {
        return constants$739.CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE() {
        return constants$739.CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE$ADDR;
    }
    public static int CERT_SELECT_LAST() {
        return (int)11L;
    }
    public static int CERT_SELECT_MAX() {
        return (int)33L;
    }
    public static MemorySegment SSL_OBJECT_LOCATOR_PFX_FUNC() {
        return constants$739.SSL_OBJECT_LOCATOR_PFX_FUNC$SEGMENT;
    }
    public static MemorySegment SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC() {
        return constants$739.SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC$SEGMENT;
    }
    public static MemorySegment SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC() {
        return constants$739.SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC$SEGMENT;
    }
    public static int METHOD_DIRECT_TO_HARDWARE() {
        return (int)1L;
    }
    public static int METHOD_DIRECT_FROM_HARDWARE() {
        return (int)2L;
    }
    public static int FILE_SPECIAL_ACCESS() {
        return (int)0L;
    }
    public static int FILE_READ_ACCESS() {
        return (int)1L;
    }
    public static int FILE_WRITE_ACCESS() {
        return (int)2L;
    }
    public static int IOCTL_STORAGE_BASE() {
        return (int)45L;
    }
    public static int IOCTL_STORAGE_CHECK_VERIFY() {
        return (int)2967552L;
    }
    public static int IOCTL_STORAGE_CHECK_VERIFY2() {
        return (int)2951168L;
    }
    public static int IOCTL_STORAGE_MEDIA_REMOVAL() {
        return (int)2967556L;
    }
    public static int IOCTL_STORAGE_EJECT_MEDIA() {
        return (int)2967560L;
    }
    public static int IOCTL_STORAGE_LOAD_MEDIA() {
        return (int)2967564L;
    }
    public static int IOCTL_STORAGE_LOAD_MEDIA2() {
        return (int)2951180L;
    }
    public static int IOCTL_STORAGE_RESERVE() {
        return (int)2967568L;
    }
    public static int IOCTL_STORAGE_RELEASE() {
        return (int)2967572L;
    }
    public static int IOCTL_STORAGE_FIND_NEW_DEVICES() {
        return (int)2967576L;
    }
    public static int IOCTL_STORAGE_EJECTION_CONTROL() {
        return (int)2951488L;
    }
    public static int IOCTL_STORAGE_MCN_CONTROL() {
        return (int)2951492L;
    }
    public static int IOCTL_STORAGE_GET_MEDIA_TYPES() {
        return (int)2952192L;
    }
    public static int IOCTL_STORAGE_GET_MEDIA_TYPES_EX() {
        return (int)2952196L;
    }
    public static int IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER() {
        return (int)2952208L;
    }
    public static int IOCTL_STORAGE_GET_HOTPLUG_INFO() {
        return (int)2952212L;
    }
    public static int IOCTL_STORAGE_SET_HOTPLUG_INFO() {
        return (int)3001368L;
    }
    public static int IOCTL_STORAGE_RESET_BUS() {
        return (int)2969600L;
    }
    public static int IOCTL_STORAGE_RESET_DEVICE() {
        return (int)2969604L;
    }
    public static int IOCTL_STORAGE_BREAK_RESERVATION() {
        return (int)2969620L;
    }
    public static int IOCTL_STORAGE_PERSISTENT_RESERVE_IN() {
        return (int)2969624L;
    }
    public static int IOCTL_STORAGE_PERSISTENT_RESERVE_OUT() {
        return (int)3002396L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_NUMBER() {
        return (int)2953344L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_NUMBER_EX() {
        return (int)2953348L;
    }
    public static int IOCTL_STORAGE_PREDICT_FAILURE() {
        return (int)2953472L;
    }
    public static int IOCTL_STORAGE_FAILURE_PREDICTION_CONFIG() {
        return (int)2953476L;
    }
    public static int IOCTL_STORAGE_GET_COUNTERS() {
        return (int)2953480L;
    }
    public static int IOCTL_STORAGE_READ_CAPACITY() {
        return (int)2969920L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_TELEMETRY() {
        return (int)3002816L;
    }
    public static int IOCTL_STORAGE_DEVICE_TELEMETRY_NOTIFY() {
        return (int)3002820L;
    }
    public static int IOCTL_STORAGE_DEVICE_TELEMETRY_QUERY_CAPS() {
        return (int)3002824L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_TELEMETRY_RAW() {
        return (int)3002828L;
    }
    public static int IOCTL_STORAGE_SET_TEMPERATURE_THRESHOLD() {
        return (int)3002880L;
    }
    public static int IOCTL_STORAGE_PROTOCOL_COMMAND() {
        return (int)3003328L;
    }
    public static int IOCTL_STORAGE_QUERY_PROPERTY() {
        return (int)2954240L;
    }
    public static int IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES() {
        return (int)2987012L;
    }
    public static int IOCTL_STORAGE_GET_LB_PROVISIONING_MAP_RESOURCES() {
        return (int)2970632L;
    }
    public static int IOCTL_STORAGE_SET_PROPERTY() {
        return (int)2987020L;
    }
    public static int IOCTL_STORAGE_REINITIALIZE_MEDIA() {
        return (int)2987584L;
    }
    public static int IOCTL_STORAGE_GET_BC_PROPERTIES() {
        return (int)2971648L;
    }
    public static int IOCTL_STORAGE_ALLOCATE_BC_STREAM() {
        return (int)3004420L;
    }
    public static int IOCTL_STORAGE_FREE_BC_STREAM() {
        return (int)3004424L;
    }
    public static int IOCTL_STORAGE_CHECK_PRIORITY_HINT_SUPPORT() {
        return (int)2955392L;
    }
    public static int IOCTL_STORAGE_START_DATA_INTEGRITY_CHECK() {
        return (int)3004548L;
    }
    public static int IOCTL_STORAGE_STOP_DATA_INTEGRITY_CHECK() {
        return (int)3004552L;
    }
    public static int OBSOLETE_IOCTL_STORAGE_RESET_BUS() {
        return (int)3002368L;
    }
    public static int OBSOLETE_IOCTL_STORAGE_RESET_DEVICE() {
        return (int)3002372L;
    }
    public static int IOCTL_STORAGE_FIRMWARE_GET_INFO() {
        return (int)2956288L;
    }
    public static int IOCTL_STORAGE_FIRMWARE_DOWNLOAD() {
        return (int)3005444L;
    }
    public static int IOCTL_STORAGE_FIRMWARE_ACTIVATE() {
        return (int)3005448L;
    }
    public static int IOCTL_STORAGE_ENABLE_IDLE_POWER() {
        return (int)2956416L;
    }
    public static int IOCTL_STORAGE_GET_IDLE_POWERUP_REASON() {
        return (int)2956420L;
    }
    public static int IOCTL_STORAGE_POWER_ACTIVE() {
        return (int)2956424L;
    }
    public static int IOCTL_STORAGE_POWER_IDLE() {
        return (int)2956428L;
    }
    public static int IOCTL_STORAGE_EVENT_NOTIFICATION() {
        return (int)2956432L;
    }
    public static int IOCTL_STORAGE_DEVICE_POWER_CAP() {
        return (int)2956436L;
    }
    public static int IOCTL_STORAGE_RPMB_COMMAND() {
        return (int)2956440L;
    }
    public static int IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT() {
        return (int)3005596L;
    }
    public static int IOCTL_STORAGE_DIAGNOSTIC() {
        return (int)2956448L;
    }
    public static int IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS() {
        return (int)2956452L;
    }
    public static int IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE() {
        return (int)2956480L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_INTERNAL_LOG() {
        return (int)2956484L;
    }
    public static int TAPE_RETURN_STATISTICS() {
        return (int)0L;
    }
    public static int TAPE_RETURN_ENV_INFO() {
        return (int)1L;
    }
    public static int TAPE_RESET_STATISTICS() {
        return (int)2L;
    }
    public static int MEDIA_CURRENTLY_MOUNTED() {
        return (int)2147483648L;
    }
    public static int NO_SRBTYPE_ADAPTER_DESCRIPTOR_SIZE() {
        return (int)30L;
    }
    public static long STORAGE_MINIPORT_DESCRIPTOR_V1_SIZE() {
        return 16L;
    }
    public static int StorageIdTypeNAA() {
        return (int)3L;
    }
    public static long DEVICE_LB_PROVISIONING_DESCRIPTOR_V1_SIZE() {
        return 32L;
    }
    public static int STORAGE_TIER_NAME_LENGTH() {
        return (int)256L;
    }
    public static int STORAGE_TIER_DESCRIPTION_LENGTH() {
        return (int)512L;
    }
    public static int STORAGE_TIER_FLAG_NO_SEEK_PENALTY() {
        return (int)131072L;
    }
    public static int STORAGE_TIER_FLAG_WRITE_BACK_CACHE() {
        return (int)2097152L;
    }
    public static int STORAGE_TIER_FLAG_READ_CACHE() {
        return (int)4194304L;
    }
    public static int STORAGE_TIER_FLAG_PARITY() {
        return (int)8388608L;
    }
    public static int STORAGE_TIER_FLAG_SMR() {
        return (int)16777216L;
    }
    public static int STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH() {
        return (int)128L;
    }
    public static long STORAGE_ADAPTER_SERIAL_NUMBER_V1_VERSION() {
        return 264L;
    }
    public static long STORAGE_ADAPTER_SERIAL_NUMBER_V1_SIZE() {
        return 264L;
    }
    public static int STORAGE_DEVICE_NUMA_NODE_UNKNOWN() {
        return (int)4294967295L;
    }
    public static int DeviceDsmActionFlag_NonDestructive() {
        return (int)2147483648L;
    }
    public static int DeviceDsmAction_None() {
        return (int)0L;
    }
    public static int DeviceDsmAction_Trim() {
        return (int)1L;
    }
    public static int DeviceDsmAction_Notification() {
        return (int)2147483650L;
    }
    public static int DeviceDsmAction_OffloadRead() {
        return (int)2147483651L;
    }
    public static int DeviceDsmAction_OffloadWrite() {
        return (int)4L;
    }
    public static int DeviceDsmAction_Allocation() {
        return (int)2147483653L;
    }
    public static int DeviceDsmAction_Repair() {
        return (int)2147483654L;
    }
    public static int DeviceDsmAction_Scrub() {
        return (int)2147483655L;
    }
    public static int DeviceDsmAction_DrtQuery() {
        return (int)2147483656L;
    }
    public static int DeviceDsmAction_DrtClear() {
        return (int)2147483657L;
    }
    public static int DeviceDsmAction_DrtDisable() {
        return (int)2147483658L;
    }
    public static int DeviceDsmAction_TieringQuery() {
        return (int)2147483659L;
    }
    public static int DeviceDsmAction_Map() {
        return (int)2147483660L;
    }
    public static int DeviceDsmAction_RegenerateParity() {
        return (int)2147483661L;
    }
    public static int DeviceDsmAction_NvCache_Change_Priority() {
        return (int)2147483662L;
    }
    public static int DeviceDsmAction_NvCache_Evict() {
        return (int)2147483663L;
    }
    public static int DeviceDsmAction_TopologyIdQuery() {
        return (int)2147483664L;
    }
    public static int DeviceDsmAction_GetPhysicalAddresses() {
        return (int)2147483665L;
    }
    public static int DeviceDsmAction_ScopeRegen() {
        return (int)2147483666L;
    }
    public static int DeviceDsmAction_ReportZones() {
        return (int)2147483667L;
    }
    public static int DeviceDsmAction_OpenZone() {
        return (int)2147483668L;
    }
    public static int DeviceDsmAction_FinishZone() {
        return (int)2147483669L;
    }
    public static int DeviceDsmAction_CloseZone() {
        return (int)2147483670L;
    }
    public static int DeviceDsmAction_ResetWritePointer() {
        return (int)23L;
    }
    public static int DeviceDsmAction_GetRangeErrorInfo() {
        return (int)2147483672L;
    }
    public static int DeviceDsmAction_WriteZeroes() {
        return (int)25L;
    }
    public static int DeviceDsmAction_LostQuery() {
        return (int)2147483674L;
    }
    public static int DeviceDsmAction_GetFreeSpace() {
        return (int)2147483675L;
    }
    public static int DeviceDsmAction_ConversionQuery() {
        return (int)2147483676L;
    }
    public static int DeviceDsmAction_VdtSet() {
        return (int)29L;
    }
    public static int DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED() {
        return (int)2147483648L;
    }
    public static int STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA() {
        return (int)4294901761L;
    }
    public static int DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1() {
        return (int)1L;
    }
    public static long DEVICE_DSM_ALLOCATION_OUTPUT_V1() {
        return 32L;
    }
    public static long DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V1() {
        return 32L;
    }
    public static long DEVICE_DSM_ALLOCATION_OUTPUT_V2() {
        return 40L;
    }
    public static long DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V2() {
        return 40L;
    }
    public static long DEVICE_DSM_PHYSICAL_ADDRESS_HAS_MEMORY_ERROR() {
        return -1L;
    }
    public static int DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1() {
        return (int)1L;
    }
    public static int DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1() {
        return (int)1L;
    }
    public static MemorySegment STORAGE_CRASH_TELEMETRY_REGKEY() {
        return constants$740.STORAGE_CRASH_TELEMETRY_REGKEY$SEGMENT;
    }
    public static MemorySegment STORAGE_DEVICE_TELEMETRY_REGKEY() {
        return constants$740.STORAGE_DEVICE_TELEMETRY_REGKEY$SEGMENT;
    }
    public static int FW_ISSUEID_UNKNOWN() {
        return (int)4294967295L;
    }
    public static MemorySegment TC_PUBLIC_DATA_TYPE_ATAGP() {
        return constants$740.TC_PUBLIC_DATA_TYPE_ATAGP$SEGMENT;
    }
    public static MemorySegment TC_PUBLIC_DATA_TYPE_ATASMART() {
        return constants$740.TC_PUBLIC_DATA_TYPE_ATASMART$SEGMENT;
    }
    public static int STORAGE_EVENT_ALL() {
        return (int)7L;
    }
    public static long STORAGE_COUNTERS_VERSION_V1() {
        return 32L;
    }
    public static int STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE() {
        return (int)2147483648L;
    }
    public static int STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST() {
        return (int)2147483648L;
    }
    public static int IOCTL_SCMBUS_BASE() {
        return (int)89L;
    }
    public static int IOCTL_SCM_BUS_GET_LOGICAL_DEVICES() {
        return (int)5832704L;
    }
    public static int IOCTL_SCM_BUS_GET_PHYSICAL_DEVICES() {
        return (int)5832708L;
    }
    public static int IOCTL_SCM_BUS_GET_REGIONS() {
        return (int)5832712L;
    }
    public static int IOCTL_SCM_LD_GET_INTERLEAVE_SET() {
        return (int)5835776L;
    }
    public static int IOCTL_SCM_PD_QUERY_PROPERTY() {
        return (int)5838848L;
    }
    public static int IOCTL_SCM_PD_FIRMWARE_DOWNLOAD() {
        return (int)5871620L;
    }
    public static int IOCTL_SCM_PD_FIRMWARE_ACTIVATE() {
        return (int)5871624L;
    }
    public static int IOCTL_SCM_PD_PASSTHROUGH() {
        return (int)5888012L;
    }
    public static int IOCTL_SCM_PD_UPDATE_MANAGEMENT_STATUS() {
        return (int)5838864L;
    }
    public static int IOCTL_SCM_PD_REINITIALIZE_MEDIA() {
        return (int)5871636L;
    }
    public static long SCM_REGION_SPA_UNKNOWN() {
        return -1L;
    }
    public static long SCM_PD_MEMORY_SIZE_UNKNOWN() {
        return -1L;
    }
    public static int IOCTL_DISK_BASE() {
        return (int)7L;
    }
    public static int IOCTL_DISK_GET_DRIVE_GEOMETRY() {
        return (int)458752L;
    }
    public static int IOCTL_DISK_GET_PARTITION_INFO() {
        return (int)475140L;
    }
    public static int IOCTL_DISK_SET_PARTITION_INFO() {
        return (int)507912L;
    }
    public static int IOCTL_DISK_GET_DRIVE_LAYOUT() {
        return (int)475148L;
    }
    public static int IOCTL_DISK_SET_DRIVE_LAYOUT() {
        return (int)507920L;
    }
    public static int IOCTL_DISK_VERIFY() {
        return (int)458772L;
    }
    public static int IOCTL_DISK_FORMAT_TRACKS() {
        return (int)507928L;
    }
    public static int IOCTL_DISK_REASSIGN_BLOCKS() {
        return (int)507932L;
    }
    public static int IOCTL_DISK_PERFORMANCE() {
        return (int)458784L;
    }
    public static int IOCTL_DISK_IS_WRITABLE() {
        return (int)458788L;
    }
    public static int IOCTL_DISK_LOGGING() {
        return (int)458792L;
    }
    public static int IOCTL_DISK_FORMAT_TRACKS_EX() {
        return (int)507948L;
    }
    public static int IOCTL_DISK_HISTOGRAM_STRUCTURE() {
        return (int)458800L;
    }
    public static int IOCTL_DISK_HISTOGRAM_DATA() {
        return (int)458804L;
    }
    public static int IOCTL_DISK_HISTOGRAM_RESET() {
        return (int)458808L;
    }
    public static int IOCTL_DISK_REQUEST_STRUCTURE() {
        return (int)458812L;
    }
    public static int IOCTL_DISK_REQUEST_DATA() {
        return (int)458816L;
    }
    public static int IOCTL_DISK_PERFORMANCE_OFF() {
        return (int)458848L;
    }
    public static int IOCTL_DISK_CONTROLLER_NUMBER() {
        return (int)458820L;
    }
    public static int SMART_GET_VERSION() {
        return (int)475264L;
    }
    public static int SMART_SEND_DRIVE_COMMAND() {
        return (int)508036L;
    }
    public static int SMART_RCV_DRIVE_DATA() {
        return (int)508040L;
    }
    public static int IOCTL_DISK_GET_PARTITION_INFO_EX() {
        return (int)458824L;
    }
    public static int IOCTL_DISK_SET_PARTITION_INFO_EX() {
        return (int)507980L;
    }
    public static int IOCTL_DISK_GET_DRIVE_LAYOUT_EX() {
        return (int)458832L;
    }
    public static int IOCTL_DISK_SET_DRIVE_LAYOUT_EX() {
        return (int)507988L;
    }
    public static int IOCTL_DISK_CREATE_DISK() {
        return (int)507992L;
    }
    public static int IOCTL_DISK_GET_LENGTH_INFO() {
        return (int)475228L;
    }
    public static int IOCTL_DISK_GET_DRIVE_GEOMETRY_EX() {
        return (int)458912L;
    }
    public static int IOCTL_DISK_REASSIGN_BLOCKS_EX() {
        return (int)508068L;
    }
    public static int IOCTL_DISK_UPDATE_DRIVE_SIZE() {
        return (int)508104L;
    }
    public static int IOCTL_DISK_GROW_PARTITION() {
        return (int)508112L;
    }
    public static int IOCTL_DISK_GET_CACHE_INFORMATION() {
        return (int)475348L;
    }
    public static int IOCTL_DISK_SET_CACHE_INFORMATION() {
        return (int)508120L;
    }
    public static int OBSOLETE_DISK_GET_WRITE_CACHE_STATE() {
        return (int)475356L;
    }
    public static int IOCTL_DISK_DELETE_DRIVE_LAYOUT() {
        return (int)508160L;
    }
    public static int IOCTL_DISK_UPDATE_PROPERTIES() {
        return (int)459072L;
    }
    public static int IOCTL_DISK_FORMAT_DRIVE() {
        return (int)508876L;
    }
    public static int IOCTL_DISK_SENSE_DEVICE() {
        return (int)459744L;
    }
    public static int IOCTL_DISK_CHECK_VERIFY() {
        return (int)477184L;
    }
    public static int IOCTL_DISK_MEDIA_REMOVAL() {
        return (int)477188L;
    }
    public static int IOCTL_DISK_EJECT_MEDIA() {
        return (int)477192L;
    }
    public static int IOCTL_DISK_LOAD_MEDIA() {
        return (int)477196L;
    }
    public static int IOCTL_DISK_RESERVE() {
        return (int)477200L;
    }
    public static int IOCTL_DISK_RELEASE() {
        return (int)477204L;
    }
    public static int IOCTL_DISK_FIND_NEW_DEVICES() {
        return (int)477208L;
    }
    public static int IOCTL_DISK_GET_MEDIA_TYPES() {
        return (int)461824L;
    }
    public static int GPT_ATTRIBUTE_PLATFORM_REQUIRED() {
        return (int)1L;
    }
    public static int GPT_ATTRIBUTE_NO_BLOCK_IO_PROTOCOL() {
        return (int)2L;
    }
    public static int GPT_ATTRIBUTE_LEGACY_BIOS_BOOTABLE() {
        return (int)4L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER() {
        return -9223372036854775808L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_HIDDEN() {
        return 4611686018427387904L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY() {
        return 2305843009213693952L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY() {
        return 1152921504606846976L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_OFFLINE() {
        return 576460752303423488L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_DAX() {
        return 288230376151711744L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_SERVICE() {
        return 144115188075855872L;
    }
    public static long GPT_SPACES_ATTRIBUTE_NO_METADATA() {
        return -9223372036854775808L;
    }
    public static long HISTOGRAM_BUCKET_SIZE() {
        return 8L;
    }
    public static long DISK_HISTOGRAM_SIZE() {
        return 72L;
    }
    public static int IOCTL_DISK_GET_DISK_ATTRIBUTES() {
        return (int)458992L;
    }
    public static int IOCTL_DISK_SET_DISK_ATTRIBUTES() {
        return (int)508148L;
    }
    public static int IOCTL_DISK_RESET_SNAPSHOT_INFO() {
        return (int)508432L;
    }
    public static int IOCTL_CHANGER_BASE() {
        return (int)48L;
    }
    public static int IOCTL_CHANGER_GET_PARAMETERS() {
        return (int)3162112L;
    }
    public static int IOCTL_CHANGER_GET_STATUS() {
        return (int)3162116L;
    }
    public static int IOCTL_CHANGER_GET_PRODUCT_DATA() {
        return (int)3162120L;
    }
    public static int IOCTL_CHANGER_SET_ACCESS() {
        return (int)3194896L;
    }
    public static int IOCTL_CHANGER_GET_ELEMENT_STATUS() {
        return (int)3194900L;
    }
    public static int IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS() {
        return (int)3162136L;
    }
    public static int IOCTL_CHANGER_SET_POSITION() {
        return (int)3162140L;
    }
    public static int IOCTL_CHANGER_EXCHANGE_MEDIUM() {
        return (int)3162144L;
    }
    public static int IOCTL_CHANGER_MOVE_MEDIUM() {
        return (int)3162148L;
    }
    public static int IOCTL_CHANGER_REINITIALIZE_TRANSPORT() {
        return (int)3162152L;
    }
    public static int IOCTL_CHANGER_QUERY_VOLUME_TAGS() {
        return (int)3194924L;
    }
    public static int CHANGER_RESERVED_BIT() {
        return (int)2147483648L;
    }
    public static int CHANGER_PREDISMOUNT_ALIGN_TO_SLOT() {
        return (int)2147483649L;
    }
    public static int CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE() {
        return (int)2147483650L;
    }
    public static int CHANGER_CLEANER_AUTODISMOUNT() {
        return (int)2147483652L;
    }
    public static int CHANGER_TRUE_EXCHANGE_CAPABLE() {
        return (int)2147483656L;
    }
    public static int CHANGER_SLOTS_USE_TRAYS() {
        return (int)2147483664L;
    }
    public static int CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR() {
        return (int)2147483680L;
    }
    public static int CHANGER_CLEANER_OPS_NOT_SUPPORTED() {
        return (int)2147483712L;
    }
    public static int CHANGER_IEPORT_USER_CONTROL_OPEN() {
        return (int)2147483776L;
    }
    public static int CHANGER_IEPORT_USER_CONTROL_CLOSE() {
        return (int)2147483904L;
    }
    public static int CHANGER_MOVE_EXTENDS_IEPORT() {
        return (int)2147484160L;
    }
    public static int CHANGER_MOVE_RETRACTS_IEPORT() {
        return (int)2147484672L;
    }
    public static int ERROR_UNHANDLED_ERROR() {
        return (int)4294967295L;
    }
    public static int IOCTL_SERIAL_LSRMST_INSERT() {
        return (int)1769596L;
    }
    public static int IOCTL_SERENUM_EXPOSE_HARDWARE() {
        return (int)3604992L;
    }
    public static int IOCTL_SERENUM_REMOVE_HARDWARE() {
        return (int)3604996L;
    }
    public static int IOCTL_SERENUM_PORT_DESC() {
        return (int)3605000L;
    }
    public static int IOCTL_SERENUM_GET_PORT_NAME() {
        return (int)3605004L;
    }
    public static byte SERIAL_LSRMST_ESCAPE() {
        return (byte)0L;
    }
    public static byte SERIAL_LSRMST_LSR_DATA() {
        return (byte)1L;
    }
    public static byte SERIAL_LSRMST_LSR_NODATA() {
        return (byte)2L;
    }
    public static byte SERIAL_LSRMST_MST() {
        return (byte)3L;
    }
    public static int SERIAL_IOC_FCR_FIFO_ENABLE() {
        return (int)1L;
    }
    public static int SERIAL_IOC_FCR_RCVR_RESET() {
        return (int)2L;
    }
    public static int SERIAL_IOC_FCR_XMIT_RESET() {
        return (int)4L;
    }
    public static int SERIAL_IOC_FCR_DMA_MODE() {
        return (int)8L;
    }
    public static int SERIAL_IOC_FCR_RES1() {
        return (int)16L;
    }
    public static int SERIAL_IOC_FCR_RES2() {
        return (int)32L;
    }
    public static int SERIAL_IOC_FCR_RCVR_TRIGGER_LSB() {
        return (int)64L;
    }
    public static int SERIAL_IOC_FCR_RCVR_TRIGGER_MSB() {
        return (int)128L;
    }
    public static int SERIAL_IOC_MCR_DTR() {
        return (int)1L;
    }
    public static int SERIAL_IOC_MCR_RTS() {
        return (int)2L;
    }
    public static int SERIAL_IOC_MCR_OUT1() {
        return (int)4L;
    }
    public static int SERIAL_IOC_MCR_OUT2() {
        return (int)8L;
    }
    public static int SERIAL_IOC_MCR_LOOP() {
        return (int)16L;
    }
    public static int FSCTL_REQUEST_OPLOCK_LEVEL_1() {
        return (int)589824L;
    }
    public static int FSCTL_REQUEST_OPLOCK_LEVEL_2() {
        return (int)589828L;
    }
    public static int FSCTL_REQUEST_BATCH_OPLOCK() {
        return (int)589832L;
    }
    public static int FSCTL_OPLOCK_BREAK_ACKNOWLEDGE() {
        return (int)589836L;
    }
    public static int FSCTL_OPBATCH_ACK_CLOSE_PENDING() {
        return (int)589840L;
    }
    public static int FSCTL_OPLOCK_BREAK_NOTIFY() {
        return (int)589844L;
    }
    public static int FSCTL_LOCK_VOLUME() {
        return (int)589848L;
    }
    public static int FSCTL_UNLOCK_VOLUME() {
        return (int)589852L;
    }
    public static int FSCTL_DISMOUNT_VOLUME() {
        return (int)589856L;
    }
    public static int FSCTL_IS_VOLUME_MOUNTED() {
        return (int)589864L;
    }
    public static int FSCTL_IS_PATHNAME_VALID() {
        return (int)589868L;
    }
    public static int FSCTL_MARK_VOLUME_DIRTY() {
        return (int)589872L;
    }
    public static int FSCTL_QUERY_RETRIEVAL_POINTERS() {
        return (int)589883L;
    }
    public static int FSCTL_GET_COMPRESSION() {
        return (int)589884L;
    }
    public static int FSCTL_SET_COMPRESSION() {
        return (int)639040L;
    }
    public static int FSCTL_SET_BOOTLOADER_ACCESSED() {
        return (int)589903L;
    }
    public static int FSCTL_MARK_AS_SYSTEM_HIVE() {
        return (int)589903L;
    }
    public static int FSCTL_OPLOCK_BREAK_ACK_NO_2() {
        return (int)589904L;
    }
    public static int FSCTL_INVALIDATE_VOLUMES() {
        return (int)589908L;
    }
    public static int FSCTL_QUERY_FAT_BPB() {
        return (int)589912L;
    }
    public static int FSCTL_REQUEST_FILTER_OPLOCK() {
        return (int)589916L;
    }
    public static int FSCTL_FILESYSTEM_GET_STATISTICS() {
        return (int)589920L;
    }
    public static int FSCTL_GET_NTFS_VOLUME_DATA() {
        return (int)589924L;
    }
    public static int FSCTL_GET_NTFS_FILE_RECORD() {
        return (int)589928L;
    }
    public static int FSCTL_GET_VOLUME_BITMAP() {
        return (int)589935L;
    }
    public static int FSCTL_GET_RETRIEVAL_POINTERS() {
        return (int)589939L;
    }
}


